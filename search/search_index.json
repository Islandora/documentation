{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#this-is-islandora","title":"This is Islandora","text":"<p>Islandora is an open-source framework that provides the necessary tools to use a Drupal website as a fully-functional Digital Assets Management System. See Quickstart to get started.</p> <p>Islandora:</p> <ul> <li>Is native Drupal - With Islandora, you can create preservation-ready digital resources using Drupal nodes, media, files, and taxonomy terms. </li> <li>Provides a sensible starting place - No two Islandora sites are the same, but we provide a starting point for Drupal - the Islandora Starter Site - as well as several methods of installation that set up a working suite of services external to Drupal and show off Islandora's capabilities. </li> <li>Integrates with Fedora - Drupal resources can be stored in Lyrasis's Fedora Repository (version 5.0 or greater) as binaries (files) and RDF metadata.</li> <li>Uses microservices - Islandora provides an architecture for messaging and integration with any number of microservices, that provide services outside of the Drupal framework. Islandora's Crayfish suite of microservices provides functionality for synchronizing resources into Fedora and for automatically generating helper files, called derivatives.</li> <li> <p>Can handle messages at scale - Islandora created Alpaca, an integration middleware based on Apache Camel, to handle messaging and queueing at an enterprise scale. To the user, this means large batch uploads can be processed gracefully.</p> </li> <li> <p>Offers digital preservation features - Using a robust storage layer for preservation (Fedora), and generating technical metadata with FITS, are digital preservation tools provided by our automated installation methods. Community members have created additional features for doing digital preservation using Islandora, which are not yet part of our automated setup. </p> </li> <li>Exposes data to harvesters - Metadata about resources is available as linked data through the JSON-LD serialization module, and can be made available through Drupal, Fedora, or a triplestore. Islandora Starter Site also offers a full configuration for exposing OAI-PMH so that metadata can be harvested by aggregators, and IIIF support means images in Islandora can be viewed in any IIIF-compliant viewer.</li> <li>Offers flexibility - As Islandora content is Drupal content, migrations and batch editing can be done through Drupal's built-in migrate framework and  vocabularies can be created using Drupal taxonomies. Contributed Drupal modules such as Solr Search API enable in-site search, and Matomo Analytics provides usage metrics for site analytics.</li> <li>Is a community - A dedicated, active community of users and developers is working to push new features, collaborate on improvements, design custom solutions, and create extended functionality. Some of these for Islandora 8 take the form of Recipes.</li> </ul>"},{"location":"#join-the-community","title":"Join the Community","text":"<p>The Islandora community is an active group of users, managers, librarians, documenters, and developers from galleries, libraries, archives, museums, and other institutions worldwide. We welcome discussion and contribution through various mailing lists, channels, interest groups, and calls. The Islandora community operates under the Islandora Code Of Conduct. See our Contributing Guidelines for more information.</p> <p>Documentation for previous versions</p> <p>Documentation for Islandora Legacy (6 and 7) is on the Lyrasis documentation wiki.</p>"},{"location":"placeholder/","title":"Placeholder page","text":"<p>This page serves as a placeholder for functionality that still needs documentation.</p> <p>Interested in contributing to the Islandora documentation? Join the Community!</p> <p>The Islandora community is an active group of users, managers, librarians, documenters, and developers from GLAM (and beyond!) institutions worldwide. We welcome discussion and contribution through various mailing lists, channels, interest groups, and calls. The Islandora community operates under the Islandora Code Of Conduct. See our Contributing Guidelines for more information, or drop by a meeting of the Documentation Interest Group for a helping hand.</p> <p>Documentation for previous versions</p> <p>Documentation for Islandora 6 and 7 is on the Lyrasis documentation wiki.</p>"},{"location":"alpaca/alpaca-technical-stack/","title":"Alpaca Technical Stack","text":"<p>As of version 2.0.0, Alpaca contains several tools bundled into a single runnable jar file. The different tools can be enabled/disabled depending on the configuration you define.</p>"},{"location":"alpaca/alpaca-technical-stack/#gradle","title":"Gradle","text":"<p>Gradle is used by Alpaca as a build and package management tool. It is similar to Maven.</p>"},{"location":"alpaca/alpaca-technical-stack/#apache-camel","title":"Apache Camel","text":"<p>Apache Camel is an integration framework that aids in implementing integration patterns.</p>"},{"location":"alpaca/alpaca-technical-stack/#apache-activemq","title":"Apache ActiveMQ","text":"<p>Apache ActiveMQ is a JMS compliant Messaging Queue. Messaging client can make use of JMS to send messages.</p>"},{"location":"alpaca/alpaca-technical-stack/#installing-activemq","title":"Installing ActiveMQ","text":"<p>Installing ActiveMQ is relatively easy. Download the latest stable release here. Go to the <code>activemq_install_dir/bin</code>. Start the ActiveMQ by using the activemq script or batch file and start command.</p> <pre><code>$ cd activemq_install_dir/bin\n$ ./activemq start\n</code></pre> <p>When ActiveMQ gets started, go to http://localhost:8161/admin/. You can login using admin:admin.</p> <p>Note that ActiveMQ in Islandora playbook does not have a UI.</p>"},{"location":"alpaca/alpaca-technical-stack/#references","title":"References","text":"<ul> <li>ActiveMQ Introduction</li> </ul>"},{"location":"concepts/collection/","title":"Collections","text":"<p>Collections are groups of related content that can be viewed or managed as a unit. Islandora-specific use cases include:</p> <ul> <li>an archival fonds that needs to be grouped together, with internal hierarchy</li> <li>various collections of artifacts, grouped for display</li> <li>theses and dissertations, which are organized and managed separately from other objects.</li> </ul>"},{"location":"concepts/collection/#islandora-features","title":"Islandora features","text":"<p>Islandora provides:</p> <ul> <li>a mechanism for grouping nodes under a \"Parent\" node through the generic \"Member Of\" relationship field (<code>field_member_of</code>). This mechanism is also used by Paged Content and Compound Objects. Islandora on its own does not prescribe any particular Content Type, so this field can be configured for any node bundle intended to represent Islandora resources.</li> <li>a \"Children\" tab on resources, which provides a management interface to access, re-order, add, or delete the members of a resource based on the Member Of field.</li> <li>a \"Model\" field (<code>field_model</code>) which can take various values including \"Collection\".</li> </ul>"},{"location":"concepts/collection/#islandora-starter-site-features","title":"Islandora Starter Site features","text":"<p>Islandora Starter Site is an optional set of presets for Islandora, intended to provide a more user-friendly out-of-the-box experience and starting point for more specific customization. </p> <p>Islandora Starter Site provides:</p> <ul> <li>a Content Type \"Repository Item\" that uses the <code>field_member_of</code> field, so that users may add nodes of this type to a collection (or paged content, or compound resource),</li> <li>A View showing the members of the collection.</li> <li>logic (a Context) such that if a resource is tagged as a \"Collection\" (in the \"Model\" field, then a view of its members will show on the collection's page.</li> </ul> <p>For more details, see the tutorial on How to create and add to a collection</p>"},{"location":"concepts/collection/#bulk-management-of-members-of-a-collection","title":"Bulk management of members of a collection","text":"<p>Bulk management of items can be done from a Views Bulk Operations-compatible View, including the main Drupal Content View (at admin/content) and the Manage Members View (at node/[node]/members). This is possible due to the Drupal contrib modules Views Bulk Operations (VBO) and Views Bulk Edit. VBO allows you to perform Drupal Actions on objects. These Actions include making Islandora Derivatives such as \"Audio - Generate a Service File from an Original File\" and also to perform Drupal core Actions such as publishing/unpublishing content. The Views Bulk Edit module extends VBO and allows you to edit field values (such as the Member Of field, which would change which collection a group of nodes are in). </p> <p>For instance, if you want to move a number of nodes from one collection into another, then you can </p> <ul> <li>select them all in a View such as the Members view of a collection</li> <li>select \"Edit content\" from the Action dropdown, and click \"Apply to selected Items\"</li> <li>under \"SELECT FIELDS TO CHANGE\", select \"Member of\"</li> <li>in the Member Of autocomplete that appears, type the name of the target collection</li> <li>Careful! Under \"Change method\", choose between \"Replace the current value\" and \"Add a new value to the multi-value field\". The first one will wipe out ALL existing collections including the one you're working on - which may be what you're after.</li> <li>Select \"Confirm\" at the bottom of the form to save your changes.</li> </ul> <p>For more information see the video tutorial on Batch Editing.</p>"},{"location":"concepts/collection/#deleting-a-collection","title":"Deleting A Collection","text":"<p>Deleting Collections creates orphans.</p> <p>When you delete a Collection object, it will be deleted from the \"Member of\" field of all its Children. This means that it will not be possible to track down the children after the Collection has been deleted. If you intend to move the children, see above. If you intend to delete the children, this must be done before-hand. This is a known issue.</p> <p>Deleting content creates orphan media.</p> <p>Deleting content (Collections or otherwise) will NOT delete any attached Media. This is a known issue.</p>"},{"location":"concepts/collection/#permissions-on-a-collection","title":"Permissions on a Collection","text":"<p>No reliable access control methods currently allow you to assign people to administer and manage only specific collections.</p>"},{"location":"concepts/derivatives/","title":"Derivatives","text":"<p>Derivatives are files, usually generated automatically from a source file, which may be useful to the repository.  Examples of derivatives include:</p> <ul> <li>smaller or compressed service files</li> <li>thumbnails or poster images for display</li> <li>preservation files in open file formats</li> <li>files containing technical metadata about a file.</li> </ul>"},{"location":"concepts/derivatives/#derivative-models","title":"Derivative Models","text":"<p>There are two schemes you can use for derivatives: </p> <ul> <li>In the standard model, each derivative is a new Media entity linked to the original's parent node. The \"Media Use\" field is used to distinguish the roles that the various files and media have (Thumbnail, Service File, etc.).</li> <li>In the multi-file media model, derivatives are added to additional file fields on the original file's Media entity (see Multi-File Media).</li> </ul>"},{"location":"concepts/derivatives/#derivatives-are-actions-in-drupal","title":"Derivatives are Actions in Drupal","text":"<p>Derivative configuration is stored using Drupal's Actions. This means that all derivative configuration, such as parameters dictating the derivative size and quality can be edited by a repository administrator in the Drupal GUI under Manage &gt; System &gt; Actions.</p> <p>As Actions, they can be executed on nodes manually using Views Bulk Operations. They can also be configured to run automatically on media save thanks to Islandora's additions to the  Drupal [Contexts] module.</p> <p>Derivative actions will replace existing files</p> <p>If a derivative action runs but the target derivative (as identified by its taxonomy term) already exists, the new file will replace the old file (leaving the rest of the Media intact).</p>"},{"location":"concepts/derivatives/#derivatives-can-run-automatically-with-contexts","title":"Derivatives can run automatically with Contexts","text":"<p>With the Contexts module, you can configure derivatives to run under specific conditions.  These are set in the \"Conditions\" section. Islandora provides a number of context conditions including:</p> <ul> <li>entity bundle</li> <li>media mimetype</li> <li>term (attached to a media or node, or a node's parent node)</li> <li>whether a node or media \"is islandora\"</li> </ul> <p>You can set up as many of these as you like, with \"and\" or \"or\" logic between them.</p> <p>In the \"Reactions\" section is where you can set up derivatives. For standard model derivatives, choose the \"Derivatives\" reaction. This lists all actions, including derivative actions. Note that  multifile derivatives won't work here.</p> <p>Multi-file media</p> <p>The multi-file media derivatives can NOT be selected from within the \"Derivatives\" reactions. From the \"Reactions\" pop-up window, you must choose \"Derive file for Existing Media\". This panel lists only Multi-file media-type derivatives.</p>"},{"location":"concepts/derivatives/#derivatives-have-types","title":"Derivatives have Types","text":"<p>When creating a new Derivative Action, there are a number of flavours of derivative \"types\" available. All derivative Actions fall into one of  these types. </p> Derivative type name machine name Supplying module Expected Microservice (software) Generate a Technical metadata derivative <code>generate_fits_derivative</code> Islandora FITS (roblib) Crayfits (FITS) Generate a audio derivative <code>generate_audio_derivative</code> Islandora Audio Homarus (FFmpeg) Generate a video derivative <code>generate_video_derivative</code> Islandora Video Homarus (FFmpeg) Generate an image derivative <code>generate_image_derivative</code> Islandora Image Houdini (ImageMagick) Get OCR from image <code>generate_ocr_derivative</code> Islandora Text Extraction Hypercube (tesseract/pdftotext) <p>Multi-file media</p> <p>The derivatives types available for multi-file media are the  ones marked as \"for Media Attachment\" e.g. \"Generate an Image Derivative for Media Attachment\". </p>"},{"location":"concepts/derivatives/#derivatives-are-created-by-microservices-crayfish","title":"Derivatives are created by microservices (\"Crayfish\")","text":"<p>In Islandora, we generate derivatives using microservices, which are small web applications that do a single task. Each microservice takes the name of a file as well as some parameters. It  runs an executable and returns a transformed file, which can be loaded back into the repository. The microservices  in Islandora stack are:</p> Repository Microservice name executable Crayfish Homarus FFmpeg Crayfish Houdini ImageMagick Crayfish Hypercube tesseract/pdftotext Crayfits Crayfits FITS"},{"location":"concepts/derivatives/#derivatives-are-created-using-an-external-queue","title":"Derivatives are created using an external queue","text":"<p>To send orders to the microservices, Islandora sends messages  to an external queue, from which the microservices process the jobs as they are able.  This is a robust system that can \"operate at scale\", i.e. can large handle batches of uploads without slowing down the repository.</p> <p>The queue system used by Islandora is ActiveMQ, and the listeners are part of \"Alpaca\"</p>"},{"location":"concepts/derivatives/#derivative-swimlane-diagram","title":"Derivative Swimlane Diagram","text":"<p>The following diagram shows the flow of derivative generation from start to finish. A user saves a Media in Drupal, which may trigger Drupal to emit a derivative event to a queue, which is read by Alpaca and sent to a microservice. The microservice gets the original file and makes a transformation, returning the derivative file to Alpaca, which sends it back to Drupal to become a Drupal Media.  </p>"},{"location":"concepts/node-concepts/","title":"Node Concepts","text":"<p>This page describes the core fields and features that Islandora uses to  manage content as nodes in an Islandora repository.</p>"},{"location":"concepts/node-concepts/#nodes-hold-metadata","title":"Nodes hold metadata","text":"<p>In Islandora, Drupal nodes are created to hold descriptive  metadata about content in the repository. This metadata is held in the usual way for nodes, which is by populating Drupal fields. Fields are  configured on a Drupal content types, which serve as metadata profiles.</p>"},{"location":"concepts/node-concepts/#nodes-can-have-memberschildren","title":"Nodes can have members/children","text":"<p>To build the capacity for creating hierarchical structures like collections, books and their pages, and complex objects, Islandora introduces a special field, \"Member of\" (<code>field_member_of</code>) which must be present on all Islandora content types. It enables a \"Children\" tab to display on Islandora nodes which  lists the children of that node, and allows a repository manager to perform bulk operations on them. It also enables a repository manager to create children of nodes directly, individually or in bulk.</p>"},{"location":"concepts/node-concepts/#nodes-have-models","title":"Nodes have models","text":"<p>Within a single content type (i.e. metadata profile), Islandora provides the ability to designate  some objects as different \"types\" than others. Key behaviours, such as what derivatives are created or what viewer is used, can be configured  (see Contexts) based on this value. The available values are taxonomy terms in the Islandora Models vocabulary, and they are attached to nodes via the special  mandatory field, \"Model\" (<code>field_model</code>), which must be present on all Islandora content types. These values are installed through a Drupal Migration after the  Islandora module is installed. All installation methods perform this migration, so out of the box,  the following values should be available in the Islandora Models vocabulary:</p> Name External URI Audio http://purl.org/coar/resource_type/c_18cc Binary http://purl.org/coar/resource_type/c_1843 Collection http://purl.org/dc/dcmitype/Collection Image http://purl.org/coar/resource_type/c_c513 Video http://purl.org/coar/resource_type/c_12ce Digital Document https://schema.org/DigitalDocument Paged Content https://schema.org/Book Page http://id.loc.gov/ontologies/bibframe/part Publication Issue https://schema.org/PublicationIssue Compound Object http://vocab.getty.edu/aat/300242735 Newspaper https://schema.org/Newspaper <p>With Islandora alone, choosing a value from this list will have zero effects. The contingent behaviour must be configured during repository implementation. Islandora Starter Site provides an example of what behaviours are possible for these types. </p> <p>The External URI field</p> <p>This vocabulary, like many others in Islandora, includes an External URI field. This is intended to be used when transforming Islandora content into RDF, but also serves to make it easier to share configuration. Islandora provides code so that context conditions and derivative configs can be created without referencing the taxonomy term by ID, rather, using the taxonomy term's External URI. Since terms IDs are likely to change across sites, this makes our configs more portable. </p>"},{"location":"concepts/node-concepts/#nodes-are-attached-to-media","title":"Nodes are attached to Media","text":"<p>In an Islandora repository, the files in the repository are uploaded as Media, which are linked to the node providing the descriptive metadata. Media belonging to a specific node can be found in the Islandora-provided \"Media\" tab on that node. For more, see the [Media in Islandora] section.</p>"},{"location":"concepts/node-media/","title":"Media in Islandora","text":"<p>In Islandora, Media are created to hold the various files that pertain to the descriptive metadata provided by a Node. Islandora provides some fields and features to make this possible. </p>"},{"location":"concepts/node-media/#media-are-wrappers-for-files","title":"Media are wrappers for files","text":"<p>Drupal Media are said to be wrappers around files, that allow that file to have fields attached. These fields may contain technical metadata about that file, such as its mimetype or size. This is how Islandora uses Media (though our approach to [technical metadata] differs). </p>"},{"location":"concepts/node-media/#media-may-store-files-in-different-locations","title":"Media may store files in different locations.","text":"<p>Configuration on Media types determines where uploaded files will be  stored - for example, the Drupal public or private filesystem, or through a tool called Flysystem to another data store such as Fedora. Islandora does not dictate where you put your files. Islandora Starter Site sets all media types to store their files in Fedora.  This can be overridden when creating media programmatically, such as for  derivatives. </p>"},{"location":"concepts/node-media/#media-belong-to-nodes","title":"Media belong to nodes","text":"<p>While in Drupal, media are said to be \"reusable files\" that can be  referred to by any number of content items, in Islandora there is a special relationship, the \"Media Of\" (<code>media_of</code>) field, that links  media to a single node that describes that file and how it fits into the repository. The field \"Media Of\" must be on all Islandora media types for media of those types to behave as Islandora media. </p> <p>Then, the media \"of\" an Islandora node (if any) will appear in that  node's \"Media\" tab. From this tab, there are also links  to add new Media, individually or in batch. When media are created this way, their \"Media of\" field is automatically populated with the current node. </p>"},{"location":"concepts/node-media/#media-have-different-uses","title":"Media have different uses","text":"<p>In a repository, a node may have several media that belong to it, which represent the originally uploaded file, a smaller service file, a  thumbnail, and perhaps a file transformed into a specific format for preservation. All of these media can be distinguished using the  Islandora-provided field, \"Media Use\" (<code>field_media_use</code>). This is a  taxonomy reference field that points to the vocabulary, Islandora  Media Use.</p> <p>The Islandora module provides, through a migration, the following values:</p> Media Use term External URI Extracted Text http://pcdm.org/use#ExtractedText Intermediate File http://pcdm.org/use#IntermediateFile Original File http://pcdm.org/use#OriginalFile Preservation Master File http://pcdm.org/use#PreservationMasterFile Service File http://pcdm.org/use#ServiceFile Thumbnail Image http://pcdm.org/use#ThumbnailImage Transcript http://pcdm.org/use#Transcript <p>This migration is performed by all installation methods, so these values should be available \"out of the box\". These values were provided by the PCDM data model (see RDF in Islandora), and not all values are associated with behaviours you might expect - for instance,  Islandora is not configured out-of-the box to display a transcript if you add a  Media (file) and tag it as \"Transcript\". See Audio and Video for setting up transcripts.</p> <p>Standard vs Multi-file media model</p> <p>This describes the standard file-media relationship in Islandora.  There is an alternative method of arranging files and their derivatives which we call the \"Multi-file media\" method.</p>"},{"location":"concepts/rdf/","title":"RDF in an Islandora Repository","text":"<p>Islandora was build on the idea that a repository can be represented in Drupal in a way that can be mapped to RDF and present the repository  as Linked Data.</p>"},{"location":"concepts/rdf/#portland-common-data-model","title":"Portland Common Data Model","text":"<p>Islandora uses the Portland Common Data Model (PCDM)  to arrange elements of the repository. Nodes correspond to pcdm:Objects, and Media to pcdm:Files. The \"Member of\" field on nodes allows us to create pcdm:memberOf relationships (the opposite of pcdm:hasMember), and the \"Media of\" field represents pcdm:fileOf relationships (the opposite of pcdm:hasFile). </p> <p></p> <p>PCDM, plus additional metadata mappings, is the organizing model which allows us to create an RDF version  of the repository in Fedora and/or in an RDF triplestore like Blazegraph.</p>"},{"location":"concepts/rdf/#mapping-to-rdf-rdf-module","title":"Mapping to RDF (RDF Module)","text":"<p>In Islandora, the RDF module provides a way to map metadata from  fields into RDF. This provides a mechanism of using configuration  entities (YAML files, as there is no robust UI) to map fields on nodes, media, and taxonomy terms to RDF predicates.</p> <p>Namepspaces in RDF must be registered before they can be used. The  Islandora module registers a number of namespaces and more can be  added using <code>hook_rdf_namespaces()</code>. See RDF Mappings  for more details.</p>"},{"location":"concepts/rdf/#exposure-as-json-ld","title":"Exposure as JSON-LD","text":"<p>Nodes, Media, and taxonomy terms can have their RDF (per their mappings) exposed to the world as RDF formatted in the JSON-LD syntax thanks to the Islandora-built JSON-LD Drupal module. The JSON-LD module converts  the RDF metadata, with some alterations, to a JSON-LD format that can be consumed by RDF consumers such as Fedora and Blazegraph.</p>"},{"location":"concepts/rdf/#syncing-to-fedora-and-blazegraph","title":"Syncing to Fedora and Blazegraph","text":"<p>Islandora provides the pathways for objects and media in the repository to be synced to Fedora and Blazegraph.</p> <p>Objects are sent to Fedora and Blazegraph through an \"Indexing\" Drupal Action, which, after being  put on a queue, is read by an indexer which pushes the JSON-LD information to the appropriate target.</p> <p>Files can be stored in Fedora directly, using the Flysystem module. Whether or not a file is in Fedora, information about that file can be synced (from Drupal Media) into Fedora.</p> <p>Neither Fedora nor Blazegraph are read as part of the standard Islandora configuration.</p>"},{"location":"concepts/starter-site/","title":"Islandora Starter Site","text":"<p>The Islandora Starter Site is an out-of-the-box deployment of Islandora. It is a complete exported Drupal site, that makes use of the Islandora modules and configures them in a way that is illustrative and useful.</p> <ul> <li>For evaluators, it is intended to show off the features and capabilities of Islandora.</li> <li>For interest groups, it is intended to be a place to develop solutions to shared problems.</li> <li>For site builders, it is intended to be a starting point for configuring a site.</li> </ul> <p>The Islandora Starter Site contains no code, only references to other modules and lots of Drupal configuration. A very motivated person could re-create the Starter Site just by installing and configuring modules. This means there's nothing tying you to using the Starter Site. There's also nothing tying you to doing things in a particular way. Also, it means that you won't be getting any \"updates\" - there's no code to update.</p> <p>To experience the full Islandora Starter Site, it requires access to external services such as Solr, Fedora, Alpaca, and Matomo. It is therefore suggested to deploy the Starter Site using one of our  deployment platforms: ISLE-DC (using the <code>make starter</code> or <code>make starter_dev</code> commands), ISLE Site Template, or the Islandora Playbook (using the <code>starter</code> (default) or <code>starter_dev</code> option in the Vagrantfile).</p>"},{"location":"contributing/CONTRIBUTING/","title":"Welcome!","text":"<p>If you are reading this document then you are interested in contributing to Islandora. You do not need to be a programmer to speak up! By joining the Islandora community, you agree to abide by the Islandora Code of Conduct.</p>"},{"location":"contributing/CONTRIBUTING/#join-the-community","title":"Join the community!","text":"<p>Onboarding Form: Submit your information through the Onboarding Form, and we can invite you to all the listed channels below.</p> <ul> <li> <p>Slack: Use this invite link to join our Slack workspace. If you're not sure what channels you're looking for, get started by asking your questions in the #general channel!</p> </li> <li> <p>Google Group: Subscribe to the mailing list by joining the Google Group.</p> </li> <li> <p>Github: Although you can participate without a Github account, having one ensures you can be made a member of the Islandora General Members team to better enable your access to the Islandora project. Additionally, it will allow you to be tagged on relevant issues or pull requests that are of interest to you! To become a part of the Islandora General Members Github team, email community@islandora.ca or use the Onboarding form.</p> </li> </ul>"},{"location":"contributing/CONTRIBUTING/#weekly-open-tech-call","title":"Weekly Open Tech Call","text":"<p>Attend our weekly Zoom meetings on Wednesdays at 1:00 PM EST! You can access these meetings through our Agendas or our Community Calendar. We discuss the past week's Github activity in Issues and Pull Requests, and any other topics that are raised. Anybody is welcome to join the call, and add items to the agenda.</p>"},{"location":"contributing/CONTRIBUTING/#github-issues","title":"Github Issues","text":"<p>Anyone with a Github account can make issues. Please check the applicable places first to see if there's already a ticket. </p> <p>Issues should be added in the individual module or component's repository where applicable. For issues that are broader in scope than one module, or about the official Islandora documentation, open an issue in the Documentation repository. This is also the repository for hundreds of \"legacy\" (but still valid) tickets from before we opened issue queues on individual repositories.</p> <p>Issue templates are provided for the following:</p> <ul> <li>Bug Report: Report something not working in Islandora software.</li> <li>Documentation: Let us know if documentation is unclear, or missing.</li> <li>Feature Request: Start here if you would like to request a specific feature. Note that these should usually be supported by Use Cases.</li> <li>Use Case: Start here if you would like to outline a need with a defined scope to be addressed by Islandora software.</li> </ul> <p>Issues are reviewed during the Weekly Open Tech Call every Wednesday at 1:00 p.m. Eastern. </p>"},{"location":"contributing/CONTRIBUTING/#github-pull-requests","title":"Github Pull Requests","text":"<p>If you have code to address an issue, or can offer documentation, please create a pull request (PR) in the appropriate repository. Before we can merge your pull request, you must have a signed CLA or CCLA (see below). Code PRs must conform to Drupal Coding Standards, and Documentation PRs must conform to our Documentation Style Guide. There are no guides specific to READMEs or other documentation (help text, etc) that lives in Drupal, but please try to write clearly and follow existing practices. See more in our Contributing Workflow.</p>"},{"location":"contributing/CONTRIBUTING/#new-modules","title":"New Modules","text":"<p>If you have code that doesn't fit within the scope of Islandora's existing repositories, but that the Islandora community is in a better position to maintain than you are, please consider using the LSAP Process to contribute your code to the ownership of the Islandora Foundation.</p>"},{"location":"contributing/CONTRIBUTING/#contributor-license-agreements","title":"Contributor License Agreements","text":"<p>Before you set out to contribute code you will need to have completed a Contributor License Agreement or be covered by a Corporate Contributor License Agreement. This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.</p>"},{"location":"contributing/committers/","title":"Islandora Committers","text":"<p>Islandora is open source and released under open-source (usually MIT and GPLv2) licenses. The software, associated documentation, and community is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be self-nominated, or nominated by existing committers, to become a committer. Committers need not be limited to software developers! Contributors with skills in documentation and testing, or who are very active in the community for events and support, can also be committers. </p> <p>Committers are supported in their specific work by having permissions to do things like merge code as well as manage Github, Slack, and the Website. The current list of committers is managed as a group in Github, and can be viewed in the Github repository by existing members. A separate list of committers is publicly available at the bottom of this page. If a committer does not make a contribution in a year (without known mitigating circumstances) they are usually moved out of the committers GitHub group and listed as an Emeritus committer. There are subgroups with specific enhanced access depending on their skills and levels of commitment to the codebase. These are more fully explained in this spreadsheet of keys and permissions. If you have questions about committers, you can send them to the Chair of the TAG committee, or to community@islandora.ca</p>"},{"location":"contributing/committers/#rights","title":"Rights","text":"<p>Committers share the following rights:</p> <ul> <li>Access to key Islandora logins.</li> <li>Permissions in Islandora repositories. </li> <li>Nominating and voting on new committers.</li> </ul>"},{"location":"contributing/committers/#responsibilities","title":"Responsibilities","text":"<ul> <li>Engage productively in the evolution in the community and codebase using your skills and ability.</li> <li>Have a GitHub account and maintain contact information with Islandora Foundation. </li> <li>Guide and mentor new committers</li> <li>Remain active in Islandora and/or communicate if you cannot participate further, or if your commitment level needs to change. </li> <li>Support the community through activity on community channels, including monitoring and responding to mailing list/Slack inquiries.</li> </ul>"},{"location":"contributing/committers/#committers","title":"Committers","text":"<p>The following is an alphabetized list of the current Islandora committers:</p> Name Organization Github username Bryan Brown Florida State University bryjbrown Joe Corall Lehigh University joecorall Jordan Dukart discoverygarden jordandukart Willow Gillingham Born-Digital wgilling Jonathan Hunt Catalyst.Net kayakr Mark Jordan Simon Fraser University mjordan Danny Lamb Born-Digital dannylamb Natkeeran Ledchumykanthan University of Toronto Scarborough natkeeran Rosie Le Faive University of Prince Edward Island rosiel Gavin Morris Born-Digital g7morris Annie Oelschlager Northern Illinois University aOelschlager Alexander O'Neill Born-Digital alxp Don Richards Johns Hopkins University DonRichards Bethany Seeger Johns Hopkins University bseeger Seth Shaw University of Nevada, Las Vegas seth-shaw-unlv Alan Stanley Agile Humanities ajstanley Yamil Suarez Berklee College of Music ysuarez Adam Vessey discoverygarden adam-vessey Jared Whiklo University of Manitoba whikloj"},{"location":"contributing/committers/#emeritus-committers","title":"Emeritus Committers","text":"<p>The following is an alphabetized list of the prior Islandora committers:</p> Name Organization Daniel Aitken discoverygarden Melissa Anez LYRASIS Aaron Coburn Amherst College Jonathan Green LYRASIS Debbie Flitner Arizona State University Diego Pino METRO Nick Ruest York University Eli Zoller Arizona State University"},{"location":"contributing/committers/#how-are-you-evaluated-as-a-potential-committer","title":"How are you evaluated as a potential committer?","text":"<p>When you are nominated, the other committers review these categories before recommending you as a committer. Note that appointment to committers/TAG is governed by the TAG Terms of reference, and appointment to TAG comes with additional rights and responsibilities. If you become a committer and a member of committers/code, you are eligible to serve in TAG. </p>"},{"location":"contributing/committers/#you-are-committed-to-the-islandora-community","title":"You are committed to the Islandora Community","text":"<p>You\u2019ve been making strong and consistent community contributions, you can stick it out through tough issues and have demonstrated a willingness to lend a hand.</p>"},{"location":"contributing/committers/#you-have-skills-and-abilities-suited-to-the-role","title":"You have skills and abilities suited to the role","text":"<p>You demonstrate that you understand the project and community and have skills suited to being a committer. Perhaps you have participated in multiple event planning sessions, you write a lot of documentation, or you chair an effective interest group. If you are a software developer, you\u2019ve written good code. If your patches are easy to apply, this could be you!</p>"},{"location":"contributing/committers/#you-are-a-great-colleague","title":"You are a great colleague","text":"<p>You respond to and deliver criticism well, and do what you say you will do. You participate actively in decision-making processes, keeping the larger good of the Islandora codebase and community in your purview. You have a helpful attitude and respect everybody\u2019s ideas. </p>"},{"location":"contributing/committers/#you-mentor-the-less-experienced","title":"You mentor the less experienced","text":"<p>You\u2019ve demonstrated a willingness to reach out to less experienced community members, and link them to resources they need (maybe you made some of these resources - that\u2019s great!)</p>"},{"location":"contributing/committers/#committers-acting-as-maintainers","title":"Committers acting as Maintainers","text":"<p>If you are maintaining a specific Islandora repository, you commit to the following responsibilities for as long as you act as maintainer: </p> <ul> <li>To oversee contributions to the code, including facilitating the testing and merging of pull requests and the resolution of issues. </li> <li>To ensure the timely resolution of security fixes, including (but not limited to) monitoring  dependabot security alerts.</li> <li>To ensure the documentation is correct and is updated as needed.</li> <li>To ensure appropriate backwards compatibility and to manage releases in accordance with the Islandora versioning approach.</li> </ul> <p>A great maintainer also communicates important changes within the component to the community.</p> <p>As maintainer, you are empowered to:</p> <ul> <li>Merge your own pull requests or those you contributed code to (subject to the usual restrictions of waiting for and addressing feedback, tests passing, etc). Other Committers are still encouraged to create, review, and merge pull requests. This is a special privilege to prevent code from stagnating. You are still responsible for the quality of the code committed and for ensuring that releases are fully tested and do not break backward compatibility.</li> </ul> <p>If these responsibilities are not being performed, and/or you choose to step down as maintainer, the TAG will attempt to find another maintainer. If no maintainer can be found, and the TAG/Committers do not elect to jointly maintain the component, it may be deprecated. </p>"},{"location":"contributing/committers/#process-for-inducting-new-committers","title":"Process for inducting new Committers","text":"<p>Contributors can be self-nominated or be nominated by others. These nominations can go to any committer willing to shepherd the process, or be sent to community@islandora.ca to be forwarded by IF staff. Whoever initiates the process is the sponsor and responsible for either completing the following steps, or delegating them to IF staff. </p> <p>Upon receiving a nomination: </p> <ol> <li>An email is sent by sponsor or designate describing the nomination and calling for a vote to islandora-committers@googlegroups.com. (templates/committerVote.txt).</li> <li>The sponsor or designate closes the vote (templates/closeCommitterVote.txt).</li> <li>The sponsor or designate invites the new committer (templates/committerInvite.txt), if no CLA is on file (templates/committerInviteCLA.txt).</li> </ol> <p>Checklist for a new committer (can be completed by sponsor or designate):</p> <ul> <li>Complete the CLA form. Ensure the entry shows up on our public sheet linked on our Contributer License Agreements wiki page.</li> <li>Add to the Islandora Committer team of the Github Islandora organization.</li> <li>Assign to the appropriate GitHub teams, ensuring updates are reflected in the community wiki documentation. </li> <li>Add to the Committer team of GitHub Islandora-Labs organization.</li> <li>Add to islandora-committers google group.  Announce the new committer (template/committerAnnounce.txt).</li> </ul> <p>For additional information about committers, visit this Islandora community wiki page.</p>"},{"location":"contributing/contributing-workflow/","title":"Contributing Workflow","text":""},{"location":"contributing/contributing-workflow/#terms","title":"Terms","text":"<ul> <li>User: Anyone who uses Islandora whether or not they participate in the community directly.</li> <li>Contributor: Anyone who contributes in any form to Islandora (code, documentation, posts on the lists, etc).</li> <li>Committer: Individuals with merging privileges, and binding votes on procedural, code modification, and release issues, etc. (further outlined here).</li> <li>Community: All of the above.</li> </ul>"},{"location":"contributing/contributing-workflow/#overview","title":"Overview","text":"<p>Choosing how we work together is an important privilege the Islandora community offers to its contributors. Our workflow is built around engagement and consensus to encourage high quality code that is expected to meet defined standards. All contributors are expected to follow the defined workflow. Any contributor can propose changes to the workflow at any time by initiating a conversation on the mailing list. Any proposed changes must be confirmed by the committers by way of an Apache rules vote in order to take effect.</p>"},{"location":"contributing/contributing-workflow/#social-dynamics","title":"Social Dynamics","text":"<p>We operate under the Islandora Community Code of Conduct. Some additional general observations to keep in mind when interacting with others in this workflow:</p> <ul> <li>We are all volunteers<ul> <li>Time/attention of others is a limited resource.</li> <li>You cannot impose on others what to do.</li> <li>You should be motivated to do things by yourself.</li> </ul> </li> <li>Common need is the driving force.<ul> <li>Friendly cooperation is how its done</li> <li>Your contribution should not overstrain others.</li> <li>Your contribution is valuable when others appreciate it.</li> </ul> </li> <li>Islandora is constantly improving<ul> <li>You are expected to make high quality contributions</li> <li>You must be able to adapt to change</li> </ul> </li> </ul>"},{"location":"contributing/contributing-workflow/#workflow","title":"Workflow","text":""},{"location":"contributing/contributing-workflow/#general-guidelines","title":"General Guidelines:","text":"<ul> <li>Identify if a Github issue is needed:<ul> <li>Minor grammar / php warning: no ticket required</li> <li>Feature or Fix beyond the minimal: Github Issue</li> <li>Unsure? Play it safe and make a Github Issue</li> </ul> </li> <li>Prioritizing pull requests:<ul> <li>If there is an urgent need for the pull request to be addressed quickly, indicate the need in the pull request template or a comment.</li> <li>Complexity should also be taken into account when evaluating how quickly to merge a pull request. Changes that affect core modules or make extensive changes should receive more review and testing.</li> </ul> </li> <li>All interested parties should be satisfied before something is merged; no hard numbers. If you know who is likely to be interested, tag them. Tag the creator of the issue if possible. Make a reasonable effort.</li> <li>If a pull request languishes without response when one is needed, tag @Islandora/committers (or @Islandora-Devops/committers if you\u2019re working on install code) with a reminder and/or put the issue on the agenda for the next Islandora Tech Call</li> <li>All contributions to GitHub must be accompanied by either an Individual Contributor License or a Corporate Contributor License covering the contributor.</li> </ul>"},{"location":"contributing/contributing-workflow/#development-workflow","title":"Development Workflow:","text":"<ul> <li>Create a Github Issue if none exists<ul> <li>Assign the issue to yourself or request it to be assigned in a comment on the issue. Be sure to tag @Islandora/committers to bring attention to it.</li> </ul> </li> <li>Perform development on a \u2018feature\u2019 branch. Give your branch a name that describes the issue or feature. Using something like \u2018issue-xxx\u2018 and including the issue number is always a safe bet if you don\u2019t know what to name it.</li> <li>When the code is ready for review, issue a pull request on Github from your feature branch into the development branch (\u20188.x-1.x\u2019 for Drupal modules and \u2018dev\u2019 for everything else)</li> <li>Continuous integration checks need to be satisfied before the code can be merged<ul> <li>Coding standards checks and copy/paste mess detection must be passing before code can be merged.</li> <li>Automated tests are also expected to pass before code can be merged, however at times there can be extenuating circumstances preventing this. For example, sometimes there is a disconnect between running tests locally versus on the continuous integration server. If tests run locally and everyone involved in the pull request is in agreement, the check for automated tests can be ignored. But this isn\u2019t a common occurrence.</li> <li>Code coverage checks are more of a guideline than a strict requirement. A reasonable effort to provide tests for contributed code is expected. However, demanding 100% code coverage for all contributed code is unreasonable. If tests have been provided or updated and everyone involved in the pull request is in agreement, code coverage checks can be ignored.</li> </ul> </li> <li>The code is reviewed and tested by the community, with all feedback and further development performed within the pull request.</li> <li>Once all feedback has been addressed, all applicable status checks have passed, and all interested parties are satisfied, the code can be merged by a committer<ul> <li>Pull requests should sit open for a minimum of 24 hours from the last meaningful commit to allow for any feedback.</li> <li>Meaningful changes (not bugfixes) should come to at least one open tech call meeting before being committed.</li> <li>Pull requests should not be merged by committers who have provided code in the pull request, unless that person is named as a maintainer.</li> <li>Always \u201cSquash and Merge\u201d, please.</li> </ul> </li> <li>Close the Github issue<ul> <li>If you add the keyword \u201cfixes\u201d or \u201cresolves\u201d on the same line when referencing the Github Issue in the PR description, it will auto-close the issue when the PR is merged.</li> <li>Otherwise, make a comment referencing the new commit and close the issue manually.</li> </ul> </li> </ul>"},{"location":"contributing/create-issues/","title":"Create a GitHub Issue","text":""},{"location":"contributing/create-issues/#overview","title":"Overview","text":"<p>The Islandora community uses GitHub issues to track bug reports, requests for improvements, requests for new features, and use cases. Issues are welcome from anyone who works with Islandora.</p> <p>The Islandora issue queue is maintained in the Islandora Documentation repository on GitHub. Issues posted to the queue are reviewed weekly on the Islandora Tech Call. Members of the Islandora community can then respond to posted issues by replying with comments, taking on the assignment to do the work described in the issue, or making pull requests relating to the issue.</p> <p>Video version available</p> <p>The material in this tutorial is presented in our video, Create a GitHub Issue.</p>"},{"location":"contributing/create-issues/#before-you-start","title":"Before you start","text":"<ul> <li>You will need to have an account on GitHub. These are free to register and require only a name and email address.</li> </ul>"},{"location":"contributing/create-issues/#how-to-create-an-issue-in-the-islandora-issue-queue","title":"How to create an issue in the Islandora issue queue","text":"<ol> <li>Go to https://github.com/Islandora/documentation/issues</li> <li>Click on New issue: </li> <li>Select the type of issue you are creating, as this will provide you with a template to describe your issue.  </li> <li> <p>Fill in the information for your issue:</p> <ol> <li>Give your issue a descriptive title following the text that is already provided in the template title, ex. [BUG].</li> <li>Fill in the body of your issue under the Write tab. A template of questions will be provided based on the type of issue selected. Depending on your issue, you may need to: describe a bug you are seeing and how to reproduce it, describe how an existing feature could be improved, describe a new feature and how it should work, or describe documentation that needs to be written or expanded.</li> <li>Use the built-in text editor to help format your issue in Markdown.</li> <li>Use the Preview button to see how your issue will be published and ensure the formatting looks the way you want.</li> <li>Click Submit new issue to add your issue to the queue.</li> <li>Optionally, Add labels to your issue to assign it to available categories, such as \"documentation\" or \"question.\" Click on as may labels as you like. When you click outside of the drop-down list, the selected labels will be applied to your issue.</li> </ol> <p> </p> </li> </ol>"},{"location":"contributing/docs-style-guide/","title":"Documentation Style Guide","text":""},{"location":"contributing/docs-style-guide/#dos","title":"Do's","text":"<ul> <li>Use a GitHub Pull Request to submit documentation.<ul> <li>See the Editing Documentation documentation page for information on creating a Pull Request.</li> </ul> </li> <li>Make it clear if the documentation is based on a particular configuration (such as the Install Profile Demo) or if it applies to any deployment of Islandora.</li> <li> <p>Submit documentation formatted in Markdown format.</p> <ul> <li>Include a top-level heading for the whole page (using <code>#</code>)</li> <li>Please add Markdown headings (<code>#</code> and <code>##</code>) to the content sections.</li> </ul> </li> <li> <p>Use the \"bold/emphasis\" style in Markdown by enclosing text in double asterisks or underscores, <code>**bold text**</code> or <code>__bold text__</code>, for UI elements that users will interact with. For example, a button label for a button that must be pressed should be made bold in Markdown.</p> </li> <li>Use the \"italics\" style in Markdown by enclosing text in single asterisks or underscores, <code>*italic text*</code> or <code>_italic text_</code>, for UI elements that have a label or title if you need to reference them in the documentation. For example, a title of a screen or page that will visit should be made italic in Markdown.</li> <li>Use <code>&gt;&gt;</code> and <code>**bold text**</code> to indicate clicking through nested menu items, and also include the direct path. Example: <pre><code>**Administration** &gt;&gt; **Structure** &gt;&gt; **Views** (/admin/structure/views)\n</code></pre></li> <li>Use <code>-</code> instead of <code>*</code> for bulleted lists. Indent four (4) spaces for nested lists (Github renders nesting in markdown with 2 spaces, but mkdocs needs 4). Example: <pre><code>- I am a list item\n    - And I am a sub-item.\n</code></pre></li> <li>Upload images to the 'assets' folder and reference them from there.<ul> <li>For file naming, use underscores between words and prefix all file names with the page name, e.g. context_display_hints.jpg for the image showing how to set display hints in the context menu.</li> </ul> </li> <li>Use the Admonition syntax to create notes like this (four-space indent required):</li> </ul> <p>Example:</p> <pre><code>!!! note \"Helpful Tip\"\n    I am a helpful tip!\n</code></pre> <p>Result:</p> <p>Helpful Tip</p> <p>I am a helpful tip!</p> <ul> <li>Use our custom <code>islandora</code> type within the Admonition syntax to call attention to areas where Islandora configuration differs from standard Drupal configuration:</li> </ul> <p>Example:</p> <pre><code>!!! islandora \"Lobster trap\"\n    This setting is specific to Islandora and is not standard to Drupal.\n</code></pre> <p>Result:</p> <p>Lobster trap</p> <p>This setting is specific to Islandora and is not standard to Drupal.</p>"},{"location":"contributing/docs-style-guide/#donts","title":"Don'ts","text":"<ul> <li>Do not leave any \"trailing spaces\" at the end of lines of content.</li> <li>Do not use \"curly\" quotes and apostrophes, use only \"straight\" quotes and apostrophes.</li> <li>Do not upload images that are excessively large in file size (remember, these docs are part of the software!)</li> </ul>"},{"location":"contributing/editing-docs/","title":"Editing Documentation","text":""},{"location":"contributing/editing-docs/#overview","title":"Overview","text":"<p>These documentation pages are written and maintained by volunteers from the Islandora community, and new contributions are always welcomed. The documentation that you see here is formatted in the easy-to-use Markdown markup language, which can add formatting such as links, headings, and bolded text. Then the documentation HTML site is built using mkdocs from the Markdown files hosted in the Islandora documentation GitHub repo. This documentation is rebuilt automatically upon changes being committed to GitHub, so you will see changes reflected here within a few minutes of making an edit.</p> <p>The Islandora Documentation Interest Group holds regular meetings on the second Wednesday of each month between 2:00 p.m. - 3:00 p.m. EST to discuss how to improve and expand Islandora's documentation. If you are interested in becoming involved, all are welcome to join! You can view DIG meetings on the Islandora community calendar and add them to your own calendar by clicking the event and selecting \"copy to my calendar\". If you just want to make a contribution to the existing documentation, that process is outlined here.</p>"},{"location":"contributing/editing-docs/#before-you-start","title":"Before you start","text":"<p>To edit documentation in Islandora, you must:</p> <ul> <li>have a GitHub account.<ul> <li>Github accounts are free and only require a valid email address.</li> </ul> </li> <li>have a very basic familiarity with Git terms such as fork, branch, and pull request.</li> <li>optionally, be a member of the Islandora GitHub Organization.<ul> <li>To request an invite, email community@islandora.ca or ask on the Islandora Slack.</li> <li>This is only needed if you want to commit changes directly to the documentation. Non-members may still make pull requests.</li> </ul> </li> <li>be willing to learn Markdown - a good Markdown cheat sheet can help.<ul> <li>for example, you may use Markdown syntax to create links and section headings.</li> </ul> </li> <li>follow the Islandora Documentation Style Guide.</li> <li>have either an individual Contributor License Agreement (CLA) on file with the Islandora Foundation, or work for an organization that has a corporate Contributor License Agreement on file with the Islandora Foundation.<ul> <li>for information on how to fill out and submit a Contributor License Agreement (CLA) for yourself and/or your organization visit the License Agreements section of the \"How to contribute\" documentation page.</li> </ul> </li> <li>by participating in the Islandora Community, you are agreeing to act according to the Islandora Code of Conduct.</li> </ul>"},{"location":"contributing/editing-docs/#how-to-edit-documentation-using-a-web-browser","title":"How to edit documentation using a web browser","text":"<ul> <li>Starting from the page you want to edit on a web browser, look for the pencil icon in the top righthand corner of the page and click on it.</li> </ul> <ul> <li>You will be taken to GitHub. If you are not logged in, you will be prompted to log in or register for an account. If you are logged in, you will be taken to an in-browser editor where you will view the page in Markdown.</li> </ul> <ul> <li>Make your changes directly in the browser editor, then scroll to the bottom to \"commit\" your changes. This is the equivalent of saving.</li> </ul> <p>\u2192 If you are not a member of the Islandora GitHub organization, GitHub will create a new fork of the documentation repository in your GitHub account. From there you can make a pull request to have your changes sent back to the main Islandora documentation repo to be reviewed and accepted.</p> <p>\u2192 If you are a member of the Islandora GitHub organization, you will be able to create a new temporary branch within the main Islandora documentation repo, and then create a pull request by selecting Create a new branch for this commit and start a pull request. Give your branch a brief name starting with your username, with no spaces, indicating what it is for. Then click Commit changes.</p> <p></p> <ul> <li>You will be taken to the pull request template which will prompt you to fill out some basic information about what you have changed, and why. Replace all relevant instances of Replace this text with your own text.</li> <li>You will have the option to tag Interested Parties, or people you would like to review your work, by writing in their GitHub account name after the <code>@</code> symbol. If you don't have anyone specific in mind, you may tag <code>@Islandora/committers</code> to alert all Islandora 8 Committers that there is a new pull request for their review.</li> </ul> <p></p> <ul> <li> <p>When you have completed the template, submit your changes for review by clicking Create pull request.</p> </li> <li> <p>Once your pull request has been made, it will go into the pull request queue and anyone tagged in the request will receive a notification. Any member of the Islandora GitHub organization can review and merge your pull request, committing your changes to the documentation, with a few exceptions:</p> <ul> <li>Your pull request should not be merged by you.</li> <li>Your pull request should not be merged by anyone who contributed to it (i.e, if some one collaborated with you on writing the changes, that person cannot merge those changes).</li> <li>Your pull request should not be merged by anyone who works at the same organization as you.</li> </ul> </li> </ul> <p>Once your changes are committed, these documentation pages will be rebuilt to reflect your changes within a few minutes.</p> <p>For very minor changes</p> <p>For members of the Islandora GitHub organization (i.e., those with write access to the documentation repo): If the change you made was very small, such as a formatting or spelling correction that does not change the semantics of the document, you may push your changes into the documentation immediately by selecting commit directly to the <code>main</code> branch and clicking Commit changes.</p>"},{"location":"contributing/editing-docs/#how-to-edit-documentation-using-git-on-your-computer","title":"How to edit documentation using Git on your computer","text":"<p>Warning</p> <p>These steps are for more advanced users that are familiar with using the Git source control software, which is different from just using the GitHub website with a web browser.</p> <ul> <li>For information on how to submit your Git software based changes see the Contribute code and Create a pull request sections of the \"How to contribute\" page of the Islandora documentation.</li> </ul>"},{"location":"contributing/readme-template/","title":"Readme template","text":"<pre><code># ![Alt text](Mascot Image) Repository Name\n\n[![Minimum PHP Version](link)](link)\n[![Build Status](link)](link)\n[![Contribution Guidelines](http://img.shields.io/badge/CONTRIBUTING-Guidelines-blue.svg)](./CONTRIBUTING.md)\n[![LICENSE](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](./LICENSE)\n[![codecov](link)](link)\n\n## Introduction\n\nA brief introduction and summary of the module.\n\n## Requirements\n\nThis module requires the following modules/libraries:\n\n* [Name](Link)\n* [Name](Link)\n* Any\n* Requirements\n\n## Installation\n\nInstallations instructions.\n\n## Configuration\n\nDescribe path to configuration.\n\nInclude a screenshot of configuration page. When using your choice of screenshot software, resize your browser\nfirst to avoid wide screenshots. Here are a few browser extension examples to take screenshots.\n\n  - [Fireshots](https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg)\n  - [Nimbus](https://chrome.google.com/webstore/detail/nimbus-screenshot-screen/bpconcjcammlapcogcnnelfmaeghhagj)\n\nTo upload the image drag the image into the comment section of an existing Pull Request.\n\nThis will generate the image URL link for you\n  ![Configuration Screenshot](https://user-images.githubusercontent.com/2857697/39014759-e2ef9c1e-43e0-11e8-921c-c2a3234d65d2.jpg)\n\nVideo example on [How to attach an Image in README.md file with Github](https://youtu.be/wVHJtL-y7P0)\n\n## Other Sections As Needed\n\nSections specific to this repo, but not found in all repos, should go here.\n\n## Documentation\n\nFurther documentation for this module is available on the [Islandora documentation site](https://islandora.github.io/documentation/).\n\n## Troubleshooting/Issues\n\nHaving problems or solved a problem? Check out the Islandora google groups for a solution.\n\n- [Islandora Group](https://groups.google.com/forum/?hl=en&amp;fromgroups#!forum/islandora)\n- [Islandora Dev Group](https://groups.google.com/forum/?hl=en&amp;fromgroups#!forum/islandora-dev)\n\n## FAQ\n\nQ. Is this normal?\n\nA. Yes. This is normal. Why ...\n\n## Maintainers/Sponsors\n\nCurrent maintainers:\n\n- [Maintainer Name](https://github.com/maintainer_github)\n- [Another Maintainer](https://github.com/maintainer_github)\n\nThis project has been sponsored by:\n\n- Some really awesome sponsor\n\n## Development\n\nIf you would like to contribute, please get involved by attending our weekly [Tech Call](https://github.com/Islandora/documentation/wiki). We love to hear from you!\n\nIf you would like to contribute code to the project, you need to be covered by an Islandora Foundation [Contributor License Agreement](https://drive.google.com/file/d/1k6eCM5EV-w4I4ErkiGj4NJwvLnXkejyk/view?usp=sharing) or [Corporate Contributor License Agreement](https://drive.google.com/file/d/1-SQYuHWRxvltQYgkFWpYv7nGbvJp1u8h/view?usp=sharing). Please see the [Contributors](https://github.com/Islandora/islandora-community/wiki/Onboarding-Checklist) pages on Islandora.ca for more information.\n\nWe recommend using the [islandora-playbook](https://github.com/Islandora-Devops/islandora-playbook) to get started.  If you want to pull down the submodules for development, don't forget to run git submodule update --init --recursive after cloning.\n\nAlso include any Travis gotcha's here.\n\n## License\n\n[Name](link). GPLv2 for Drupal modules. MIT for other modules.\n</code></pre>"},{"location":"contributing/releasing-islandora/","title":"Releasing Islandora","text":"<p>Islandora is an ecosystem of repositories and follows a Semantic Versioning Approach. This allows the community to remain aligned with Drupal's approach and support more a more modular approach and more frequent releases, as well as better upgrade paths for those using components of the system. In semantic versioning, a version has three elements 'MAJOR.MINOR.PATCH'. This looks something like 2.1.1, or you may see major versions labelled as 2.x.x. To guide repository maintainers, we recommend you increment the:</p> <ul> <li>MAJOR version when you make incompatible API changes,</li> <li>MINOR version when you add functionality in a backwards compatible manner, and</li> <li>PATCH version when you make backwards compatible bug fixes.</li> </ul> <p>Learn more about Islandora's Versioning Policy</p> <p>Note to module maintainers specifying composer requirements: please familiarize yourself with the Next Significant Release Modifiers  so that module dependencies are as permissive as possible. Most often dependency versions should be tagged using the caret (^) so that bug-fixes and minor releases can be pulled in without updating their module\u2019s composer file.</p>"},{"location":"contributing/releasing-islandora/#how-to-release-java-code","title":"How to Release Java Code","text":"<p>You will need Java 8 on your system to release java code.  The rest of the work is handled handled by Gradle, which is included in the Git repositories. If you cannot get Java 8, you can still release Syn using Docker and the <code>openjdk:8-jdk</code> image.  For Alpaca, because of our use of keys, Java 8 is required.</p>"},{"location":"contributing/releasing-islandora/#release-syn","title":"Release Syn","text":"<p>To release Syn</p> <ol> <li>Drop the <code>-SNAPSHOT</code> from <code>projectVersion</code> in <code>build.gradle</code></li> <li>Build Syn<ol> <li>If you have Java 8, this can be done with <code>$ ./gradlew build shadowJar</code></li> <li>If you don't have Java 8, you can do this with Docker <code>$ docker run --rm -v /path/to/Syn:/opt/Syn openjdk:8-jdk bash -lc 'cd /opt/Syn &amp;&amp; ./gradlew build shadowJar'</code></li> </ol> </li> <li>Push this to Github and slice a new version<ol> <li>Note that this repository prepends a <code>v</code> to the release tag (i.e. use <code>vX.X.X</code> instead of just <code>X.X.X</code>)</li> </ol> </li> <li>Upload both artifacts to the release in Github.  These are located in <code>/path/to/Syn/build/libs</code>.  You want both <code>islandora-syn-X.X.X.jar</code> and <code>islandora-syn-X.X.X-all.jar</code>.</li> <li>Bump the <code>projectVersion</code> in <code>build.gradle</code> and add <code>-SNAPSHOT</code> to the end again.</li> <li>Push this to Github with a commit message of \"Preparing for next development iteration\"</li> </ol>"},{"location":"contributing/releasing-islandora/#release-alpaca","title":"Release Alpaca","text":"<p>To make sure the release goes smoothly, you should ensure that:</p> <ul> <li>You have an account with commit access for Alpaca on GitHub. As a committer, you should already have this level of access.</li> <li>You have an oss.sonatype.org account and have requested to be given permission to publish to the ca.islandora groupId by adding a comment to the Islandora Sonatype Hosting Ticket</li> <li>Ensure you have a trusted code signing key; create if you haven't before and add it to the contributor keys list below</li> <li>Your gradle settings file (<code>~/.gradle/gradle.properties</code>) exists and includes the following: <pre><code>ossrhUsername = jiraname\nossrhPassword = jirapass\nsigning.keyId = pubkeyid\nsigning.password = keypassphrase\nsigning.secretKeyRingFile = /your/home/.gnupg/secring.gpg\n</code></pre></li> <li>Your <code>git</code> is configured (locally or globally) to cache github credentials for https or use ssh</li> </ul> <p>Note: As of GPG 2.1 <code>secring.gpg</code> has been removed so you need to export secret keys to create the secret key ring. <pre><code>gpg --export-secret-keys -o secring.gpg\n</code></pre></p>"},{"location":"contributing/releasing-islandora/#steps","title":"Steps:","text":"<p>The following assumes you are using ssh (e.g. git@github.com for authentication).</p> <p>It will also work for https if you properly cache your github credentials. The credentials must be cached and valid because Gradle will not prompt you for them.</p>"},{"location":"contributing/releasing-islandora/#release-artifacts-to-sonatype-and-github","title":"Release artifacts to Sonatype and Github","text":"<p>You need to merge the latest code into the master branch and use Gradle to release. You can do this by running</p> <ul> <li><code>git clone git@github.com:Islandora-CLAW/Alpaca.git</code></li> <li><code>cd Alpaca</code></li> <li><code>git checkout master</code></li> <li><code>git pull origin dev</code></li> <li><code>./gradlew release</code></li> </ul> <p>The script will start but then will ask you to confirm the version to release as. <pre><code>??&gt; This release version: [0.3.1]  (WAITING FOR INPUT BELOW)\n&lt;-------------&gt; 0% EXECUTING [13s]\n&gt; :release\n&gt; :alpaca-release:confirmReleaseVersion\n</code></pre> You then type in the version (ie. <code>0.4.0</code>) or nothing to use the suggested version (<code>0.3.1</code> in this example) and hit <code>ENTER</code>.</p> <p>The gradle release task will take care of dropping -SNAPSHOT from the version, uploading artifacts to Maven central for staging, tagging and pushing a release to github, and bumping <code>master</code> of the Alpaca repository up by a point release for the next development iteration.</p>"},{"location":"contributing/releasing-islandora/#documentation","title":"Documentation.","text":"<p>The release process will also generate documentation at <code>./docs/&lt;new-version&gt;</code>. This will need to be added to the git repository and pushed to the master branch:</p> <ul> <li><code>git add docs/&lt;new-version&gt;</code></li> <li><code>git commit -m \"Add documentation for &lt;new-version&gt;\"</code></li> <li><code>git push origin</code></li> </ul>"},{"location":"contributing/releasing-islandora/#release-from-sonatype","title":"Release from Sonatype","text":""},{"location":"contributing/releasing-islandora/#point-of-no-return","title":"Point of no return","text":"<p>\u26a0\ufe0f  The following steps, once completed are final.  They cannot be undone, revoked or altered.  Only proceed if you've completed all the above steps and are absolutely certain the release is ready for publication.</p> <ul> <li>Login to https://oss.sonatype.org</li> <li>Click on Staging Repositories on the left hand side under Build Promotion</li> <li>On the far left hand side search box enter 'islandora'</li> <li>Locate the artifacts you want to release and click on them</li> <li>Click Close, then Refresh, then Release</li> </ul>"},{"location":"contributing/releasing-islandora/#contributor-keys","title":"Contributor Keys","text":"Name Organization Address Code Signing Key Fingerprint Key Id Danny Lamb Born-Digital hello at born-digital.com 2D609DB0380A7637A6B72B328D7E7725D47A05FA D47A05FA Jared Whiklo University of Manitoba jwhiklo at gmail.com 9F45FC2BE09F4D70DA0C7A5CA51C36E8D4F78790 D4F78790 Nick Ruest York University ruestn at yorku.ca 159493E15691C84D615B7D1B417FAF1A0E1080CD 0E1080CD Seth Shaw University of Nevada, Las Vegas seth.shaw at unlv.edu 2FF65B22AFA7B2A57F054F89D160AA658DAE385F D160AA658DAE385F"},{"location":"contributing/releasing-islandora/#jsonld","title":"JSONLD","text":"<p>Release the <code>jsonld</code> module by creating a new release for it in Github and on Drupal.org.</p>"},{"location":"contributing/releasing-islandora/#release-openseadragon","title":"Release OpenSeadragon","text":"<p>Release the <code>openseadragon</code> module by creating a new release for it in Github and on Drupal.org.</p>"},{"location":"contributing/releasing-islandora/#release-islandora-mirador","title":"Release Islandora Mirador","text":"<p>Release the <code>islandora_mirador</code> module by creating a new release for it in Github and on Drupal.org.</p>"},{"location":"contributing/releasing-islandora/#release-migrate_islandora_csv","title":"Release migrate_islandora_csv","text":"<p>Release the <code>migrate_islandora_csv</code> module by creating a new release for it in Github. This module  is minimally maintained on Drupal.org and if you are updating it, consider editing that.</p>"},{"location":"contributing/releasing-islandora/#release-chullo","title":"Release Chullo","text":"<p>Release <code>chullo</code> by creating a new release for it in Github.</p>"},{"location":"contributing/releasing-islandora/#release-crayfish-commons","title":"Release Crayfish-Commons","text":"<p>Crayfish commons depends on the <code>chullo</code> library, and must have its dependencies updated before release.</p> <ol> <li>Bump the dependency on <code>islandora/chullo</code> from <code>dev-dev</code> to the release you just made in the previous step.</li> <li><code>composer update -W</code></li> <li>Commit and push the <code>composer.json</code> and <code>composer.lock</code> files to Github.</li> <li>Release <code>crayfish-commons</code> by creating a new release in Github</li> <li>Put the dependency on <code>islandora/chullo</code> back to <code>dev-dev</code></li> <li><code>composer update -W</code> again</li> <li>Commit and push the <code>composer.json</code> and <code>composer.lock</code> files to Github with a commit message of \"Preparing for next development iteration\".</li> </ol>"},{"location":"contributing/releasing-islandora/#release-crayfish","title":"Release Crayfish","text":"<p>Crayfish depends on the <code>crayfish-commons</code> library, and must have its dependencies updated before release.</p> <ol> <li>Bump the dependency on <code>islandora/crayfish-commons</code> in each <code>composer.json</code> for each microservice except for Houdini. Houdini needs the <code>dev-symfony-flex</code> branch of Crayfish Commons, so just leave that dependency alone for now.</li> <li>Run <code>composer update -W</code> on each microservice. I did this with a little bash-fu: <code>for D in */; do (cd $D; composer update -W) done</code></li> <li>Commit and push the <code>composer.json</code> and <code>composer.lock</code> files to Github.</li> <li>Release the microservices by creating a new release for them in Github.</li> <li>Put the dependencies on <code>islandora/crayfish-commons</code> back to <code>dev-dev</code> except for Houdini.</li> <li>Run <code>composer update -W</code> on each microservice again. <code>for D in */; do (cd $D; composer update -W) done</code> makes this easy.</li> <li>Commit and push the <code>composer.json</code> and <code>composer.lock</code> files to Github with a commit message of \"Preparing for next development iteration\".</li> </ol>"},{"location":"contributing/releasing-islandora/#release-controlled-access-terms","title":"Release Controlled Access Terms","text":"<p>Release controlled_access_terms by creating a new release for it in Github and on Drupal.org.</p>"},{"location":"contributing/releasing-islandora/#release-islandora","title":"Release Islandora","text":"<p>Release islandora by creating a new release for it in Github and on Drupal.org.</p>"},{"location":"contributing/releasing-islandora/#undoing-a-release","title":"Undoing a Release","text":"<p>Dependencies mean that if you are going to release all of the Islandora ecosystem, order is very important. At any point, releases can be deleted, updated, and redone in Github. You can reach out to the community if you have questions. Note that if you want to 'redo' a release, you can follow these steps:</p> <ol> <li>Delete the release in Github through their UI</li> <li>Delete the tag in Git both locally and remotely: <code>git tag -d TAG_NAME; git push --delete origin TAG_NAME</code></li> <li>Begin Releasing again.</li> </ol> <p>You cannot follow these steps when publishing to Sonatype with Alpaca, but this should rarely be an issue. Instead, increment the version number and tag a new release.</p> <p>Learn more about Islandora's Versioning Policy</p>"},{"location":"contributing/sandbox/","title":"Updating the Sandbox","text":"<p>Note</p> <p>This page is about the online sandbox, https://sandbox.islandora.ca. If you are looking to set up your own site, see the Installation section.</p> <p>The sandbox at https://sandbox.islandora.ca is built, configured, and deployed, by the https://github.com/Islandora-Devops/sandbox repository. This build process happens nightly from the Sandbox's latest release.</p>"},{"location":"contributing/sandbox/#maintaining-the-front-end-site","title":"Maintaining the front-end site","text":"<p>The Sandbox makes use of the following components, which are version-locked in the <code>drupal/Dockerfile</code> file:</p> <ul> <li>Islandora Workbench</li> <li>Islandora Demo Objects</li> <li>Islandora Starter Site</li> </ul> <p>In order to update them, you need to update the desired <code>XXX_COMMIT</code> hash; compute and add a sha-256 checksum; and then cut a release of the Sandbox repository. It will be deployed to the production site overnight. See full instructions at the Sandbox README.</p> <p>Note that some of these components will need to be updated together, for example a new column in the Demo Objects may require a new field in the Starter Site. </p>"},{"location":"contributing/sandbox/#maintaining-the-back-end-containers","title":"Maintaining the back-end containers","text":"<p>The containers used in the Sandbox are specified by the <code>ISLANDORA_TAG</code> value in the <code>.env</code> file. </p>"},{"location":"contributing/testing-a-pull-request/","title":"Testing a Pull Request (i.e. Running Custom Code)","text":"<p>If you are testing a pull request, or for other reasons need to replace the \"official\" code with code that's in a PR, or a different branch or fork, this page offers three methods: using Composer Patches, using Composer to require the branch and/or fork, or installing source repositories with Composer.</p> <p>This documentation applies to Drupal modules, themes, and recipes, or any other project that is managed by Composer.</p> <p>Can't I just <code>git clone</code>?</p> <p>When managing a non-developmental site with Composer, it's very fragile to use commands like <code>git clone</code> to obtain code, as it can be overwritten by a <code>composer update</code>.</p> <p>For those who are comfortable cloning code onto a development environment, refer to Installing Git repositories with Composer.</p>"},{"location":"contributing/testing-a-pull-request/#applying-a-patch-using-composer-patches","title":"Applying a Patch using Composer Patches","text":"<p>This method is best for testing pull requests, because it's very easy to get a patch from a pull request. If the desired code is not the subject of a PR, you can still use this method but must generate a <code>.patch</code> file yourself. You may wish to use the fork or branch method, as it is more dynamic.</p> <p>Run the following commands from within your site's root folder. They will update your <code>composer.json</code> file.</p> <pre><code># Enable Composer Patches\ncomposer config allow-plugins.cweagans/composer-patches true\ncomposer require cweagans/composer-patches\n</code></pre> <p>For the next step, prepare the following replacement tokens:</p> <ul> <li><code>MY_PACKAGE</code>: The full Composer name of the package to patch. It   takes the form [vendor name]/[project name]. Example:   <code>drupal/controlled_access_terms</code></li> <li><code>MY_ISSUE_TITLE</code>: A descriptive way to identify what the patch is for.   Best practice is to include a link to the related issue -   especially if you're going to keep this patch around for a while.   Example: <code>Updated config format https://github.com/Islandora/controlled_access_terms/issues/117</code></li> <li><code>MY_PATCH_LOCATION</code>: Where to access the patch. See below.</li> </ul> <p>To get the URL of a patch for a PR, go to the PR's main URL, and append <code>.patch</code> to the URL. Make sure that your URL ends with <code>pull/XX.patch</code> and not <code>pull/XX/files.patch</code> - the latter will not work.</p> <p>If you don't have a PR, you could create a patch using <code>diff</code>. However, this patch will be static and will need to be updated manually if your code changes. You can put patches in a folder in your root directory such as <code>[COMPOSER_ROOT]/assets/</code> and then the patch location would be <code>assets/my_patch_name.patch</code>.</p> <p>This one-liner, with the substitutions above, will add the patch to your <code>composer.json</code>:</p> <pre><code># Add patch to composer.json\ncomposer config extra.patches --merge --json '{\"MY_PACKAGE\": {\"MY_ISSUE_TITLE\": \"MY_PATCH_LOCATION\"}}'\n</code></pre> <p>Or you could manually edit <code>composer.json</code> so it contains the following (<code>...</code> denotes omitted content): <pre><code>{\n...\nextra: {\n...   patches: {\n\"MY_PACKAGE\": {\n\"MY_ISSUE_TITLE\": \"MY_PATCH_LOCATION\"\n}\n}\n}\n}\n</code></pre></p> <p>Then, update your package (recall e.g. <code>drupal/controlled_access_terms</code>) using Composer:</p> <pre><code>composer update MY_PACKAGE\n</code></pre> <p>The patch should apply, and then you will be running a patched version! If you're using a dynamic patch, then running <code>composer update</code> again should pull in changes to the code.</p>"},{"location":"contributing/testing-a-pull-request/#using-composer-to-require-a-fork-or-branch","title":"Using Composer to require a fork or branch","text":"<p>This method is best if you don't have a pull request open for the code.</p>"},{"location":"contributing/testing-a-pull-request/#step-1-add-a-repository-if-necessary","title":"Step 1: Add a repository (if necessary)","text":"<p>If your code is on a fork, then you will need to add a repository to Composer so that it knows where to get your package.</p> <p>If the code that you want to test is a different branch/tag on the same repository that you're currently getting your code from, then you do not need to add a repository.</p> <p>Prepare the following replacement tokens before adding a repository:</p> <ul> <li><code>REPO_NAME</code>: a name for this repository (mandatory if using the composer   one-liner), e.g. <code>rosiel-islandora</code></li> <li><code>REPO_URL</code>: the URL to the repository, e.g. <code>https://github.com/rosiel/islandora</code></li> </ul> <p><pre><code># Add custom repo\ncomposer config repo.REPO_NAME vcs REPO_URL\n</code></pre> Your <code>composer.json</code> file should now contain</p> <pre><code>{\n...\n\"repositories\": {\n...\n\"REPO_NAME\": {\n\"type\": \"vcs\",\n\"url\": \"REPO_URL\"\n}\n}\n}\n</code></pre> <p>Order of precedence of repositories</p> <p>If you have a matching version spec (e.g. branch name) that's available from multiple repositories, e.g. both islandora's Gitlab and your personal fork both have an <code>enable-hocr</code> branch, then the repository that's first in the list in composer.json will take precedence.</p>"},{"location":"contributing/testing-a-pull-request/#step-2-require-the-custom-branch","title":"Step 2: Require the custom branch","text":"<p>This step could be as simple as <pre><code>composer require MY_PACKAGE:dev-MY_BRANCH_NAME\n</code></pre></p> <p>with the following replacements:</p> <ul> <li><code>MY_PACKAGE</code>: the full Composer name of the package. Example: <code>drupal/islandora</code></li> <li><code>MY_BRANCH_NAME</code>: the name of the branch you want to run. Example:   <code>testing-fedora-6</code>. Note that in the case that your branch name is   \"version-like\" for example <code>2.x</code>, then the <code>dev</code> goes at the end, as in   <code>2.x-dev</code>, instead of preceding the branch name as in the template above.</li> </ul> <p>However, if your component is a dependency of another component, then you will probably need to use an alias. This allows your custom code to \"act as\" a version that will meet the requirements of your other component. For example, if the <code>drupal/islandora_mirador</code> package requires <code>drupal/islandora:^2.4.1</code>, then using Composer to require the <code>enable-hocr</code> branch of <code>drupal/islandora</code> will not meet the requirements. Instead, use <code>as</code> to provide an alias, to a version that will match the constraints. Note the quotes around the package name and version spec. This takes the form:</p> <p><pre><code>composer require \"MY_PACKAGE:dev-MY_BRANCH_NAME as ALIAS\"\n</code></pre> For example: <pre><code>composer require \"drupal/islandora:dev-enable-hocr as 2.12.1\"\n</code></pre></p> <p>That will install the specified branch and allow it to work with your dependencies.</p>"},{"location":"contributing/testing-a-pull-request/#installing-git-repositories-with-composer","title":"Installing Git repositories with Composer","text":"<p>This method pulls the source (i.e. Git) repositories directly into your project and will allow you to pull in open pull requests by simply following a normal Git workflow.</p> <p>Note</p> <p>If the site has already been installed without using <code>--prefer-source</code> you will need to clear Composer's cache via <code>composer clearcache</code> or including <code>--no-cache</code> for any <code>install</code> or <code>reinstall</code> commands (as below).</p>"},{"location":"contributing/testing-a-pull-request/#step-1-re-install-the-code-from-source-if-required","title":"Step 1: Re-install the code from source (if required)","text":"<p>Assuming that the environment has not been installed with <code>--prefer-source</code>, reinstall the package.</p> <p><pre><code>composer reinstall MY_PACKAGE --prefer-source\n</code></pre> with the following replacements:</p> <ul> <li><code>MY_PACKAGE</code>: the full Composer name of the package. Example:   <code>drupal/islandora</code></li> </ul> <p>This will pull the code from the source repository (i.e. including the <code>.git</code> files) and add the package code at the same version of the <code>MY_PACKAGE</code> that was previously installed and is in the lock file.</p> <p>For example: <pre><code>composer reinstall \"drupal/islandora\" --prefer-source --no-cache\n</code></pre></p>"},{"location":"contributing/testing-a-pull-request/#step-2-pull-the-code-from-the-pull-request-to-review","title":"Step 2: Pull the code from the pull request to review.","text":"<p>Follow Github's documentation to pull the code from the pull request to review.</p> <p>Now you can test your specified code, as well as edit the code and create commits. Note that if you're doing this in a throwaway environment such as a VM or a Docker Container, you will need to configure authentication (e.g. install an SSH key with Github) before you can push your commits.</p>"},{"location":"contributing/testing-a-pull-request/#to-reset-these-changes","title":"To reset these changes","text":""},{"location":"contributing/testing-a-pull-request/#using-composer-patches","title":"... using Composer Patches","text":"<p>When you no longer need to be applying the patch, simply remove it from the <code>patches:</code> section of <code>composer.json</code> (and of course, take care to ensure the json remains valid, by adjusting commas!) and run <code>composer update MY_PACKAGE</code>.</p>"},{"location":"contributing/testing-a-pull-request/#using-composer-require","title":"... using Composer require","text":"<p>When you no longer want to pull from a separate branch or fork, reset the version constraint back to what it used to be, or, if your package was not originally in <code>composer.json</code> (because it is required as a dependency by another package), you can delete the requirement from your <code>composer.json</code>. Then run <code>composer update MY_PACKAGE</code>. If you added a repository, it's safest to delete the repository, as it could lead to you getting stale branches from a fork rather than the desired active code from the canonical repository.</p>"},{"location":"contributing/testing-a-pull-request/#using-source-repositories","title":"... using source repositories","text":"<p>When you no longer want the custom code present simply reset the branch back to the default branch or tag.</p> <p>More great information is available in the Composer Documentation.</p>"},{"location":"installation/component-overview/","title":"Component Overview","text":"<p>A functioning Islandora Stack is made up of dozens of components working in synchronization with each other to store information in your repository, manage that information, and disseminate it intelligently to users. Whether running an installation using the provided Ansible playbook or installing the stack manually, it may be helpful to have a brief overview of all the components we're going to need, in the order we're going to install them, as well as a brief introduction to each component's installation and configuration process.</p> <p>This list includes four different kinds of components:</p> <ul> <li>Components which are hard-required (such as Drupal and the Islandora module)</li> <li>Components for which defaults are provided but which can be swapped out (such as the software managing databases, or the repository's storage system)</li> <li>Components that can't easily be swapped out but are not necessarily required (such as using Solr as the site's internal search engine)</li> <li>Components which do not have official alternatives and are not necessarily required, but will likely exist on the vast majority of Islandora installations (such as Alpaca and Crayfish)</li> </ul>"},{"location":"installation/component-overview/#the-webserver-stack-apache-php-and-mysqlpostgresql","title":"The Webserver Stack - Apache, PHP, and MySQL/PostgreSQL","text":"<p>Combined together, Apache, PHP, and MySQL/PostgreSQL comprise a LAMP or LAPP server used to provide end-user-facing components - namely, the website.</p> <p>Apache is the webserver that will serve up webpages to the public. It will also manage some internal functionality provided by Crayfish, and will expose Cantaloupe to the public. We\u2019ll be making changes to the VirtualHost entry, enabling some modules, and modifying the ports configuration. The VirtualHost entry will eventually be modified when we need to expose other services like Cantaloupe to the public.</p> <p>PHP is the runtime interpreter for all the code Drupal and Crayfish need to be processed. By default, installing PHP 7.2 will give us a command-line interpreter, as well as an interpreter for Apache. We\u2019re going to install several PHP modules required and/or useful for the components that make use of PHP.</p> <p>MySQL and PostgreSQL are database management systems that we will use to store information for many different components like Drupal and Fedora. By default, the Ansible playbook installs MySQL, though this can be switched to PostgreSQL. The manual installation guide recommends and walks through installing and using PostgreSQL.</p>"},{"location":"installation/component-overview/#the-front-facing-cdm-composer-drush-and-drupal","title":"The Front-Facing CDM - Composer, Drush, and Drupal","text":"<p>Composer will be used to install both Drupal and Drush simultaneously using Islandora's fork of the drupal-project repository.</p> <p>Composer is an installer and dependency manager for PHP projects. We're going to need it to install components for any PHP code we need to make use of, including Drupal and Crayfish.</p> <p>Drush and Drupal are installed simultaneously using drupal-project. Drupal will serve up webpages and manage Islandora content, and Drush will help us get some things done from the command-line.</p>"},{"location":"installation/component-overview/#the-web-application-server-tomcat-and-cantaloupe","title":"The Web Application Server - Tomcat and Cantaloupe","text":"<p>Several applets will be deployed via their <code>.war</code> files into Tomcat, including Fedora and Cantaloupe.</p> <p>Tomcat serves up webpages and other kinds of content much like Apache, but is specifically designed to deploy Java applications as opposed to running PHP code.</p> <p>Cantaloupe is an image tileserver that Islandora will connect to and use to serve up extremely large images in a way that doesn't have an adverse effect on the overall system.</p>"},{"location":"installation/component-overview/#the-back-end-file-management-repository-fedora-syn-and-blazegraph","title":"The Back-End File Management Repository - Fedora, Syn, and Blazegraph","text":"<p>Fedora will be installed in its own section, rather than as part of the Tomcat installation, as the installation process is rather involved and requires some authorization pieces to be set up in order to connect them back to Drupal and other components.</p> <p>Fedora is the default backend repository that Islandora content will be synchronized with and stored in. A great deal of configuration will be required to get it up and running, including ensuring a database is created and accessible.</p> <p>Syn is the authorization piece that allows Fedora to connect to other components.</p> <p>Blazegraph will store representative graph data about the repository that can be queried using SPARQL. Some configuration will also be required to link it back to Fedora, as well as to ensure it is being properly indexed.</p>"},{"location":"installation/component-overview/#the-search-engine-solr-and-search_api_solr","title":"The Search Engine - Solr and search_api_solr","text":"<p>The installation of Solr itself is rather straightforward, but a configuration will have to be generated and applied from the Drupal side.</p> <p>Solr will be installed as a standalone application. Nothing of particular importance needs to happen here; the configuration will be applied when <code>search_api_solr</code> is installed.</p> <p>search_api_solr is the Drupal module that implements the Solr API for Drupal-side searches. After installing and configuring the module, the <code>drush solr-gsc</code> command will be used to generate Solr configs, and these configs will be moved to the Solr configuration location.</p>"},{"location":"installation/component-overview/#the-asynchronous-background-services-crayfish","title":"The Asynchronous Background Services - Crayfish","text":"<p>Crayfish is a series of microservices that perform different asynchronous tasks kicked off by Islandora. It contains a series of submodules that will be installed via Composer. Later, these configured components will be connected to Alpaca.</p>"},{"location":"installation/component-overview/#the-broker-connecting-everything-karaf-and-alpaca","title":"The Broker Connecting Everything - Karaf and Alpaca","text":"<p>Karaf\u2019s job is similar to Tomcat, except where Tomcat is a web-accessible endpoint for Java applets, Karaf is simply meant to be a container for system-level applets to communicate via its OSGI. Alpaca is one such applet; it will broker messages between Fedora and Drupal, and between Drupal and various derivative generation applications.</p> <p>Alpaca contains Karaf services to manage moving information between Islandora, Fedora, and Blazegraph as well as kicking off derivative services in Crayfish. These will be configured to broker between Drupal and Fedora using an ActiveMQ queue.</p>"},{"location":"installation/component-overview/#finalized-drupal-configurations","title":"Finalized Drupal Configurations","text":"<p>Drupal configuration exists as a series of .yaml files that can either be created in a feature, or exported from Drupal using the <code>content_sync</code> module. It can also be manually entered in via the UI. We're going to place configuration in a few different ways; Some content will be synchronized onto the site, and some core configurations from the main Islandora module will need to be run in order to facilitate ingest.</p>"},{"location":"installation/install-a-demo/","title":"Portainer Docker Demo","text":"<p>To test out Islandora, there is a Starter-Site based Portainer demo available (Download the .zip file). This demo is loaded with sample content to demonstrate features of Islandora and provide a starting point for exploration. Follow the instructions in the README.md.html file provided in the download.</p> <p>It is recommended that you have a minimum of 4GB of hard drive space available on your machine before getting started. It will take some time to build the image, do not be surprised if it takes a long time. Thanks, and happy building!  </p>"},{"location":"installation/install-a-demo/#installation-video-tutorial","title":"Installation Video Tutorial","text":"<p>The README.md.html is the most up to date version of the installation documentation, but you can also view this video: How to Install Docker Desktop and Set up Starter Site (video tutorial).</p>"},{"location":"installation/install-a-demo/#troubleshooting","title":"Troubleshooting","text":"<p>These troubleshooting issues and solutions for Docker Desktop have arised from and been used with Windows 10.</p>"},{"location":"installation/install-a-demo/#docker-failed-to-start-error-message","title":"\"Docker Failed to Start\" Error Message","text":"<p>For Windows 10, you may receive the \"Docker Failed to Start\" Error message. To resolve this:</p> <ul> <li>Download WSL 2 from Step 4 in these instructions, but do not do any other steps in these instructions.</li> <li>Under Windows \u2018Firewall &amp; Network Protection\u2019, \u2018Allow an app through the firewall\u2019, and \u2018Change settings\u2019 to select the \u2018Private\u2019 box for \u2018Virtual Machine Monitoring\u2019.</li> <li>Restart computer for all changes to take effect.</li> </ul>"},{"location":"installation/install-a-demo/#no-content-showing-on-islandoraio","title":"No Content Showing on islandora.io","text":"<p>If no content is showing up in your local installation when on islandora.io in a browser, you may need to wait longer for the deployment process to complete. 1. Go to \u2018containers\u2019, click the \u2018logs\u2019 for \u2018sandbox-drupal-1\u2019 to see the deployment process. When completed you will see:  <pre><code>#####################\n# Install Completed #\n#####################\n</code></pre> * This can take anywhere from 5 minutes to over an hour.</p>"},{"location":"installation/install-a-demo/#docker-desktop-and-virtual-machine-vmmem-in-task-manager-taking-up-too-much-cpu-and-ram","title":"Docker Desktop and Virtual Machine (Vmmem in Task Manager) Taking up too much CPU and RAM","text":"<p>If Docker Desktop and Virtual Machine (Vmmem in Task Manager) are taking up too much CPU and RAM, you can create a .wslconfig file to limit how much of your computers resources are allocated to these processes: 1. Open Notepad++ and type the following: <pre><code>[wsl2]\nmemory=4GB\nprocessors=2\n</code></pre> 2. Modify the numbers to reflect how much you want to allocate to Docker Desktop (i.e. if you only have 4GB of RAM then allocate 2GB).      * Save As and select \u2018All File Types\u2019 from the dropdown.      * Name the file x.wslconfig and save it.      * Go to the location of the saved file and rename it, removing the \u2018x\u2019.      * The file should look like this:  3. Put the .wslconfig file in the appropriate location.     * In your File Explorer address bar type \u2018%UserProfile% and hit enter.     * Move the .wslconfig file to this folder. 4. Restart your computer and start up Docker Desktop. It will now be using only the specified memory and processors.</p>"},{"location":"installation/playbook/","title":"Islandora Playbook","text":"<p>The Islandora Playbook (Islandora-Devops/islandora-playbook) is a tool for installing the Islandora stack on a single virtual machine. It can be used both as a Vagrant project to create a local development environment, or as an Ansible playbook to provision a local or remote server. It can set up a Drupal based either on Islandora Starter Site, or your own custom site configs.</p>"},{"location":"installation/playbook/#basic-usage-vagrant","title":"Basic Usage (Vagrant):","text":"<p>Install requirements (below), then: <pre><code>$ git clone -b dev https://github.com/Islandora-Devops/islandora-playbook\n$ cd islandora-playbook\n</code></pre> First, create the islandora base box: <pre><code>$ ISLANDORA_BUILD_BASE=true vagrant up\n$ vagrant package --output islandora_base\n$ vagrant destroy\n</code></pre> Second, build a VM using the islandora base box: <pre><code>$ vagrant up\n</code></pre></p> <p>When used this way, you can trash your working site and get a fresh Islandora relatively quickly, with <code>vagrant destroy</code> (you will be asked to confirm, as this will delete all your changes and your content), and then <code>vagrant up</code>. </p> <p>Full instructions below.</p>"},{"location":"installation/playbook/#requirements-vagrant","title":"Requirements (Vagrant)","text":"<p>To create a local VM, download and install the following.</p> <ol> <li>Virtual Box</li> <li>Vagrant (version 2.0 or higher required)</li> <li>Git</li> <li>OpenSSL</li> <li>Ansible (Tested on version 2.11+, versions back to 2.9 should work.)</li> </ol>"},{"location":"installation/playbook/#installing-git-and-ansible-on-macos","title":"Installing Git and Ansible on MacOS","text":"<p>OpenSSL is already pre-installed on MacOS. Git can be installed using XCode's command line tools (see below). Python and Pip can either be installed via the downloaded installer direct from the site or via Homebrew (not shown below). Ansible is best installed using Homebrew (see below).</p> <pre><code># Use xcode-select to install command line components, including git\n$ xcode-select --install\n# Install homebrew\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# Use homebrew to install ansible\n$ brew install ansible\n</code></pre>"},{"location":"installation/playbook/#installing-a-local-development-environment-vagrant","title":"Installing a local development environment (Vagrant)","text":"<p>You will use <code>vagrant up</code> twice, first to create an Islandora base box, and then again to provision that base box into a full Islandora. This method uses Vagrant, VirtualBox, and Ansible.</p> <p>Warn</p> <p>Make sure that no required ports are currently in use.</p>"},{"location":"installation/playbook/#clone-the-playbook","title":"Clone the playbook","text":"<pre><code>$ git clone -b dev https://github.com/Islandora-Devops/islandora-playbook\n$ cd islandora-playbook\n</code></pre>"},{"location":"installation/playbook/#create-the-base-box","title":"Create the Base Box","text":"<p>The Playbook will create a \"base box\" that includes core software (PHP, Apache, etc). Since these do not need to be updated too often, this can be packaged as a Vagrant base box that will be used to quickly provision the Islandora part.</p> <p>Notes: - If building a CentOS box, you also need to install the vbguest additions with <code>vagrant plugin install vagrant-vbguest</code>. - If this is not your first time spinning up the Islandora Playbook from this directory, you may want to clear cached ansible roles in roles/external\" <code>rm -rf roles/external</code></p> <p>First, create the islandora base box by overriding the Vagrant variable <code>ISLANDORA_BUILD_BASE</code> (which defaults to <code>false</code> in the <code>Vagrantfile</code>): <pre><code>$ ISLANDORA_BUILD_BASE=true vagrant up\n</code></pre></p> <p>Once it is complete (without errors), store it as a Vagrant base box. It will appear as <code>islandora_base</code> in the current directory. <pre><code>$ vagrant package --output islandora_base\n</code></pre></p> <p>Then, get rid of the existing VM since we've saved what we need: <pre><code>$ vagrant destroy\n     default: Are you sure you want to destroy the 'default' VM? [y/N] y\n==&gt; default: Forcing shutdown of VM...\n==&gt; default: Destroying VM and associated drives...\n</code></pre></p>"},{"location":"installation/playbook/#provision-the-islandora-code","title":"Provision the Islandora code","text":"<p>Then, to install Islandora (including Drupal and its configuration, Crayfish, Alpaca, etc) on top of the new base box: <pre><code>vagrant up\n</code></pre></p> <p>Access your site at <code>http://localhost:8000</code>.</p>"},{"location":"installation/playbook/#rebuilding-your-islandora-development-box","title":"Rebuilding your Islandora development box","text":"<p>You can quickly create a new \"out of the box\" Islandora VM by just re-doing the last step (provisioning Islandora) while using your existing base box. In doing this, you will destroy your existing VM, and all of its configuration and data.  This will not upgrade PHP, apache, or other back-end services (see below, \"Refreshing your base box.\")</p> <p><pre><code>vagrant destroy\n</code></pre> You will be asked to confirm, and Vagrant will inform you it is destroying the VM and associated drives.  <pre><code>vagrant up\n</code></pre> This will create a new development environment on the existing islandora_base box.</p>"},{"location":"installation/playbook/#refreshing-your-base-box","title":"Refreshing your base box.","text":"<p>If you want to use the Playbook to rebuild the base box (e.g. if this playbook now includes updated versions of PHP or Apache), then you will need to take some extra steps to ensure that Vagrant sees your new base box. </p> <pre><code>vagrant destroy  # Delete your existing VM\nvagrant box remove islandora_base  # clear Vagrant's cached version of islandora_base\nISLANDORA_BUILD_BASE=true vagrant up # and proceed to package the box, as above.\n</code></pre> <p>This is because once you use the base box once, it is stored in the vagrant box list under your home directory. While subsequent builds of <code>ISLANDORA_BUILD_BASE=true vagrant up</code> will build a new box and you can package it, but that file does not update the cached box and consequently you still get the old base box when you try build a VM. See <code>vagrant box</code> documentation for more useful commands for managing base boxes.</p>"},{"location":"installation/playbook/#deploying-to-a-remote-environment","title":"Deploying to a remote environment","text":"<p>The <code>ansible-playbook</code> command using <code>playbook.yml</code> can provision a remote environment. First, you will need to create a new folder in <code>inventory/</code> with the details of your remote deployment. This includes:</p> <ul> <li>Configuring the SSH parameters so Ansible can log in</li> <li>Changing usernames and passwords to something more sensible than the default</li> <li>Changing IP addresses to use the remote machine's IP</li> <li>Changing Apache to serve at port 80 (as opposed to 8000, which we use for development purposes)</li> </ul> <p>Before beginning, you may want to:</p> <ul> <li>Create a non-root user on the remote machine. Ansible will need to \"escalate\" (i.e. <code>sudo</code>) as this user. See Ansible Docs on Understanding privilege escalation: become</li> <li>Ensure all ports except the Drupal port and ports used by Ansible are behind a firewall.</li> </ul> <p>We're going to build up this new remote environment configuration from the default provided Vagrant configuration. To start, take the inventory for the <code>vagrant</code> development environment and make a copy of it. Be sure to give it an appropriate name. Here we're using <code>production</code>.</p> <pre><code>$ git clone https://github.com/Islandora-Devops/islandora-playbook\n$ cd islandora-playbook\n$ cp -r inventory/vagrant inventory/production\n</code></pre> <p>Then you can update the following entries in the following files using your own information. If an entry does not exist in a file, just add it.  Ansible will then use the value you provide instead of relying on its defaults.</p> <p>We're using <code>changeme</code> to represent passwords and assume the server will be available at <code>example.org</code>, but you'll want to provide your own values.</p>"},{"location":"installation/playbook/#group_varsallpasswordsyml","title":"group_vars/all/passwords.yml","text":"<pre><code># Drupal\ndrupal_db_password: changeme\ndrupal_account_pass: changeme\n\n# MySQL/Postgres\nislandora_db_root_password: changeme\n\n# Tomcat\nislandora_tomcat_password: changeme\n\n# Syn\nislandora_syn_token: changeme\n\n# Cantaloupe\ncantaloupe_admin_password: changeme\n\n# Fedora\nfcrepo_db_password: changeme\n</code></pre>"},{"location":"installation/playbook/#group_varswebserverapacheyml","title":"group_vars/webserver/apache.yml","text":"<p>This is where we specify that the webserver is listening on the default port 80, instead of the development machine port 8000. <pre><code>apache_listen_port: 80\n</code></pre></p>"},{"location":"installation/playbook/#group_varswebservergeneralyml","title":"group_vars/webserver/general.yml","text":"<p>You will have to add the matomo line.</p> <pre><code>matomo_site_url: http://example.org\n</code></pre>"},{"location":"installation/playbook/#group_varswebserverapacheyml_1","title":"group_vars/webserver/apache.yml","text":"<p>If you have a domain name, change the default to your domain name.</p> <pre><code> - servername: \"myactualddomain.com\"\n</code></pre>"},{"location":"installation/playbook/#group_varswebserverdrupalyml","title":"group_vars/webserver/drupal.yml","text":"<p>If you have a domain name, change the default to your domain name. And set the Drupal site name to whatever you need it to be.</p> <p><pre><code>drupal_domain: \"myactualdomain.com\"\ndrupal_site_name: \"Example Sitename\"\n</code></pre> Also set your domain in <code>drupal_trusted_hosts</code>:</p> <pre><code>drupal_trusted_hosts:\n  - ^localhost$\n  - \"{{ hostvars[groups['webserver'][0]].ansible_host }}\"\n  - '^myactualdomain\\.com$'\n</code></pre> <p>Note the backslash which escapes the period (which would otherwise match any character). Because of this escape character, the string needs to be surrounded by single quotes.</p>"},{"location":"installation/playbook/#hosts","title":"hosts","text":"<p>You'll need to put particulars for logging into your server in the <code>inventory/production/hosts</code> file . This example is set up to login as the <code>ansible</code> user (to avoid trying to run Composer as <code>root</code>) and uses an SSH key. You'll need to get the details for logging into your remote server from your hosting provider (AWS, Digital Ocean, etc...) or your systems administrator if you're running the server in-house. See this page for more details about what you can put into a host file</p> <pre><code>default ansible_host=example.org ansible_port=22 ansible_user=ansible ansible_ssh_private_key_file='/home/username/.ssh/id_rsa'\n</code></pre>"},{"location":"installation/playbook/#running-the-remote-installer","title":"Running the remote installer","text":"<p>First, you'll want to install the ansible roles that are needed for the version of Islandora you are trying to install.  This can be done with</p> <pre><code>$ ansible-galaxy install -r requirements.yml\n</code></pre> <p>Then, if you are on Ubuntu 22.04, run the following commands:</p> <pre><code>$ ansible-playbook -i inventory/production playbook.yml -e \"islandora_distro=ubuntu/jammy64\" -e \"islandora_profile=starter\" -e \"islandora_build_base_box=true\"\n$ ansible-playbook -i inventory/production playbook.yml -e \"islandora_distro=ubuntu/jammy64\" -e \"islandora_profile=starter\" -e \"islandora_build_base_box=false\"\n</code></pre>"},{"location":"installation/playbook/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/playbook/#out-of-date-playbooks","title":"Out of date playbooks","text":"<p>Ansible caches the code used to provision the environment, so if you've already installed once you may not be getting the latest version of things even if you've <code>git pull</code>'d the latest playbook.  The code is stored in <code>roles/external</code>, so if you want to clear it out you can remove these before attempting to provision an environment</p> <pre><code>$ rm -rf roles/external\n</code></pre>"},{"location":"installation/playbook/#port-clashes-for-local-environments","title":"Port clashes for local environments","text":"<p>When provisioning using a local environment, you should be aware of any ports that are already in use by your computer that are also going to be used by Vagrant, as these may clash and cause problems during and after provisioning. These include:</p> <ul> <li>8000 (Apache)</li> <li>8080 (Tomcat)</li> <li>3306 (MySQL)</li> <li>5432 (PostgreSQL)</li> <li>8983 (Solr)</li> <li>8161 (ActiveMQ)</li> <li>8081 (API-X)</li> </ul> <p>If there are port clashes for any of these, you will need to either find and replace them in the configuration .yml files under <code>inventory/vagrant/group_vars</code>, or provide new values for the different playbooks that support changing the ports (for example, <code>postgresql_databases</code> supports adding a <code>port</code> property which is currently simply unused). You will also need to replace the port forwarding values in <code>Vagrantfile</code>.</p> <p>Additionally, Ansible attempts to use port 2200 for SSH. If this port is already in use, your local environment cannot be provisioned. To change this, set a new value for <code>ansible_port</code> in <code>inventory/vagrant/hosts</code>.</p>"},{"location":"installation/playbook/#help","title":"Help","text":"<p>If you run into any issues installing the environment, do not hesitate to email the mailing list to ask for help.  If you think you've stumbled across a bug in the installer, please create an issue in the Islandora issue queue and give it an <code>ansible</code> tag.</p>"},{"location":"installation/quickstart/","title":"Quickstart","text":"<p>There are several ways to try Islandora, which are presented here in order of increasing sophistication. By default, they all install the Islandora Starter Site which is a starting place for customizing your own site, as well as our suite of external services.</p>"},{"location":"installation/quickstart/#online-sandbox","title":"Online Sandbox","text":"<p>Try Islandora without installing anything at sandbox.islandora.ca. Login credentials for the sandbox can be found on our Wiki.</p> <p>Anyone can log in to this sandbox as an administrator and explore the interface! However, this site is refreshed every night so your changes will not be permanent. This site uses the Islandora Starter Site. This sandbox includes some sample content and configuration (such as views and blocks) to increase its usefulness as a sandbox. .</p>"},{"location":"installation/quickstart/#docker-portainer-demo","title":"Docker Portainer Demo","text":"<p>Alternately, with Docker Desktop, you can run a demo locally using Docker's Portainer extension. The command line is not required. See Docker Portainer Demo for instructions. Note that this method does not support installing modules or themes that are not included with the demo.</p>"},{"location":"installation/quickstart/#sandbox-running-locally","title":"Sandbox running locally","text":"<p>Alternately, you can use Docker and install the Online Sandbox repository locally, with minimal command-line usage. Note that this method does not support installing modules or themes that are not included with the demo. See the instructions for \"Running Locally\" in the Sandbox's README.</p>"},{"location":"installation/quickstart/#ansible-playbook","title":"Ansible Playbook","text":"<p>To provision a local Vagrant or remote Ubuntu virtual machine (without Docker), you can use the Islandora Ansible Playbook. The playbook results in all services installed on a single machine, but can be altered to spread services across various machines. This is a full-fledged VM where you can install modules and themes using Composer. This method requires basic command-line usage and it's advantageous if you are familiar with provisioning software on Ubuntu. This Playbook is suitable for local or production use, though local use (through VirtualBox and Vagrant) is not supported yet by Apple hardware (i.e. M1/M2 machines). See documentation: Installation - Ansible Playbook for more details.</p>"},{"location":"installation/quickstart/#isle-site-template","title":"ISLE Site Template","text":"<p>ISLE Site Template uses Docker and is based off images created by ISLE Buildkit, but is a simpler tool than ISLE-DC. This is a full-fledged Docker installation where you can install modules and themes using Composer, either by executing commands in the container or by using the built-in IDE.  It is suitable for local development or production. See documentation: Installation - Site Template for more details. </p>"},{"location":"installation/quickstart/#isle-dc","title":"ISLE-DC","text":"<p>ISLE-DC uses Docker and provisions each service in the Islandora stack in a separate container. The containers are also based off of the images in ISLE Buildkit. ISLE-DC uses the GNU Make tool to provide several shortcuts to performing common management functions. It is suitable for local development or production.  See documentation: Installation - Docker ISLE for more details.</p>"},{"location":"installation/docker/converting/","title":"Converting ISLE-DC to Site Template","text":"<p>The following instructions explain how to convert your ISLE-DC site into the Site Template style of docker-compose.yml.</p>"},{"location":"installation/docker/converting/#development-instructions","title":"Development Instructions","text":"<p>ISLE-DC and the Site Template both use isle-builkit images to spin up an Islandora site. Since the images are the same, you can transfer an ISLE-DC site to a Site Template setup by doing the following:</p> <ol> <li> <p>Follow the instructions in the Site Template README to create a new site from the Islandora Starter Site</p> <p>Note</p> <p>Use the same TAG in your Site Template .env that you used in ISLE-DC, so you have the same set of containers.</p> </li> <li> <p>Replace the Starter Site's composer.json and composer.lock files with yours, and install the correct Drupal modules using Composer</p> <p>Note</p> <p>You may need to make some modifications to your composer.json file. Specifically, the <code>scripts</code> and <code>drupal-scaffold</code> sections may have changed.</p> <p>You can look at the most recent starter site composer.json for comparison.</p> <p>If you have custom modules and/or themes that are not installed via Composer you will need to install those as well.</p> </li> <li> <p>Compare your old Dockerfile with the one in the Site Template repository. If you have made customizations, you may want to replicate them in the new Dockerfile.</p> </li> <li> <p>Backup your ISLE-DC site's Fedora, Drupal database, and public/private files.</p> </li> <li> <p>Import your backups to the new Site Template site.</p> </li> <li> <p>Delete your Solr core, and regenerate new configs.</p> <p>Note</p> <p>Site Template uses a different core name than ISLE-DC did</p> </li> <li> <p>Commit and push your git repository so it is ready for production.</p> </li> </ol>"},{"location":"installation/docker/converting/#production-instructions","title":"Production Instructions","text":"<p>Once you have converted the development instance of your site, moving it to production requires the following:</p> <ol> <li> <p>Clone the git repository that you set up in the development instructions above</p> </li> <li> <p>Prepare your images/containers as described in the Site Template README</p> <ol> <li>Run the generate secrets script included with the site template, or copy your secrets from your existing site if you want them to be the same</li> <li>Add custom modules or themes, if you have some that are not included in your composer.json</li> <li>Build your Drupal container with <code>docker compose --profile prod build</code></li> <li>Pull in the remaining containers with <code>docker compose --profile prod pull --ignore-buildable --ignore-pull-failures</code></li> <li>Start the containers with <code>docker compose --profile prod up -d</code></li> </ol> </li> <li> <p>Import the backups from your ISLE-DC site that you made in the development instructions above</p> </li> <li> <p>Delete your Solr core, and regenerate new configs.</p> </li> </ol>"},{"location":"installation/docker/converting/#converting-your-docker-composeyml","title":"Converting Your docker-compose.yml","text":"<p>The main difference between ISLE-DC and the Site Template is the way the docker-compose.yml file is generated. In ISLE-DC we generate it based on your .env variables and a make command, but in Site Template it is ready to go out of the box. </p> <p>This means that in ISLE-DC you had separate docker-compose.yml files for development and production, but in site template there is one file for both, which contains instructions for a \u201cdev\u201d and \u201cprod\u201d profile. The end result is the same set of containers, but instead of running <code>docker compose up</code> you would run <code>docker compose --profile dev up</code></p>"},{"location":"installation/docker/converting/#environment-variables","title":"Environment Variables","text":"<p>You should compare the <code>environment</code> sections of your docker-compose.yml files. You may have some variables set in your ISLE-DC docker-compose.yml that will need to be added to the docker-compose.yml in the new Site Template site.</p> <p>For example, the ISLE Buildkit Nginx README lists the available variables for Nginx that you may have changed on your Drupal containers to do things like increase the timeout time for PHP or the max POST size PHP will accept.</p>"},{"location":"installation/docker/converting/#urls","title":"URLs","text":"<p>The Site Template also handles the URLs for microservices differently. You will need to follow the instructions in the Site Template README to allow access to your microservices as a subdomain. For example, <code>solr.mydomain.com</code>. </p> <p>Subdomains</p> <p>If you are already using a subdomain and can\u2019t use URLs like <code>solr.mysubdomain.mydomain.com</code>, you can change this in the Traefik section of the docker-compose.yml file, by changing the aliases from <code>solr.{DOMAIN}</code> to something else, like <code>solr-{DOMAIN}</code>. You will also need to change this in a few other spots in your docker-compose.yml. You can find them by searching for <code>.{DOMAIN}</code></p>"},{"location":"installation/docker/converting/#converting-the-makefile","title":"Converting the Makefile","text":"<p>Because ISLE-DC and Site Template use the same containers, much of what is in an ISLE-DC Makefile will work within the site template environment. The main differences that need to be addressed are with the way new sites are built, and the name of the containers. </p> <p>Commands to build a site, like <code>make starter</code> and <code>make production</code> are not necessary with the Site Template, so they can be removed from your Makefile.</p> <p>Many of the other commands specify which containers to run commands in, for example <code>docker compose exec drupal</code>, but in the Site Template environment you need to specify -dev or -prod, so that would be changed to <code>docker compose exec drupal-dev</code> or <code>docker compose exec drupal-prod</code>.</p>"},{"location":"installation/docker/converting/#other-customizations","title":"Other Customizations","text":"<p>If you have modified your ISLE-DC repository, those modifications will need to be evaluated on a case-by-case basis. This includes editing the Dockerfile and environment variables mentioned above, as well as any other customizations you may have made, such as to settings.php, robots.txt, nginx configs, etc.</p>"},{"location":"installation/docker/docker-introduction/","title":"Introduction to ISLE","text":""},{"location":"installation/docker/docker-introduction/#what-is-isle","title":"What is ISLE?","text":"<p>ISLE, short for ISLandora Enterprise, is a community initiative to ease the installation and maintenance of Islandora by using Docker. It was originally started by the Islandora Collaboration Group for Islandora Legacy.  When transitioning to Islandora, the project came under the purview of the Islandora Foundation.  All documentation on this site assumes you're trying to install Islandora. See here if you are looking for ISLE for Islandora Legacy.</p>"},{"location":"installation/docker/docker-introduction/#why-use-isle","title":"Why use ISLE?","text":"<p>ISLE's architecture using Docker separates out the \"state\" of your site (i.e. all the content, files, and configurations that you've entered) from the underlying software that runs it (e.g. webserver, database, microservices, etc). This allows for easier upgrades, faster development, and more flexible deployment. It is hands down the easiest way to install, run, and maintain and Islandora instance.</p>"},{"location":"installation/docker/docker-introduction/#where-is-isle","title":"Where is ISLE?","text":"<p>ISLE is a suite of Docker containers that run the various components of Islandora: drupal, fedora, solr, alpaca, crayfish, matomo, etc. The individual containers are created (and automatically pushed to Docker Hub) by ISLE BuildKit.</p> <p>In order to deploy the containers, however, you need to use a container orchestration tool.  The ISLE project provides tools for running and maintaining the containers using docker-compose with ISLE Docker Compose or ISLE Site Template.</p>"},{"location":"installation/docker/docker-prereq/","title":"Prerequisites","text":""},{"location":"installation/docker/docker-prereq/#software-involved-in-isle","title":"Software involved in ISLE","text":"<p>ISLE uses the following software in order to help you set up and run your site. If you are new to any of the following software, that's OK, but learning more about each piece will make it much easier to modify ISLE to suit your particular needs, and maintain your Islandora site.</p> <p>The following pieces of software are not unique to Islandora, and there are many great resources online to learn more about them. Below is a brief introduction to each piece and how they fit into your Islandora site. There are also many great videos on the Islandora Foundation's YouTube page if you would like to learn more about how they are used within the context of Islandora.</p>"},{"location":"installation/docker/docker-prereq/#git","title":"Git","text":"<p>Git is a version control system that is used to store the code for Islandora. When you first download ISLE you will be downloading it using Git. Git is also useful for managing your site's Drupal codebase, once you have a site up and running. </p> <p>More about using Git for Drupal sites can be found in the Drupal documentation.</p>"},{"location":"installation/docker/docker-prereq/#docker","title":"Docker","text":"<p>Docker allows us to run our Islandora sites in virtualized environments, called containers. Each container runs one part of the Islandora software, and it takes several containers to run a complete Islandora site. </p> <p>The three main components of Docker are Images, Containers, and Volumes. </p>"},{"location":"installation/docker/docker-prereq/#images","title":"Images","text":"<p>Images are what our containers are built from. Images are read-only, and allow us to quickly create containers based on them.</p> <p>The Islandora images are provided by Islandora Buildkit.</p>"},{"location":"installation/docker/docker-prereq/#containers","title":"Containers","text":"<p>Containers are where the Islandora software actually runs. ISLE gives us tools to easily download the Islandora images and start our containers from them.</p>"},{"location":"installation/docker/docker-prereq/#volumes","title":"Volumes","text":"<p>Volumes are where our persistent storage lives. Because containers are often rebuilt from images, any data stored in them is easily lost. Volumes allow us to store specific parts of our containers that we don't want to lose. For example, our Drupal database will live in a volume so that it is not lost when a container is shut down.</p>"},{"location":"installation/docker/docker-prereq/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose is a tool to simplify the process of running multiple Docker containers for a single project. It uses a file called docker-compose.yml to store the settings for your project's containers. ISLE gives us tools to create this docker-compose.yml file, so we can use it to manage the containers for our site.</p>"},{"location":"installation/docker/docker-prereq/#gnu-make","title":"GNU Make","text":"<p>Make allows us to define commands that simplify installing and maintaining our Islandora site. For a complete list of available commands see the Makefile included with ISLE-DC.</p>"},{"location":"installation/docker/docker-prereq/#composer","title":"Composer","text":"<p>Composer is a dependency manager for PHP, and is the recommended way to install and update Drupal modules. Composer is installed in the Islandora Drupal container and should be run within the container to manage your Drupal site. More information on using Composer with Drupal is available in the Drupal documentation.</p>"},{"location":"installation/docker/docker-prereq/#drupal","title":"Drupal","text":"<p>Drupal is a Content Management System used to create websites. During the setup of your Islandora site, a Drupal site is created for you in your Drupal container, by the commands in the Makefile. </p>"},{"location":"installation/docker/docker-prereq/#drush","title":"Drush","text":"<p>Drush is a command line tool for managing your Drupal site. It comes installed in your Drupal container and allows you to perform Drupal actions from the command line inside your container.</p>"},{"location":"installation/docker/docker-prereq/#requirements-for-using-isle-with-docker-compose","title":"Requirements for using ISLE with Docker Compose","text":"<ul> <li>Docker 19.x+</li> <li>Docker Compose version 2.x+</li> <li>GNU Make 4.0+</li> <li>Git 2.0+</li> <li>At least 8GB of RAM (ideally 16GB)</li> <li>An administrator account your machine (a.k.a. the host machine)</li> <li>(Mac OS) Apple Developer Tools</li> <li>(Windows) The following setup has been tested:<ul> <li>Windows 10</li> <li>Windows Subsystem for Linux v. 2 (WSL 2)</li> <li>Ubuntu 20.04 running on WSL 2</li> <li>GNU make, run <code>sudo apt update</code> and <code>sudo apt install make</code> to install</li> <li>Docker Desktop for Windows, using the WSL 2 based engine (Settings &gt; General) and with the WSL integration active for Ubuntu (Settings &gt; Resources &gt; WSL integration)</li> </ul> </li> </ul> <p>What are we missing?</p> <p>Are you, or your computer, new to spinning up development sandboxes? Do you have wisdom about installing make on Windows? We suspect these requirements may be incomplete and your experience would be appreciated at Issue #1640.</p>"},{"location":"installation/docker/docker-prereq/#installing-docker","title":"Installing Docker","text":"<p>To see if you have Docker installed, type <code>docker --version</code> in a terminal.</p> <p>If you need to install Docker, we recommend using the application Docker Desktop. It provides a GUI for managing Docker container in Windows and MacOS, along with the Docker engine and suite of command-line tools. Linux users don't get a desktop client, but can install the Engine and command-line tools the instructions here.</p> <p>Memory, Processors, and Swap Requirements</p> <p>To run ISLE on Docker Desktop, you must increase the resources allocated to the software. See Docker docs on setting resources on Windows (see note on how to allocate/restrict memory when using WSL 2) or setting resources on Mac.</p> <p>CPUs (processors): The CPUs allowed to Docker Desktop are still shared with the host machine, so increasing this to the maximum value should allow both the Docker containers and your host machine to run simultaneously.</p> <p>Memory (RAM): This memory is completely dedicated to Docker while Docker Desktop is running, so do not allocate more than you can spare and still run your host machine. Windows users may not require as much memory for Docker as Mac users. Current suggestions for memory allocated to Docker Desktop are below, but please edit this document if you have new information.</p> <ul> <li>Sandbox or development environment: 8GB</li> <li>Production or production-like development: 16GB</li> </ul> <p>Swap: Swap space is space borrowed from your hard disk drive to serve as makeshift RAM as needed. If you cannot provide as much RAM as you would like, increase this as is reasonable given your free disk space.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/","title":"Available Commands","text":"<p>There's a lot of useful commands available to you from within the <code>isle-dc</code> folder.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#rebuild-docker-composeyml","title":"Rebuild docker-compose.yml","text":"<p><code>make -B docker-compose.yml</code> will rebuild your <code>docker-compose.yml</code> file based on configuration in your <code>.env</code> file.  <code>make demo</code> and <code>make local</code> will automatically do this for you, but if you change configuration at a later point in time, you'll need to run this command to see your changes reflected.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#config-export","title":"Config Export","text":"<p><code>make config-export</code> will export your site's configuration to your site's config sync directory (usually <code>config/sync</code> inside your Drupal root folder).</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#config-import","title":"Config Import","text":"<p><code>make config-import</code> will import site's configuration from your site's config sync directory (usually <code>config/sync</code> inside your Drupal root folder).</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#database-dump","title":"Database Dump","text":"<p><code>make drupal-database-dump DEST=/your/path/dump.sql</code> will dump your Drupal database and place the file at <code>DEST</code>.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#database-import","title":"Database Import","text":"<p><code>make drupal-database-import SRC=/your/path/dump.sql</code> will import your Drupal database from the file at <code>SRC</code>.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#export-public-files","title":"Export Public Files","text":"<p><code>make drupal-public-files-dump DEST=/your/path/public_files.tgz</code> will export your public filesystem and place it as a single zipped tarball at <code>DEST</code>.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#import-public-files","title":"Import Public Files","text":"<p><code>make drupal-public-files-import SRC=/your/path/public_files.tgz</code> will import your public filesystem from a single zipped tarball at <code>SRC</code>.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#fcrepo-export","title":"Fcrepo Export","text":"<p><code>make fcrepo-export DEST=/your/path/fcrepo-export.tgz</code> will export your Fedora repository and place it as a single zipped tarball at <code>DEST</code></p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#fcrepo-import","title":"Fcrepo Import","text":"<p><code>make fcrepo-import SRC=/your/path/fcrepo-export.tgz</code> will import your Fedora repository from a single zipped tarball at <code>SRC</code></p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#reindex-fedora-metadata","title":"Reindex Fedora Metadata","text":"<p><code>make reindex-fcrepo-metadata</code> will reindex RDF metadata from Drupal into Fedora. Requires the Views Bulk Operations Module.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#reindex-solr","title":"Reindex Solr","text":"<p><code>make reindex-solr</code> will rebuild rebuild Solr search index for your repository.</p>"},{"location":"installation/docker/isle-dc/docker-available-commands/#reindex-the-triplestore","title":"Reindex the Triplestore","text":"<p><code>make reindex-triplestore</code> will reindex RDF metadata from Drupal into Blazegraph. Requires the Views Bulk Operations Module.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/","title":"Available Configuration","text":"<p>ISLE Docker Compose has a single configuration file, <code>.env</code>. Within it, here is all the values you can set and their effects. This list is subjectively sorted in order of importance and usefulness.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#environment","title":"ENVIRONMENT","text":"<p>Setting the <code>ENVIRONMENT</code> changes how your <code>docker-compose.yml</code> file gets constructed. When you switch from a demo to development to production environment, this is the variable to change.</p> <p>Available values for this setting are</p> <ul> <li><code>demo</code> - For demo environments where you do not need access to the codebase</li> <li><code>local</code> - For development environments where you need edit the codebase</li> <li><code>custom</code> - For production environments where your codebase gets baked into a custom container</li> </ul> <p>By default, this is set to <code>demo</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#domain","title":"DOMAIN","text":"<p>What domain your Islandora site will be available at. If you are deploying anywhere other than your personal machine, you'll probably want to change this.</p> <p>By default, this is set to <code>islandora.traefik.me</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p> <p>Changing this after installation has consequences</p> <p>If you are indexing RDF metadata in Fedora and/or a triplestore, please be aware of the implications of changing this once you have installed.  By changing your domain, all of the subjects of your triples will be incorrect and you will have to reindex.  There are <code>make</code> commands to streamline this process, but if you have lots of data it can potentially be costly in terms of time and effort.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#repository","title":"REPOSITORY","text":"<p>Repository to use for pulling isle-buildkit images.</p> <p>By default, this is set to <code>islandora</code>.  Change to <code>local</code> to use images you have built locally with isle-buildkit, or use your custom docker registry if you have set up one.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#tag","title":"TAG","text":"<p>The version of the <code>isle-buildkit</code> images to use. Non <code>isle-buildkit</code> images have their versions specified explicitly in their respective docker-compose files.</p> <p>By default, this is set to the latest stable release of <code>isle-buildkit</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#use_secrets","title":"USE_SECRETS","text":"<p>Whether or not you want to use secrets.  For demo and development environments, secrets are not required.  They are essential if you are running a production environment, though.</p> <p>Secrets are contained in the <code>secrets</code> folder within your <code>isle-dc</code> installation.  Each file represents an individual secret, and its contents are the value you're trying to protect.</p> <p>Available values for this setting are:</p> <ul> <li><code>true</code></li> <li><code>false</code></li> </ul> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#drupal_install_profile","title":"DRUPAL_INSTALL_PROFILE","text":"<p>Which install profile to use when making an initial installation.  Valid values for this setting are the machine names of any Drupal profile.</p> <p>By default, this is set to <code>standard</code>.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#install_existing_config","title":"INSTALL_EXISTING_CONFIG","text":"<p>Set this to <code>true</code> if you want to install an existing Drupal site whose configuration was exported with <code>drush config:export</code></p> <p>Available values for this setting are - <code>true</code> - <code>false</code></p> <p>By default, this is set to <code>false</code>.</p> <p>If you set this to <code>true</code>, be sure to set <code>DRUPAL_INSTALL_PROFILE</code> to <code>minimal</code>.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#include_watchtower_service","title":"INCLUDE_WATCHTOWER_SERVICE","text":"<p>Whether or not to include Watchtower as a service.  When developing <code>isle-buildkit</code>, this is extremely useful and will auto-deploy new containers as you make changes.  You should not use watchtower on production environments, though.</p> <p>Available values for this setting are - <code>true</code> - <code>false</code></p> <p>By default, this is set to <code>true</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#include_etcd_service","title":"INCLUDE_ETCD_SERVICE","text":"<p>Whether or not to include <code>etcd</code> as a service.</p> <p>Available values for this setting are - <code>true</code> - <code>false</code></p> <p>By default, this is set to <code>false</code>. If you don't know what <code>etcd</code> is, then leave this be.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#include_code_server_service","title":"INCLUDE_CODE_SERVER_SERVICE","text":"<p>Whether or not to include the <code>coder</code> IDE as a service. If you're developing on Islandora, this can be pretty useful when developing. You should not deploy this service on production environments.</p> <p>Available values for this setting are - <code>true</code> - <code>false</code></p> <p>By default, this is set to <code>false</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#drupal_database_service","title":"DRUPAL_DATABASE_SERVICE","text":"<p>Which database engine to use for Drupal.</p> <p>Available values are - mariadb - postgres</p> <p>By default, this value is set to <code>mariadb</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p> <p>Changing this after installation has consequences</p> <p>If you are changing from mariadb to postgres or vice versa, you MUST migrate your data yourself.  ISLE will not convert your database from one to the other, and it's generally not advised to change this once you've installed.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#fcrepo_database_service","title":"FCREPO_DATABASE_SERVICE","text":"<p>Which database engine to use for Fedora.</p> <p>Available values are - mariadb - postgres</p> <p>By default, this value is set to <code>mariadb</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p> <p>Changing this after installation has consequences</p> <p>If you are changing from mariadb to postgres or vice versa, you MUST migrate your data yourself.  ISLE will not convert your database from one to the other, and it's generally not advised to change this once you've installed.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#compose_http_timeout","title":"COMPOSE_HTTP_TIMEOUT","text":"<p>Sometimes when bringing up containers, you can encounter timeouts with an error like this:</p> <pre><code>ERROR: An HTTP request took too long to complete. Retry with --verbose to obtain debug information.\nIf you encounter this issue regularly because of slow network conditions, consider setting COMPOSE_HTTP_TIMEOUT to a higher value (current value: XXX).\n</code></pre> <p>By default, this value is set to 480, but if you have slow network conditions and encounter this error, consider bumping it higher.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#compose_project_name","title":"COMPOSE_PROJECT_NAME","text":"<p>Used for naming services in traefik as well as defining network alias and urls. For example the <code>drupal</code> service will be found at <code>${COMPOSE_PROJECT_NAME}_drupal_1</code>. This is useful to change if you are running multiple ISLE instances on one machine.</p> <p>By default, this value is set to <code>isle-dc</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#compose_docker_cli_build","title":"COMPOSE_DOCKER_CLI_BUILD","text":"<p>Allows building your custom image when setting <code>ENVIRONMENT=custom</code></p> <p>By default, this is set to 1.</p> <p>You most likely will never have a need to change this.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#docker_buildkit","title":"DOCKER_BUILDKIT","text":"<p>Instructs Docker to use buildkit when building your custom image.</p> <p>By default, this is set to 1.</p> <p>You most likely will never have a need to change this. Trust us, you want buildkit.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#project_drupal_dockerfile","title":"PROJECT_DRUPAL_DOCKERFILE","text":"<p>The name of the Dockerfile to use after setting <code>ENVIRONMENT=custom</code>.</p> <p>By default, this is set to <code>Dockerfile</code>.</p> <p>You most likely will never have a need to change this.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#disable_syn","title":"DISABLE_SYN","text":"<p>Set this to <code>true</code> to disable JWT authentication for Fedora.  This is necessary when performing a Fedora import using their import/export tools.</p> <p>By default, this is set to <code>false</code>.</p>"},{"location":"installation/docker/isle-dc/docker-available-configuration/#fedora_6","title":"FEDORA_6","text":"<p>Whether or not to use Fedora 6.  If you set this to <code>false</code>, you will be given Fedora 5. In general, unless you already have an existing site on Fedora 5, you'll want Fedora 6.</p> <p>By default, this is set to <code>true</code>.</p> <p>If you change this setting, you need to <code>make -B docker-compose.yml</code> to generate a new <code>docker-compose.yml</code> file that contains the changes you've made.</p>"},{"location":"installation/docker/isle-dc/docker-basic-usage/","title":"Basic Usage","text":"<p>After you've finished installing Islandora using ISLE, here's some useful information to keep close at hand about running your site.</p>"},{"location":"installation/docker/isle-dc/docker-basic-usage/#important-files","title":"Important Files","text":"<p>The <code>make</code> commands that you used to install Islandora will leave you with two very important files.</p> File Purpose <code>.env</code> A configuration file that is yours to customize. This file controls how the docker-compose.yml file gets generated to meet your use case.It also allows you to set variables that make their way into the final <code>docker-compose.yml</code> file, such as your site's domain. <code>docker-compose.yml</code> A ready to run <code>docker-compose.yml</code> file based on your <code>.env</code> file.  This file is considered disposable. When you change your <code>.env</code> file, you will generate a new one."},{"location":"installation/docker/isle-dc/docker-basic-usage/#available-services","title":"Available Services","text":"<p>Here's a list of all the available services.  Note that there are some services over <code>http</code> and not <code>https</code>. Those aren't meant to be exposed to the public, but internally people from your organization will want to access them.  In practice, you can restrict access to these services using firewall rules to just those who you trust.</p> Service Url Drupal https://islandora.traefik.me Traefik http://islandora.traefik.me:8080 Fedora http://islandora.traefik.me:8081/fcrepo/rest Blazegraph http://islandora.traefik.me:8082/bigdata Activemq http://islandora.traefik.me:8161 Solr http://islandora.traefik.me:8983 Cantaloupe https://islandora.traefik.me/cantaloupe Matomo https://islandora.traefik.me/matomo/ Code Server http://islandora.traefik.me:8443/"},{"location":"installation/docker/isle-dc/docker-basic-usage/#basic-commands","title":"Basic Commands","text":""},{"location":"installation/docker/isle-dc/docker-basic-usage/#stopping-islandora","title":"Stopping Islandora","text":"<p>If you want to stop Islandora, you can bring down all the containers with</p> <pre><code>docker-compose down\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-basic-usage/#restarting-islandora","title":"Restarting Islandora","text":"<p>If you want to start Islandora back up after stopping it, use</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-basic-usage/#deleting-islandora","title":"Deleting Islandora","text":"<p>If you want to stop Islandora and delete all of its content, use</p> <pre><code>docker-compose down -v\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-basic-usage/#regenerating-docker-composeyml","title":"Regenerating docker-compose.yml","text":"<p>If you make changes to configuration in the .env file, you may need to regenerate your <code>docker-compose.yml</code> file so that those changes take effect.</p> <pre><code>make -B docker-compose.yml\n</code></pre> <p>Once you have a new <code>docker-compose.yml</code> file, you'll need to restart your containers that have had configuration change. You can do this easily with</p> <pre><code>docker-compose up -d\n</code></pre> <p>Even if the site is up and running, that command will only restart the containers it needs to.</p>"},{"location":"installation/docker/isle-dc/docker-basic-usage/#listing-services","title":"Listing services","text":"<p>You can see a list of all the containers that you have running and their statuses by running</p> <pre><code>docker ps -a\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-basic-usage/#tailing-logs","title":"Tailing Logs","text":"<p>You can tail logs using</p> <p><code>docker-compose logs service_name</code></p> <p>For example, to tail nginx logs for Drupal, use <code>docker-compose logs drupal</code>.</p> <p>If you don't know what you're looking for exactly, you can turn on the fire hose and look through all logs by dropping the service name and simply using</p> <p><code>docker-compose logs</code></p>"},{"location":"installation/docker/isle-dc/docker-custom/","title":"Installing a Production/Staging Server","text":"<p>If you are deploying Islandora on a server that is publicly accessible, there are extra precautions you should take for performance and security reasons.</p> <p>For local development we bind mount our codebase (Drupal) folder so that we can do development work locally, outside of  our Docker container. For a production site we don\u2019t want to do this. Instead, we make changes to our development site,  then build a Drupal image with our changes that we can use on our production site instead of the default Islandora Drupal  image.</p>"},{"location":"installation/docker/isle-dc/docker-custom/#creating-your-image","title":"Creating your Image","text":"<p>In order to generate that custom Drupal image we need to set up a development environment. You will do this  on your development computer, rather than your production server.</p> <p>Once your development site is set up you will need somewhere to store your custom Drupal image. You should create a private  repository in your container registry of choice (Dockerhub, GitHub, GitLab, etc.)</p> <p>Once you have a place to store it, you can create your custom Drupal image by editing your <code>.env</code> to set <code>CUSTOM_IMAGE_NAMESPACE</code>  to your dockerhub username or the URL and username for your container repository, and <code>CUSTOM_IMAGE_NAME</code> to the name of the  repository you just created.</p> <p>Once this is done you can run <code>make build</code> to create the image from a Dockerfile. If you don't have a custom Dockerfile, it will  create one from sample.Dockerfile. This will create a new image from the Islandora Drupal image, with your codebase folder copied  into the image during the build process. </p> <p>You should now have a custom Drupal image on your local machine. You will need to <code>docker login</code> to your container registry to push  your image, so make sure to do that if you haven't yet (you should only need to do this once). You can then push this image to your  container registry by running <code>make push-image</code>. </p>"},{"location":"installation/docker/isle-dc/docker-custom/#set-up-a-git-repository","title":"Set up a Git Repository","text":"<p>Now that you have a development site set up with your own codebase folder, you should create a new git repository for your site.  This way you can easily spin up a new site based on your modules and configuration, instead of the Islandora Starter Site. This will  also allow you to sync changes between your production, staging, and development sites.</p> <p>You will likely want to include the Isle-dc directory as well as your codebase folder in your git repository. This will allow you to make modifications to  your Makefile, Dockerfile, docker-compose.yml, etc. and keep those modifications alongside your Drupal files in the codebase folder.  To store these files in your own private repository you should change the git remote repository URL from the Isle-DC URL to the URL for your private repository.</p> <p>Note that Isle-DC has the codebase folder in its <code>.gitignore</code>, so you will want to remove <code>codebase*</code> from your .gitignore. You don't need the web or vendor directories to be stored in your repo, since they will be added when you do a composer install during the site setup, so you can add those into your <code>.gitignore</code> as <code>codebase/vendor/*</code> and <code>codebase/web/*</code>.</p>"},{"location":"installation/docker/isle-dc/docker-custom/#set-up-your-production-staging-site","title":"Set up your Production / Staging Site","text":"<p>At this point you should have a custom git repository and a custom Drupal image, and both should be accessible by your production server. On your production server you will need to clone your custom copy of Isle-dc, copy the <code>sample.env</code> file, and name it <code>.env</code>. </p> <p>In that <code>.env</code> you should set the following variables: <pre><code>ENVIRONMENT=custom\nCOMPOSE_PROJECT_NAME=(same as dev site)\nCUSTOM_IMAGE_NAMESPACE=(same as dev site)\nCUSTOM_IMAGE_NAME=(same as dev site)\nDOMAIN=your-domain.com\n</code></pre></p> <p>Once this is set up, run <code>make production</code> to install your drupal site. You can generate new secrets for your production passwords, or  copy them from your dev server if you would like them to be the same.</p> <p>At this point, your site is ready, but you won't be able to access it at your URL until you update the SSL certificates (see TLS section below).</p> <p>Codebase Folder</p> <p>Because your codebase folder is in your git repository it will be cloned to your development server, but unlike in your development environment, it is not bound to the Drupal container. This means that any change you make to those files will not be represented in  your Drupal site.</p> <p>You can also use this folder to build your Drupal image on the production server instead of on your development server if you like.</p>"},{"location":"installation/docker/isle-dc/docker-custom/#secrets","title":"Secrets","text":"<p>Sensitive information, such as passwords, should never be built into a container.  It also shouldn't ever be bind-mounted in like we do with our codebase folder.  If you use secrets, it's like bind-mounting in a file, except that file is provided from the host machine to the container using an encrypted channel.</p> <p>Secrets are on by default. They can be toggled in your <code>.env</code> file, but you should never turn them off for production sites.</p> <pre><code>USE_SECRETS=true\n</code></pre> <p>The secrets themselves are stored in the <code>secrets/live</code> folder of <code>isle-dc</code>.  If you navigate to that directory, you'll see several small files, where each file represents a different password. When you run <code>make production</code> you can choose whether to generate new random  secrets or create them yourself.</p>"},{"location":"installation/docker/isle-dc/docker-custom/#tls","title":"TLS","text":"<p>All public facing sites need to use HTTPS, and it's definitely a stumbling block for the uninitiated.  Fortunately, <code>isle-dc</code> is set up to  use HTTPS by default.  Even when running <code>make demo</code>, your site runs over HTTPS at <code>https://islandora.traefik.me</code>.</p>"},{"location":"installation/docker/isle-dc/docker-custom/#using-your-own-certificates","title":"Using your own certificates","text":"<p>The default certificates are stored in the <code>certs</code> folder of <code>isle-dc</code>, and you can simply overwrite them with certificates from your certificate authority.  As long as the certificates match the <code>DOMAIN</code> variable in your <code>.env</code> file, that is. Changing the files in the <code>certs</code> folder requires restarting the Traefik container, which you can do by running <code>docker-compose restart traefik</code>.</p> File Purpose cert.pem A PEM encoded certificate that also contains the issuer's certificate as well. Most certificate authorities offer \"Full Chain\" or \"With Issuer\" certificates that contain everything you need.  Occasionally, you may find yourself needing to manually concatenate your certificate with the issuer certificate by hand. In that case, the certificate for your site goes first, and the issuer's certificate is appended afterwards. privkey.pem A PEM encoded private key used to sign your certificate"},{"location":"installation/docker/isle-dc/docker-custom/#requesting-certificates-through-lets-encrypt","title":"Requesting Certificates through Let's Encrypt","text":"<p>To use Let's Encrypt to acquire your SSL Certificate, set the following in your .env file and run <code>make -B docker-compose.yml &amp;&amp; make up</code>.</p> <pre><code>USE_ACME=true\nACME_EMAIL=your-email@example.org\n</code></pre> <p>Be sure to replace <code>your-email@example.org</code> with the email address you've associated with Let's Encrypt.</p> <p>The way this is setup, is it performs an HTTP Challenge to verify you are in control of the domain. So your system will need to be accessible at <code>http://DOMAIN/</code>.</p> <p>??? warning  \"Let's Encrypt Rate Limit\"     If you aren't careful, you can hit Let's Encrypt's rate limit, and you'll be locked out for up to a week!  If you want to use their staging server instead while testing things out, add the following to your .env file</p> <pre><code>```\nACME_SERVER=https://acme-staging-v02.api.letsencrypt.org/directory\n```\n</code></pre> <p>You'll still get security exceptions when it's working, but you should be able to check the certificate from the browser and confirm you are getting it from the staging server.</p> <pre><code>\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-custom/#troubleshooting-certificate-issues","title":"Troubleshooting Certificate Issues","text":"<p>If you are still getting security exceptions, check what certificate is being used through your browser.  Setting <code>TRAEFIK_LOG_LEVEL=DEBUG</code> in your <code>.env</code> file will help out greatly when debugging Traefik.  You can tail the logs with <code>docker-compose logs -tf traefik</code>.</p>"},{"location":"installation/docker/isle-dc/docker-custom/#traefikme-ssl-certificate-expired-or-revoked","title":"traefik.me SSL certificate expired or revoked","text":"<p>The *.traefik.me certificate that covers <code>islandora.traefik.me</code> will need to be redownloaded occasionally, due to the certificate expiring or possibly being revoked. You can download the updated certificates by performing the following commands:</p> <pre><code>rm certs/cert.pem\nrm certs/privkey.pem\nmake download-default-certs\ndocker-compose restart traefik\n</code></pre> <p>traefik.me Certificate Note</p> <p>Please note that sometimes the upstream provider of the traefik.me certificate takes a couple of days to update the certificate after it expires or is accidentally revoked.</p>"},{"location":"installation/docker/isle-dc/docker-custom/#requesting-certificates-through-acme-and-external-account-binding","title":"Requesting Certificates through ACME and External Account Binding","text":"<p>To request certificates through another Certificate Authority (CA) that supports External Accounting Binding through ACME such as InCommon or ZeroSSL you will need to add the following to your <code>.env</code> file:</p> <pre><code>USE_ACME=true\nACME_EMAIL=your-email@example.org\nACME_SERVER=\nACME_EAB_KID=\nACME_EAB_HMAC=\n</code></pre> <p>Where <code>ACME_SERVER</code> is the CA server to use, <code>ACME_EAB_KID</code> is the key identifier from the External CA, and <code>ACME_EAB_HMAC</code> is the HMAC key from the External CA.</p> <p>Once you have added these commands you will need to run the following commands:</p> <pre><code>make -B docker-compose.yml\nmake up\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-local/","title":"Installing a Development or Demo Server","text":"<p>When developing locally, your Drupal site resides in your <code>isle-dc/codebase</code> folder and is bind-mounted into your Drupal container.  This lets you update code using the IDE of your choice on your host machine, and the changes are automatically reflected on the Drupal container.</p>"},{"location":"installation/docker/isle-dc/docker-local/#installing-isle-docker-compose","title":"Installing ISLE Docker Compose","text":"<p>Use Git to install the ISLE Docker Compose tool:</p> <p><code>git clone https://github.com/islandora-devops/isle-dc</code></p> <p>Tagged versions are available here.</p>"},{"location":"installation/docker/isle-dc/docker-local/#getting-started","title":"Getting Started","text":"<p>If you don't already have a Drupal site, you'll be given a basic setup using Drupal 10 and the Islandora Starter Site.</p> <p>If you do already have a Drupal site, use git to clone it into place as the <code>codebase</code> folder.</p> <pre><code>cd /path/to/isle-dc\ngit clone https://github.com/your_org/your_repo codebase\n</code></pre> <p>Now you'll need to tell <code>isle-dc</code> to look for it by setting the <code>ENVIRONMENT</code> variable in your <code>.env</code> file. If you don't have one, copy over <code>sample.env</code> and name it <code>.env</code>. Then set</p> <pre><code>ENVIRONMENT=starter\n</code></pre> <p>You should also change the <code>COMPOSE_PROJECT_NAME</code> variable. This determines the name of the Docker containers and volumes that are created when you run <code>make starter</code>. If you leave this as the default you will need to be careful not to overwrite the containers with another install of <code>isle-dc</code> later. <pre><code>COMPOSE_PROJECT_NAME=isle-dc\n</code></pre></p> <p>If your site includes exported configuration from <code>drush config:export</code>, then you'll also need to set</p> <pre><code>INSTALL_EXISTING_CONFIG=true\nDRUPAL_INSTALL_PROFILE=minimal\n</code></pre> <p>Once you are ready, run</p> <pre><code>make starter\n</code></pre> <p>to install the Drupal site in your <code>codebase</code> folder and spin up all the other containers with it.</p> <p>Enjoy your Islandora instance!  Check out the basic usage documentation to see all the endpoints that are available and how to do things like start and stop Islandora. Your passwords, including the Drupal admin password, can be found in the <code>secrets/live</code> directory after you run <code>make starter</code>.</p>"},{"location":"installation/docker/isle-dc/docker-local/#demo-content","title":"Demo Content","text":"<p>To populate your site with some demo content, you can run <code>make demo_content</code>. This will import some sample objects into your Islandora site.</p>"},{"location":"installation/docker/isle-dc/docker-maintain-drupal/","title":"Maintaining Your Drupal Site","text":"<p>Drupal has a dedicated security team, and regularly produces updates to address security issues that are discovered.  You should always keep your Drupal site up to date so that you are protected against known vulnerabilities. Updating Drupal can be intimidating, but we have step-by-step instructions to help you do it safely.</p>"},{"location":"installation/docker/isle-dc/docker-maintain-drupal/#note-on-production-sites","title":"Note on Production Sites","text":"<p>Please note that maintaining Drupal should be done on your development site. For production sites, you should build an image from the <code>codebase</code> folder on your development machine, and run that image in production. For more information on this, please see the production install  instructions.</p>"},{"location":"installation/docker/isle-dc/docker-maintain-drupal/#running-commands","title":"Running commands","text":"<p>Once you have a <code>codebase</code> folder, how do you maintain it and keep it up to date?  The quick answer is \"the same way you maintain any Drupal site with Composer and Drush\"... with one small caveat. You most likely do not have PHP or Composer on your machine, and even if you do, you want to make sure you're using the exact same version that your Docker container is using.  So to ensure all the versions of things line up, we use Docker to execute Drush and Composer from the Drupal container.  The general template for running a command in your Drupal container looks like this:</p> <pre><code>docker compose exec -T drupal with-contenv bash -lc 'YOUR COMMAND'\n</code></pre> <p>You can also just shell into the Drupal container and run commands as well, just be aware that if you shut down your container for any reason, you'll lose your bash history.  If you want to shell in to run commands, drop the <code>-T</code> and <code>-lc 'YOUR COMMAND'</code> bits.</p> <pre><code>docker compose exec drupal with-contenv bash\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-maintain-drupal/#updating-your-drupal-site","title":"Updating your Drupal Site","text":"<p>Use Composer to update your site's modules and their dependencies. The working directory of the Drupal container is the Drupal root (a.k.a. <code>codebase</code>), so you don't need to <code>cd</code> into any other directory before running the command.  The following command will update all modules and their dependencies that are not pinned to specific versions.</p> <p><pre><code>docker compose exec -T drupal with-contenv bash -lc \"su nginx -s /bin/bash -c 'composer update -W'\"\n</code></pre> Note that we run this command as the nginx user. By default, commands are run as root, which  can cause some ownership issues when running Composer. By running this as nginx, we ensure that new files are owned by the nginx user.</p>"},{"location":"installation/docker/isle-dc/docker-maintain-drupal/#permission-issue","title":"Permission Issue","text":"<p>When running Composer commands you may come across the following error <pre><code>[ErrorException]\nfile_put_contents(/var/www/drupal/web/sites/default/settings.php): failed to open stream: Operation not permitted\n</code></pre> This means that Composer is not able to write to your settings.php file. If you run into this error, giving write permission to the nginx user should fix it.</p>"},{"location":"installation/docker/isle-dc/docker-maintain-drupal/#drupal-database-updates","title":"Drupal Database Updates","text":"<p>After getting the newest code, you'll want to use Drush to update the Drupal database and run any other update hooks that have been introduced.  However, YOU SHOULD BACK UP YOUR DATABASE BEFORE GOING ANY FURTHER. You never know when something will go wrong and you don't want to be stuck with an unusable database and no plan B.</p> <pre><code>make drupal-database-dump DEST=/path/to/dump.sql\n</code></pre> <p>Now you can safely update the Drupal database with Drush via</p> <pre><code>docker compose exec -T drupal with-contenv bash -lc 'drush updb'\n</code></pre> <p>If for any reason, something goes wrong, you can Restore the Drupal database at any time by running</p> <pre><code>make drupal-database-import SRC=/path/to/dump.sql\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-maintain-isle/","title":"Maintaining Your ISLE Infrastructure","text":"<p>You will regularly be updating your Drupal site as security patches and module updates are released. Less often, you will also need to update the rest of your Islandora installation.  ISLE makes this easy. In fact, it was specifically designed to streamline this process.</p> <p>Since Islandora is not a single piece of software, but instead many pieces of software working together in concert, maintaining all of it is a daunting task.  There's nginx, tomcat, karaf, etc... Then there's everything needed for the authentication layer and JWT keys.  Plus there's all the microservices.  You can see that all this adds up to a significant maintenance burden.</p> <p>Now imagine if all that time and effort spent on security updates and getting the newest versions could be boiled down to a handful of simple commands.  That's exactly what ISLE does!</p>"},{"location":"installation/docker/isle-dc/docker-maintain-isle/#updating-isle","title":"Updating ISLE","text":"<p>Updating</p> <p>Before we update ISLE we should pull the most recent version of the isle-dc repository. This ensures that our <code>docker-compose.yml</code> file has any new additions that the new version of ISLE will need.</p> <p>You may also want to check your <code>.env</code> file against the <code>sample.env</code> found in the repository to see if there are new variables you wish to make use of.</p> <p>Updating ISLE is easy.  When a new release is made available, you update the <code>TAG</code> variable in your <code>.env</code> file to the latest version. Suppose you are on ISLE 1.0.0, and ISLE 1.1.0 has been released. Then we would set</p> <pre><code>TAG=1.1.0\n</code></pre> <p>Before we update our <code>docker-compose.yml</code> file we want to stop the running containers with</p> <pre><code>make down\n</code></pre> <p>We'll then generate a new <code>docker-compose.yml</code> file that includes the new tag with</p> <pre><code>make -B docker-compose.yml\n</code></pre> <p>After that, we pull the new containers with</p> <pre><code>make pull\n</code></pre> <p>And finally we deploy the updated containers by running</p> <pre><code>make up\n</code></pre> <p>You can check that everything is running at the version you've specified with</p> <pre><code>docker ps -a\n</code></pre> <p>The version that's running can be confirmed by looking at the <code>IMAGE</code> column in the output.</p>"},{"location":"installation/docker/isle-dc/docker-maintain-isle/#major-version-updates","title":"Major Version Updates","text":"<p>Major version updates may require a bit more work after the new containers are up and running, if the new images are  running higher major versions of software. For example, if there has been an update to PHP or Solr.</p>"},{"location":"installation/docker/isle-dc/docker-maintain-isle/#solr","title":"Solr","text":"<p>When upgrading to a new major version of Solr, you need to regenerate a new set of config files. You will need to do this on both  your development site, and your production site.</p> <p>First, remove the old solr data. This will remove everything that has been indexed, so we will have to reindex our site in a later step.</p> <pre><code>docker compose exec -T solr with-contenv bash -lc 'rm -r server/solr/ISLANDORA'\n</code></pre> <p>Next, recreate our solr core with a new set of config files.</p> <pre><code>make solr-cores\n</code></pre> <p>Finally, we reindex our site.</p> <pre><code>make reindex-solr\n</code></pre>"},{"location":"installation/docker/isle-dc/docker-maintain-isle/#drupal","title":"Drupal","text":"<p>Drupal updates will be handled by your composer.json file, but you may require a certain version of ISLE in order to have the correct  version of PHP. Once you have the correct PHP version installed, you can update Drupal to a new major version in the same way you  normally update modules. It may be helpful to reference the Starter Site's composer.json file at  https://github.com/Islandora-Devops/islandora-starter-site/blob/main/composer.json</p> <p>Once you have done this on your development site, the process for your production site is the same as any other Drupal updates.</p>"},{"location":"installation/docker/isle-dc/docker-maintain-isle/#mariadb","title":"Mariadb","text":"<p>After updating Mariadb, you may need to run mariadb-upgrade inside your mariadb container, to update your system tables.  This should be safe to run any time, but it is a good idea to back up your database first, just in case.</p> <p>You can run this from your isle directory with <pre><code>docker compose exec mariadb mariadb-upgrade\n</code></pre></p>"},{"location":"installation/docker/isle-dc/docker-maintain-isle/#specific-update-notes","title":"Specific Update Notes","text":""},{"location":"installation/docker/isle-dc/docker-maintain-isle/#version-1x-to-2x","title":"Version 1.x to 2.x","text":"<p>Upgrading ISLE from 1.x to the next major version requires the TAG be set to 2.0.5 or higher. Once you create your containers  you will need to follow the above instructions for Mariadb, Solr, and Drupal.</p> <p>ISLE 2.0 bumps PHP up to version 8.1, which allows you to upgrade to Drupal 10.</p>"},{"location":"installation/docker/isle-dc/docker-troubleshooting/","title":"Troubleshooting","text":""},{"location":"installation/docker/isle-dc/docker-troubleshooting/#make-command-not-found","title":"Make command not found","text":"<p>If you get the error <code>bash: make: command not found</code> then you need to install GNU make. Run <code>sudo apt update</code> and <code>sudo apt install make</code> to install.</p>"},{"location":"installation/docker/isle-dc/docker-troubleshooting/#docker-versions","title":"Docker Versions","text":"<p>If you get an error such as: <code>ERROR: Version in \"./docker-compose.activemq.yml\" is unsupported.</code>, then you need to upgrade Docker. Enter the command <code>make clean</code> before re-attempting to <code>make demo</code>.</p>"},{"location":"installation/docker/isle-dc/docker-troubleshooting/#re-attempting-make-demo","title":"Re-attempting <code>make demo</code>","text":"<p>If <code>make</code> fails for any reason, enter <code>make clean</code> before attempting to <code>make</code> again. If not, you may see an error such as: <code>ERROR: Top level object in './docker-compose.yml' needs to be an object not '&lt;class 'NoneType'&gt;'.</code></p>"},{"location":"installation/docker/isle-dc/docker-troubleshooting/#docker-containers-exit-without-warning","title":"Docker containers exit without warning","text":"<p>If you notice some Docker containers drop (exited(0)), and (in Docker Desktop) the isle-dc app icon is yellow instead of green, try increasing the resources allocated to Docker (see note above).</p>"},{"location":"installation/docker/isle-dc/docker-troubleshooting/#connection-timed-out-mac","title":"Connection timed out (Mac).","text":"<p>If you are using Docker Desktop for Mac, and get timeout errors when spinning up the containers (during <code>docker-compose up -d</code> or during <code>make local</code>) such as this:</p> <pre><code>ERROR: for isle-dc_mariadb_1  UnixHTTPConnectionPool(host='localhost', port=None): Read timed out. (read timeout=480)\n</code></pre> <p>you can try quitting Docker completely (make sure there is no whale icon in your top toolbar - may need to select \"Quit\" from the whale icon itself) and then restart Docker.</p>"},{"location":"installation/docker/isle-dc/docker-troubleshooting/#504-bad-gateway","title":"504 Bad Gateway","text":"<p>If you get a white screen with a 504 Bad Gateway error, this means your containers haven't finished initializing themselves yet.  If you've waiting an appropriate amount of time (2-5 minutes), then there is most likely an error in a container's startup script.  Use <code>docker ps -a</code> to see which services have <code>Exited</code> status, and then tail their logs with <code>docker-compose logs service_name</code>.</p>"},{"location":"installation/docker/site-template/backup/","title":"Backups &amp; Transferring Data Between Sites","text":"<p>The following instructions describe how to back up and restore an islandora site. This is also used to transfer data between a development and production site, or to sync a staging site with a production site.</p> <p>Note that containers are named with a suffix of -dev or -prod depending on your environment. For example, backing up your development site\u2019s Drupal database requires running the command on the drupal-dev container, but backing up the production site\u2019s database requires running the command on the drupal-prod container. The following instructions are mostly written for development sites, but the same commands will work on production containers.</p> <p>Before attempting the following commands, you should familiarize yourself with running commands inside a container and with docker compose cp</p>"},{"location":"installation/docker/site-template/backup/#drupal-configuration","title":"Drupal Configuration","text":"<p>The typical use case of this is to export your drupal configuration files out of your development site\u2019s Drupal database and onto the host machine. This process lets you check your configuration into your git repository so you can import it into your production site.</p>"},{"location":"installation/docker/site-template/backup/#export","title":"Export","text":"<p>To export your development config run:</p> <pre><code>docker compose exec -T drupal-dev drush -l default config:export -y\n</code></pre> <p>Then commit and push your git repo so the new config files are included.</p>"},{"location":"installation/docker/site-template/backup/#import","title":"Import","text":"<p>To import your config to a production or staging site you first need to <code>git pull</code> the config files you pushed from your development site, then rebuild and restart your custom Drupal container.</p> <pre><code>git pull\ndocker compose --profile prod build\ndocker compose --profile prod down\ndocker compose --profile prod up -d\n</code></pre> <p>Once this is done, your config files will be included in the container. You can then import them by running</p> <pre><code>docker compose exec -T drupal-prod drush -l default config:import -y\n</code></pre>"},{"location":"installation/docker/site-template/backup/#drupal-database","title":"Drupal Database","text":"<p>The Drupal database contains all your Drupal settings and content. If you want to move configuration settings from development to production you should use the Drupal Configuration instructions above.</p> <p>These instructions can also be used to move your content from production to staging or development.</p>"},{"location":"installation/docker/site-template/backup/#back-up","title":"Back Up","text":"<p>Backing up the Drupal database involves doing a database dump in the drupal container:</p> <pre><code>docker compose exec -T drupal-dev with-contenv bash -lc 'mysqldump -u ${DRUPAL_DEFAULT_DB_USER} -p${DRUPAL_DEFAULT_DB_PASSWORD} -h mariadb ${DRUPAL_DEFAULT_DB_NAME} &gt; /tmp/dump.sql'\n</code></pre> <p>and then copying that dump from the container to the host machine:</p> <pre><code>docker compose cp drupal-dev:/tmp/dump.sql [path/on/host/dump.sql]\n</code></pre>"},{"location":"installation/docker/site-template/backup/#restore","title":"Restore","text":"<p>Restoring from a database dump requires copying the dump file into the drupal container:</p> <pre><code>docker compose cp [path-to/dump.sql] drupal-dev:/tmp/dump.sql\n</code></pre> <p>Then replacing the database with the dump:</p> <pre><code>docker compose exec -T drupal-dev with-contenv bash -lc 'chown root:root /tmp/dump.sql &amp;&amp; mysql -u ${DRUPAL_DEFAULT_DB_USER} -p${DRUPAL_DEFAULT_DB_PASSWORD} -h mariadb ${DRUPAL_DEFAULT_DB_NAME} &lt; /tmp/dump.sql'\n</code></pre> <p>And finally, rebuilding the Drupal cache:</p> <pre><code>docker compose exec drupal-dev drush cr\n</code></pre>"},{"location":"installation/docker/site-template/backup/#drupal-public-files","title":"Drupal Public Files","text":"<p>Drupal's public files contain any files used on static pages. This is also where your Islandora derivatives are stored, which includes FITS, thumbnails, etc.</p> <p>These instructions can also be used to move your content from production to staging or development.</p>"},{"location":"installation/docker/site-template/backup/#back-up_1","title":"Back Up","text":"<p>Drupal public files can be compressed to a tgz file in the Drupal container:</p> <pre><code>docker compose exec -T drupal-dev with-contenv bash -lc 'tar zcvf /tmp/public-files.tgz -C /var/www/drupal/web/sites/default/files .'\n</code></pre> <p>Then copied to the host machine:</p> <pre><code>docker compose cp drupal-dev:/tmp/public-files.tgz  [path/on/host/public-files.tgz]\n</code></pre>"},{"location":"installation/docker/site-template/backup/#restore_1","title":"Restore","text":"<p>Drupal files can be restored from a tgz file by copying them into the Drupal container:</p> <pre><code>docker compose cp public-files.tgz drupal-dev:/tmp/public-files.tgz\n</code></pre> <p>Then placed in the correct directory inside the Drupal volume:</p> <pre><code>docker compose exec -T drupal-dev with-contenv bash -lc 'tar zxvf /tmp/public-files.tgz -C /var/www/drupal/web/sites/default/files &amp;&amp; chown -R nginx:nginx /var/www/drupal/web/sites/default/files &amp;&amp; rm /tmp/public-files.tgz'\n</code></pre> <p>Note</p> <p>This will overwrite existing files if they have the same filename, but does not remove existing files otherwise. If you want to make sure that the public files directory does not contain anything but the newly imported files, you will want to empty the directory before copying the new files in.</p> <pre><code>docker compose exec -T drupal-dev with-contenv bash -lc 'rm -r /var/www/drupal/web/sites/default/files/*'\n</code></pre>"},{"location":"installation/docker/site-template/backup/#drupal-private-files","title":"Drupal Private Files","text":"<p>These instructions can also be used to move your content from production to staging or development.</p>"},{"location":"installation/docker/site-template/backup/#back-up_2","title":"Back Up","text":"<p>Drupal public files can be compressed to a tgz file in the Drupal container:</p> <pre><code>docker compose exec -T drupal-dev with-contenv bash -lc 'tar zcvf /tmp/private-files.tgz -C /var/www/drupal/private .'\n</code></pre> <p>Then copied to the host machine:</p> <pre><code>docker compose cp drupal-prod:/tmp/private-files.tgz [path/on/host/private-files.tgz]\n</code></pre>"},{"location":"installation/docker/site-template/backup/#restore_2","title":"Restore","text":"<p>Drupal files can be restored from a tgz file by copying them into the Drupal container:</p> <pre><code>docker compose cp private-files.tgz drupal-dev:/tmp/private-files.tgz\n</code></pre> <p>Then placed in the correct directory inside the Drupal volume:</p> <pre><code>docker compose exec -T drupal-dev with-contenv bash -lc 'tar zxvf /tmp/private-files.tgz -C /var/www/drupal/private &amp;&amp; chown -R nginx:nginx /var/www/drupal/private &amp;&amp; rm /tmp/private-files.tgz'\n</code></pre> <p>Note</p> <p>This will overwrite existing files if they have the same filename, but does not remove existing files otherwise. If you want to make sure that the private files directory does not contain anything but the newly imported files, you will want to empty the directory before copying the new files in.</p> <pre><code>docker compose exec -T drupal-dev with-contenv bash -lc 'rm -r /var/www/drupal/private/*'\n</code></pre>"},{"location":"installation/docker/site-template/backup/#fedora","title":"Fedora","text":"<p>Fedora 6 uses a file structure called OCFL to store files and metadata. The Fedora database is built based on this OCFL file structure, so we don't actually back up our fedora database. Instead, we back up the files and let Fedora rebuild the database based on them.</p> <p>Note</p> <p>These instructions involve moving the entirety of your Fedora data. For small sites this is fine, but you may find this becomes cumbersome as your site grows. You may wish to bind your oclf-root directory as a volume to eliminate the need to run the docker compose cp commands. </p>"},{"location":"installation/docker/site-template/backup/#back-up_3","title":"Back Up","text":"<p>To back up Fedora we create a .tgz file from the ocfl-root directory in the Fedora container:</p> <pre><code>docker compose exec -T fcrepo-dev with-contenv bash -lc 'tar zcvf /tmp/fcrepo-export.tgz -C /data/home/data/ocfl-root/ .'\n</code></pre> <p>Then we copy that file to the host machine:</p> <pre><code>docker compose cp fcrepo-dev:/tmp/fcrepo-export.tgz [path/on/host/fcrepo-export.tgz]\n</code></pre>"},{"location":"installation/docker/site-template/backup/#restore_3","title":"Restore","text":"<p>To restore our fedora database we need to copy the backup into the Fedora container:</p> <pre><code>docker compose cp [path-to/fcrepo-export.tgz] fcrepo-dev:/tmp/fcrepo-export.tgz\n</code></pre> <p>Empty the existing ocfl-root directory: <pre><code>docker compose exec -T fcrepo-dev bash -lc 'rm -r /data/home/data/ocfl-root/*'\n</code></pre></p> <p>Put our backup files in the ocfl-root directory:</p> <pre><code>docker compose exec -T fcrepo-dev with-contenv bash -lc 'tar zxvf /tmp/fcrepo-export.tgz -C /data/home/data/ocfl-root/ &amp;&amp; chown -R tomcat:tomcat /data/home/data/ocfl-root/ &amp;&amp; rm /tmp/fcrepo-export.tgz'\n</code></pre> <p>Drop the existing Fedora database:</p> <pre><code>docker compose exec -T mariadb-dev bash -lc 'mysql -e \"drop database fcrepo;\"'\n</code></pre> <p>Restart Fedora to reinitialize the database from the ocfl-root directory:</p> <pre><code>docker compose --profile dev restart fcrepo-dev\n</code></pre> <p>Note</p> <p>It may take a while for the database to be restored. In the meantime, you may see error messages that say Fedora is not connected.</p>"},{"location":"installation/docker/site-template/docker-modifications/","title":"Docker Modifications","text":"<p>ISLE Site Template provides you with a <code>docker-compose.yml</code> file that allows you to get an Islandora site running quickly, but it makes some assumptions about how the site will run, and which containers you will use. Once you have your site running you may want to make some modifications to the default setup that the Site Template uses.</p>"},{"location":"installation/docker/site-template/docker-modifications/#adding-editing-environment-variables","title":"Adding / Editing Environment Variables","text":"<p>Islandora Buildkit provides several environment variables that can be modified when creating containers.</p> <p>Please see the README for the different buildkit images to see what is available:</p> <ul> <li>ActiveMQ</li> <li>Alpaca</li> <li>Blazegraph</li> <li>Cantaloupe</li> <li>Code Server</li> <li>Crayfits</li> <li>Drupal</li> <li>Fedora</li> <li>Fits</li> <li>Homarus</li> <li>Houdini</li> <li>Hypercube</li> <li>MariaDB</li> <li>Milliner</li> <li>Solr</li> </ul> <p>You can add these environment variables to your docker-compose.yml in order to change their values. For example, if you want to increase the PHP memory limit in your production Drupal container, you can do so like this:</p> <pre><code>    drupal-prod:\n        &lt;&lt;: [*prod, *drupal]\n        Environment:\n            PHP_MEMORY_LIMIT: 1G\n</code></pre>"},{"location":"installation/docker/site-template/docker-modifications/#removing-services","title":"Removing Services","text":"<p>You may not want to use all the images that are included in the Site Template\u2019s <code>docker-compose.yml</code>. You can remove containers by deleting their sections in the docker-compose.yml file.</p> <p>For example, to remove Fedora, you would delete the services called fcrepo-dev and fcrepo-prod.</p> <p>Depending on the container you are removing, you may need to delete references to it as well. For example, some containers are referenced by others in the <code>depends_on</code> field. You will need to also delete these references, so if you delete the <code>fedora-dev</code> service, you will need to remove the rule that <code>traefik-dev</code> depends on it.</p> <p>If you are removing a container which is referenced by Drupal, ensure that you update Drupal as well (e.g. if removing Fedora, ensure your Media's files are not writing to the Fedora filesystem).</p> <p>After doing <code>docker compose down</code>, run <code>docker compose up -d --remove-orphans</code> to remove the containers you removed from the docker-compose.yml file. </p>"},{"location":"installation/docker/site-template/docker-modifications/#hiding-fedora-from-the-public","title":"Hiding Fedora From the Public","text":"<p>By default, your Fedora repo will be available to the public at <code>fcrepo.${DOMAIN}</code>. If you do not want to expose your Fedora, you can stop this URL from working by disabling it via Traefik in your <code>docker-compose.yml</code>. To do this, you need to add the <code>traefik-disable</code> label to <code>fcrepo-prod</code> like this,</p> <pre><code>    fcrepo-prod:\n&lt;&lt;: [*prod, *fcrepo]\nenvironment:\n&lt;&lt;: [*fcrepo-environment]\nFCREPO_ALLOW_EXTERNAL_DRUPAL: \"https://${DOMAIN}/\"\nlabels:\n&lt;&lt;: [*traefik-disable, *fcrepo-labels]\n</code></pre> <p>If you have done this, you can also remove the DNS records that point this URL to your production server.</p> <p>Finally, you will have to change the URL that Drupal uses to access the Fedora repo. This can be found in your <code>docker-compose.yml</code> in the <code>environment</code> section for <code>drupal-prod</code>, and should be changed to:</p> <pre><code>DRUPAL_DEFAULT_FCREPO_URL: \"http://fcrepo:8080/fcrepo/rest/\"\n</code></pre>"},{"location":"installation/docker/site-template/setup/","title":"Initial Setup","text":"<p>Instructions for creating your site can be found in the project's README file</p> <p>This page lists a few things to note about the process, but is not meant to be a replacement for the instructions in the README file.</p>"},{"location":"installation/docker/site-template/setup/#custom-drupal-image","title":"Custom Drupal Image","text":"<p>ISLE Site Template uses a custom Drupal image that you build on top of the provided Islandora Drupal image. This means you will not be running the islandora/drupal image directly, but the provided Dockerfile will use it to build your image.</p> <p>Note for those coming from ISLE-DC</p> <p>In ISLE-DC, we only use a custom image in production, but in the ISLE Site Template, we use it for both.</p> <p>Building your custom Drupal image is done by running</p> <p><code>docker compose --profile dev build</code> for your development image</p> <p>or</p> <p><code>docker compose --profile prod build</code> for your production image</p> <p>This builds the docker image based on the Dockerfile in the <code>drupal</code> directory, which uses your composer files to pull the Drupal modules it needs into the image. Because the Dockerfile and composer files are part of the git repository, you can build your Drupal image locally, or on your production server.</p> <p>This documentation assumes you will be building your production image on the production server. If you do it this way, it is not necessary to push your image to a container registry. Instead you just pull your git repository anytime you make changes to your composer files, and run <code>docker compose build</code> again.</p> <p>Using a Container Registry</p> <p>If you want to build your production images somewhere other than on your production server, you can do so. The .env file allows you to set your image repository URL, which will allow you to push / pull your Drupal image to / from your container registry. If you do this, you can then run <code>docker compose pull</code> instead of <code>docker compose build</code> on your production server, to pull the already built image to that server.</p> <p>For more information please see the documentation on docker compose pull and docker compose build</p>"},{"location":"installation/docker/site-template/setup/#adding-a-staging-site","title":"Adding a Staging Site","text":"<p>The process for setting up a staging site is the same as production, but you will need to use a different URL. Since the URL is set in the <code>.env</code> file, which is checked into your git repository, you may wish to use <code>docker-compose.override.yml</code> for this. In <code>docker-compose.override.yml</code> you will need to override anywhere the <code>DOMAIN</code> variable is used, for example:</p> <pre><code>services:\n    cantaloupe-prod:\n        labels:\n            traefik.http.routers.cantaloupe_http.rule: &amp;traefik-host-cantaloupe-prod Host(`staging-url.com`) &amp;&amp; PathPrefix(`/cantaloupe`)\n            traefik.http.routers.cantaloupe_https.rule: *traefik-host-cantaloupe-prod\n    drupal-prod:\n        environment:\n            DRUPAL_DEFAULT_CANTALOUPE_URL: \"https://staging-url.com/cantaloupe/iiif/2\"\n            DRUPAL_DEFAULT_SITE_URL: \"staging-url.com\"\n            DRUPAL_DRUSH_URI: \"https://staging-url.com\"\n        labels:\n            traefik.http.routers.drupal_http.rule: &amp;traefik-host-drupal-prod Host(`staging-url.com`)\n            traefik.http.routers.drupal_https.rule: *traefik-host-drupal-prod\n    fcrepo-prod:\n        environment:\n            FCREPO_ALLOW_EXTERNAL_DRUPAL: \"https://staging-url.com\"\n        labels:\n            traefik.http.routers.fcrepo_http.rule: &amp;traefik-host-fcrepo-prod Host(`fcrepo.staging-url.com`)\n            traefik.http.routers.fcrepo_https.rule: *traefik-host-fcrepo-prod\n    traefik-prod:\n        networks:\n            default:\n                aliases:\n                    # Allow services to connect on the same name/port as the outside.\n                    - \"staging-url.com\" # Drupal is at the root domain.\n                    - \"fcrepo.staging-url.com\"\n</code></pre> <p>Restricting Access to Staging Servers</p> <p>Using letsencrypt to generate your certs requires port 80 to be accessible on your server. If you would like to keep your site private by limiting access to certain IP addresses, you can still firewall port 443, but you will have to leave port 80 open. Alternatively, you can use Traefik's IPAllowList middleware to restrict access to outside IPs.</p>"},{"location":"installation/docker/site-template/setup/#adding-demo-content","title":"Adding Demo Content","text":"<p>If you are spinning up a new site for testing, you can add some demo content to your site by running <pre><code>[ -d \"islandora_workbench\" ] || (git clone https://github.com/mjordan/islandora_workbench)\n\n[ -d \"islandora_workbench/islandora_demo_objects\" ] || git clone https://github.com/Islandora-Devops/islandora_demo_objects.git islandora_workbench/islandora_demo_objects\n\ncd islandora_workbench &amp;&amp; docker build --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -t workbench-docker .; cd ..\n\nperl -i -pe 's#^host.*#host: \"https://islandora.dev\"#g' islandora_workbench/islandora_demo_objects/create_islandora_objects.yml\n\nperl -i -pe 's#^input_dir.*#input_dir: \"islandora_demo_objects\"#g' islandora_workbench/islandora_demo_objects/create_islandora_objects.yml\n\nperl -i -pe 's#^input_csv.*#input_csv: \"create_islandora_objects.csv\"#g' islandora_workbench/islandora_demo_objects/create_islandora_objects.yml\n\ngrep secure_ssl_only islandora_workbench/islandora_demo_objects/create_islandora_objects.yml || echo 'secure_ssl_only: false' &gt;&gt; islandora_workbench/islandora_demo_objects/create_islandora_objects.yml\n\ncd islandora_workbench &amp;&amp; docker run -it --rm --network=\"host\" -v .:/workbench --name my-running-workbench workbench-docker bash -lc \"./workbench --config islandora_demo_objects/create_islandora_objects.yml\"; cd ..\n</code></pre></p>"},{"location":"installation/docker/site-template/setup/#custom-themes-modules","title":"Custom Themes &amp; Modules","text":"<p>You may wish to copy themes and modules into your project directly, instead of using Composer to manage them. For example, if you are creating your own theme instead of using a contributed one.</p> <p>Isle Site Template provides directories at <code>drupal/rootfs/var/www/drupal/web/modules/custom</code> and <code>drupal/rootfs/var/www/drupal/web/themes/custom</code> for you to add your custom themes and modules.</p> <p>These directories are mounted in development, so any changes to them will be shared between your host machine and your Drupal container.</p> <p>In production, these themes and modules will be included when the Drupal image is built.</p>"},{"location":"installation/docker/site-template/site-template/","title":"ISLE Site Template","text":""},{"location":"installation/docker/site-template/site-template/#what-is-the-isle-site-template","title":"What is the ISLE Site Template?","text":"<p>The ISLE Site Template is a system for installing Islandora on Docker. As with ISLE-DC, it uses Docker Compose to orchestrate the installation of all the different services (Docker containers) that make up Islandora. Unlike ISLE-DC, in ISLE Site Template you use Docker Compose commands directly, helping you to get familiar with the kinds of commands that will be a key part of running and maintaining Islandora. </p>"},{"location":"installation/docker/site-template/site-template/#usage","title":"Usage","text":"<ol> <li> <p>Do not clone the Isle Site Template!</p> <ul> <li>Unlike most other repositories we provide, the Isle Site Template is not   meant to be cloned or forked. Rather, it can be downloaded using <code>curl</code> and installed either manually or automatically.</li> </ul> </li> <li> <p>Instead, follow the instructions in the ISLE Site Template's <code>README.md</code> and <code>README.template.md</code> files.</p> <ul> <li>Instructions are provided both for <code>dev</code> and <code>prod</code> environments, with   different services available on each.</li> </ul> </li> <li> <p>During installation, you will install a copy of the Islandora Starter Site.</p> <ul> <li>Though, if you select the manual installation option, you can change that   out for a different base composer project. This will form the basis of your Drupal site. If you don't have a custom version, we recommend using the Islandora Starter Site (and it's installed automatically during the automatic install).</li> </ul> </li> <li> <p>Customizing your site can be persisted to your own repo.</p> <ul> <li>In the process of setting you the ISLE Site Template, you are encouraged   to create a custom Git repository for this project. When you do, you can save your changes to several components of your own site, for example the site name in Docker, which services you have running, and all changes made to your entire Drupal site configuration. </li> </ul> </li> </ol>"},{"location":"installation/docker/site-template/updating/","title":"Updating","text":"<p>The following sections describe how to keep your Islandora install up to date with current versions of Drupal modules and Docker images.</p>"},{"location":"installation/docker/site-template/updating/#updating-isle-buildkit-islandora-docker-images","title":"Updating Isle Buildkit (Islandora Docker Images)","text":"<p>Updating to a new version of Isle Buildkit is done by setting the ISLANDORA_TAG variable in your .env file. Once you have updated the .env file, you need to pull the new Islandora images, and rebuild your custom Drupal image from the specified Drupal image.</p> <p>For example, to upgrade from Buildkit 2.0.0 to 3.0.0 you would do the following steps:</p> <ol> <li> <p>Change your .env file to say ISLANDORA_TAG=3.0.0</p> </li> <li> <p>Stop your Docker containers</p> <p><code>docker compose --profile dev down</code></p> </li> <li> <p>Pull the new Docker images (except the Drupal image)</p> <p><code>docker compose --profile dev pull --ignore-buildable --ignore-pull-failures</code></p> </li> <li> <p>Build your custom Drupal image</p> <p><code>docker compose --profile dev build</code></p> </li> <li> <p>Start your containers from the new images</p> <p><code>docker compose --profile dev up -d</code></p> </li> </ol> <p>Once you have upgraded your images, you may need to perform extra steps for Solr and Mariadb, depending on whether these have new versions in the new images. </p> <p>Production Sites</p> <p>Upgrading a production site works the same way, just replace <code>dev</code> with <code>prod</code> in the above instructions.</p>"},{"location":"installation/docker/site-template/updating/#solr","title":"Solr","text":"<p>You may need to regenerate your Solr configs if Solr has been updated to a new version, or when the Search API Solr Drupal module has been updated. If you visit /admin/config/search/search-api/server/default_solr_server on your Islandora site it will tell you if the configs need to be updated.</p> <p>To generate new configs perform the following steps:</p> <ol> <li> <p>Remove existing solr configs</p> <p><code>docker compose exec -T solr-dev with-contenv bash -lc 'rm -r server/solr/default/*'</code></p> </li> <li> <p>Restart the Solr container</p> <p><code>docker compose --profile dev restart solr-dev</code></p> </li> <li> <p>Recreate solr configs for new solr versions</p> <p><code>docker compose exec -T drupal-dev with-contenv bash -lc \"for_all_sites create_solr_core_with_default_config\"</code></p> </li> <li> <p>Reindex Solr through the admin page or via Drush </p> </li> </ol>"},{"location":"installation/docker/site-template/updating/#mariadb","title":"MariaDB","text":"<p>After updating MariaDB, you may need to run mariadb-upgrade inside your MariaDB container, to update your system tables. This should be safe to run any time, but it is a good idea to back up your database first, just in case.</p> <p>You can run this with</p> <p><code>docker compose exec mariadb-dev mariadb-upgrade</code></p>"},{"location":"installation/docker/site-template/updating/#updating-traefik","title":"Updating Traefik","text":"<p>Traefik is not updated with the other buildkit images. It is recommended that you periodically update Traefik by changing the image version in your docker-compose.yml file to the current version in use by Isle Site Template</p>"},{"location":"installation/docker/site-template/updating/#updating-drupal-modules","title":"Updating Drupal Modules","text":"<p>Drupal updates are performed through composer on your development site. Once the modules have been added/removed/updated, your <code>composer.json</code> and <code>composer.lock</code> files can be checked into your git repository and you can rebuild your production Drupal container with the new files.</p>"},{"location":"installation/docker/site-template/updating/#development","title":"Development","text":"<p>Composer commands need to run in your Drupal container. For example:</p> <p>\u200b\u200b<code>docker compose exec drupal-dev composer update -W</code></p> <p>Or </p> <p><code>docker compose exec drupal-dev composer require 'drupal/islandora:^2.11'</code></p> <p>Running database updates is also done in the container like this:</p> <p><code>docker compose exec drupal-dev drush updb</code></p> <p>Note</p> <p>You should backup your database before running database updates</p> <p>If you are enabling or uninstalling modules, you will also need to export your Drupal configuration.</p> <p>Once you have finished your composer changes you can commit and push your repository with the new <code>composer.json</code> and <code>composer.lock</code> changes.</p>"},{"location":"installation/docker/site-template/updating/#production","title":"Production","text":"<p>First you will <code>git pull</code> to get the <code>composer.json</code> and <code>composer.lock</code> changes you made in development.</p> <p>Next you build your Drupal image again, which will install the modules specified in those files:</p> <p><code>docker compose --profile prod build</code></p> <p>Then you stop and start your containers to get the new image:</p> <p><code>docker compose --profile prod down</code></p> <p><code>docker compose --profile prod up -d</code></p> <p>And if necessary, run database updates:</p> <p><code>docker compose exec drupal-prod drush updb</code></p>"},{"location":"installation/manual/configuring-drupal/","title":"Configuring Drupal","text":"<p>Needs Maintenance</p> <p>The manual installation documentation is in need of attention. We are aware that some components no longer work as documented here. If you are interested in helping us improve the documentation, please see Contributing.</p> <p>After all of the above pieces are in place, installed, configured, started, and otherwise prepared, the last thing we need to do is to finally configure the front-end Drupal instance to wire all the installed components together.</p>"},{"location":"installation/manual/configuring-drupal/#drupal-pre-configuration","title":"Drupal Pre-Configuration","text":""},{"location":"installation/manual/configuring-drupal/#settingsphp","title":"<code>settings.php</code>","text":"<p>Notice</p> <p>By default, <code>settings.php</code> is read-only for all users. It should be made writable while this pre-configuration is being done, then set back to <code>444</code> afterwards.</p> <p>Some additional settings will need to be established in your default <code>settings.php</code> before Drupal-side configuration can occur.</p> <p>The below configuration will establish <code>localhost</code> as a trusted host pattern, but on production sites this will need to be expanded to include the actual host patterns used by the site.</p> <p><code>/opt/drupal/web/sites/default/settings.php</code></p> <p>Before (at around line 789): <pre><code>'driver' =&gt; 'mysql',\n);\n</code></pre></p> <p>After: <pre><code>'driver' =&gt; 'mysql',\n);\n\n$settings['trusted_host_patterns'] = [\n  'localhost',\n];\n\n$settings['flysystem'] = [\n  'fedora' =&gt; [\n    'driver' =&gt; 'fedora',\n    'config' =&gt; [\n      'root' =&gt; 'http://localhost:8080/fcrepo/rest/',\n    ],\n  ],\n];\n</code></pre></p> <p>Once this is done, refresh the cache to take hold of the new settings.</p> <pre><code>cd /opt/drupal\ndrush -y cr\n</code></pre>"},{"location":"installation/manual/configuring-drupal/#islandora","title":"Islandora","text":"<p>Skip this by using the Islandora Starter Site</p> <p>The Islandora Starter Site, which was presented as an option in the \"Installing Composer, Drush, and Drupal\" step, installs Islandora and other modules and configures them, allowing you to skip this section. You may want to use this manual method in the case where you want to pick and choose which Islandora modules you use.</p>"},{"location":"installation/manual/configuring-drupal/#downloading-islandora","title":"Downloading Islandora","text":"<p>The Islandora Drupal module contains the core code to create a repository ecosystem in a Drupal environment. It also includes several submodules; of importance to us is <code>islandora_core_feature</code>, which contains the key configurations that allow you to use Islandora features.</p> <p>Take note of some of the other comments in the below bash script for an idea of what the other components are expected, and which may be considered optional.</p> <pre><code>cd /opt/drupal\n# Since islandora_defaults is near the bottom of the dependency chain, requiring\n# it will get most of the modules and libraries we need to deploy a standard\n# Islandora site.\nsudo -u www-data composer require \"drupal/flysystem:^2.0@alpha\"\nsudo -u www-data composer require \"islandora/islandora:^2.4\"\nsudo -u www-data composer require \"islandora/controlled_access_terms:^2\"\nsudo -u www-data composer require \"islandora/openseadragon:^2\"\n# These can be considered important or required depending on your site's\n# requirements; some of them represent dependencies of Islandora submodules.\nsudo -u www-data composer require \"drupal/pdf:1.1\"\nsudo -u www-data composer require \"drupal/rest_oai_pmh:^2.0@beta\"\nsudo -u www-data composer require \"drupal/search_api_solr:^4.2\"\nsudo -u www-data composer require \"drupal/facets:^2\"\nsudo -u www-data composer require \"drupal/content_browser:^1.0@alpha\" ## TODO do we need this?\nsudo -u www-data composer require \"drupal/field_permissions:^1\"\nsudo -u www-data composer require \"drupal/transliterate_filenames:^2.0\"\n# These tend to be good to enable for a development environment, or just for a\n# higher quality of life when managing Islandora. That being said, devel should\n# NEVER be enabled on a production environment, as it intentionally gives the\n# user tools that compromise the security of a site.\nsudo -u www-data composer require drupal/restui:^1.21\nsudo -u www-data composer require drupal/console:~1.0\nsudo -u www-data composer require drupal/devel:^2.0\nsudo -u www-data composer require drupal/admin_toolbar:^2.0\n</code></pre>"},{"location":"installation/manual/configuring-drupal/#enabling-downloaded-components","title":"Enabling Downloaded Components","text":"<p>Components we've now downloaded using <code>composer require</code> can be enabled simultaneously via <code>drush</code>, which will ensure they are installed in the correct dependent order. Enabling <code>islandora_defaults</code> will also ensure all content types and configurations are set up in Islandora. The installation process for all of these modules will likely take some time.</p> <p>Notice</p> <p>This list of modules assumes that all of the above components were downloaded using <code>composer require</code>; if this is not the case, you may need to pare down this list manually. It also includes <code>devel</code>, which again, should not be enabled on production sites.</p> <pre><code>cd /opt/drupal\ndrush -y en rdf responsive_image devel syslog serialization basic_auth rest restui search_api_solr facets content_browser pdf admin_toolbar controlled_access_terms_defaults islandora_breadcrumbs islandora_iiif islandora_oaipmh\n# After all of this, rebuild the cache.\ndrush -y cr\n</code></pre>"},{"location":"installation/manual/configuring-drupal/#adding-a-jwt-configuration-to-drupal","title":"Adding a JWT Configuration to Drupal","text":"<p>To allow our installation to talk to other services via Syn, we need to establish a Drupal-side JWT configuration using the keys we generated at that time.</p> <p>Log onto your site as an administrator at <code>/user</code>, then navigate to <code>/admin/config/system/keys/add</code>. Some of the settings here are unimportant, but pay close attention to the Key type, which should match the key we created earlier (an RSA key), and the File location, which should be the ultimate location of the key we created for Syn on the filesystem, <code>/opt/keys/syn_private.key</code>.</p> <p></p> <p>Click Save to create the key.</p> <p>Once this key is created, navigate to <code>/admin/config/system/jwt</code> to select the key you just created from the list. Note that before the key will show up in the Private Key list, you need to select that key's type in the Algorithm section, namely <code>RSASSA-PKCS1-v1_5 using SHA-256 (RS256)</code>.</p> <p></p> <p>Click Save configuration to establish this as the JWT key configuration.</p>"},{"location":"installation/manual/configuring-drupal/#configuring-islandora","title":"Configuring Islandora","text":"<p>Navigate to the Islandora core configuration page at <code>/admin/config/islandora/core</code> to set up the core configuration to connect to Gemini. Of note here, the Gemini URL will need to be established to facilitate the connection to Fedora, and the appropriate Bundles with Gemini URI pseudo field types will need to be checked off.</p> <p>Notice</p> <p>Any other Drupal content types you wish to synchronize with Fedora should also be checked off here.</p> <p></p>"},{"location":"installation/manual/configuring-drupal/#configuring-islandora-iiif","title":"Configuring Islandora IIIF","text":"<p>Navigate to <code>/admin/config/islandora/iiif</code> to ensure that Islandora IIIF is pointing to our Cantaloupe server.</p> <p></p> <p>Next, configure OpenSeadragon by navigating to <code>/admin/config/media/openseadragon</code> and ensuring everything is set up properly.</p> <p></p>"},{"location":"installation/manual/configuring-drupal/#establishing-flysystem-as-the-default-download-method","title":"Establishing Flysystem as the Default Download Method","text":"<p>Navigate to <code>/admin/config/media/file-system</code> to set the Default download method to the one we created in our <code>settings.php</code>.</p> <p></p>"},{"location":"installation/manual/configuring-drupal/#giving-the-administrative-user-the-fedoraadmin-role","title":"Giving the Administrative User the <code>fedoraAdmin</code> Role","text":"<p>In order for data to be pushed back to Fedora, the site administrative user needs the <code>fedoraAdmin</code> role.</p> <pre><code>cd /opt/drupal\nsudo -u www-data drush -y urol \"fedoraadmin\" islandora\n</code></pre>"},{"location":"installation/manual/configuring-drupal/#running-feature-migrations","title":"Running Feature Migrations","text":"<p>Finally, to get everything up and running, run the Islandora Core Features and Islandora Defaults migrations.</p> <pre><code>cd /opt/drupal\nsudo -u www-data drush -y -l localhost --userid=1 mim --group=islandora\n</code></pre>"},{"location":"installation/manual/configuring-drupal/#enabling-eva-views","title":"Enabling EVA Views","text":"<p>Some views provided by Islandora are not enabled by default.</p> <pre><code>cd /opt/drupal\ndrush -y views:enable display_media\n</code></pre>"},{"location":"installation/manual/installing-alpaca/","title":"Installing ActiveMQ and Alpaca","text":"<p>Karaf no longer needed</p> <p>You no longer need to install Karaf. We no longer do this, we just deploy the java apps. </p>"},{"location":"installation/manual/installing-alpaca/#in-this-section-we-will-install","title":"In this section, we will install:","text":"<ul> <li>Apache ActiveMQ, a messaging server that will be used to handle communication between Alpaca and other components</li> <li>Islandora/Alpaca, Java middleware that handle communication between various components of Islandora.</li> </ul>"},{"location":"installation/manual/installing-alpaca/#installing-activemq","title":"Installing ActiveMQ","text":"<p>Some users have been able to install ActiveMQ from the standard package repositories. Others, however, have needed to install it manually.</p>"},{"location":"installation/manual/installing-alpaca/#option-1-system-provided-packages","title":"Option 1: System Provided Packages","text":"<pre><code>sudo apt-get -y install activemq\n</code></pre> <p>This will give us:</p> <ul> <li>A base configuration at <code>/var/lib/activemq/conf</code></li> <li>A data storage directory at <code>/var/lib/activemq/data</code></li> <li>The base ActiveMQ installation at <code>/usr/share/activemq</code></li> <li>An <code>activemq</code> service that will be run on boot</li> <li>A user, <code>activemq</code>, who will be in charge of the ActiveMQ service</li> </ul> <p>Note the port used by ActiveMQ as this will be added to the JMS setting in the alpaca config below.</p> <pre><code>sudo apt-cache policy activemq\n</code></pre> <p>Write down the version listed under <code>Installed:</code>.</p>"},{"location":"installation/manual/installing-alpaca/#option-2-manual-install","title":"Option 2: Manual Install","text":"<p>Git the latest ActiveMQ 5.x version number from https://archive.apache.org/dist/activemq which will be put in place of <code>[ACTIVEMQ_VERSION_NUMBER]</code>.</p> <pre><code>cd /opt\nsudo wget http://archive.apache.org/dist/activemq/[ACTIVEMQ_VERSION_NUMBER]/apache-activemq-[ACTIVEMQ_VERSION_NUMBER]-bin.tar.gz\nsudo tar -xvzf apache-activemq-[ACTIVEMQ_VERSION_NUMBER]-bin.tar.gz\nsudo mv apache-activemq-[ACTIVEMQ_VERSION_NUMBER] /opt/activemq\nsudo addgroup --quiet --system activemq\nsudo adduser --quiet --system --ingroup activemq --no-create-home --disabled-password activemq\nsudo chown -R activemq:activemq /opt/activemq\nsudo rm -R apache-activemq-[ACTIVEMQ_VERSION_NUMBER]-bin.tar.gz\n</code></pre> <p>Add ActiveMQ as a service: `/etc/systemd/system/activemq.service | root:root/644 <pre><code>[Unit]\nDescription=Apache ActiveMQ\nAfter=network.target\n\n[Service]\nType=forking\nUser=activemq\nGroup=activemq\n\nExecStart=/opt/activemq/bin/activemq start\nExecStop=/opt/activemq/bin/activemq stop\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Update the WebConsolePort host property settings in <code>/opt/activemq/conf/jetty.xml</code> from <code>&lt;property name=\"host\" value=\"127.0.0.1\"/&gt;</code> to <code>&lt;property name=\"host\" value=\"0.0.0.0\"/&gt;</code> so that you can access the dashboard from outside the local machine.</p> <p>Optionally, change the dashboard user credentials in <code>/opt/activemq/conf/users.properties</code>.</p> <p>Security Warning</p> <p>Updating the web console port and user properties are potential security holes. It is best to restrict the host setting and create a more secure username/password combination for production.</p> <p>Set the service to start on machine startup and start it up: <pre><code>sudo systemctl daemon-reload\nsudo systemctl start activemq\nsudo systemctl enable activemq\nsudo systemctl status activemq\nsudo systemctl restart activemq\nsudo apt-cache policy activemq   # note version number\n</code></pre></p> <p>The service should now be available at <code>http://localhost:8161/</code></p>"},{"location":"installation/manual/installing-alpaca/#installing-alpaca","title":"Installing Alpaca","text":"<p>Install Java 11+ if you haven't already.</p> <p>Make a directory for Alpaca and download the latest version of Alpaca from the Maven repository. E.g. <pre><code>sudo mkdir /opt/alpaca\ncd /opt/alpaca\nsudo curl -L https://repo1.maven.org/maven2/ca/islandora/alpaca/islandora-alpaca-app/2.2.0/islandora-alpaca-app-2.2.0-all.jar -o alpaca.jar\n</code></pre></p>"},{"location":"installation/manual/installing-alpaca/#configuration","title":"Configuration","text":"<p>Alpaca is made up of several services, each of these can be enabled or disabled individually.</p> <p>Alpaca takes an external file to configure its behaviour.</p> <p>Look at the <code>example.properties</code> file to see some example settings.</p> <p>The properties are:</p> <p><pre><code># Common options\nerror.maxRedeliveries=5\n</code></pre> This defines how many times to retry a message before failing completely.</p> <p>There are also common ActiveMQ properties to setup the connection.</p> <pre><code># ActiveMQ options\njms.brokerUrl=tcp://localhost:61616\n</code></pre> <p>This defines the url to the ActiveMQ broker which you installed earlier.</p> <p><pre><code>jms.username=\njms.password=\n</code></pre> This defines the login credentials (if required)</p> <p><pre><code>jms.connections=10\n</code></pre> This defines the pool of connections to the ActiveMQ instance.</p>"},{"location":"installation/manual/installing-alpaca/#islandora-indexing-fcrepo","title":"islandora-indexing-fcrepo","text":"<p>This service manages a Drupal node into a corresponding Fedora resource.</p> <p>It's properties are:</p> <pre><code># Fcrepo indexer options\nfcrepo.indexer.enabled=true\n</code></pre> <p>This defines whether the Fedora indexer is enabled or not.</p> <pre><code>fcrepo.indexer.node=queue:islandora-indexing-fcrepo-content\nfcrepo.indexer.delete=queue:islandora-indexing-fcrepo-delete\nfcrepo.indexer.media=queue:islandora-indexing-fcrepo-media\nfcrepo.indexer.external=queue:islandora-indexing-fcrepo-file-external\n</code></pre> <p>These define the various queues to listen on for the indexing/deletion messages. The part after <code>queue:</code> should match your Islandora instance \"Actions\".</p> <p><pre><code>fcrepo.indexer.milliner.baseUrl=http://localhost/milliner\n</code></pre> This defines the location of your Milliner microservice.</p> <p><pre><code>fcrepo.indexer.concurrent-consumers=-1\nfcrepo.indexer.max-concurrent-consumers=-1\n</code></pre> These define the default number of concurrent consumers and maximum number of concurrent consumers working off your ActiveMQ instance. A value of <code>-1</code> means no setting is applied.</p> <pre><code>fcrepo.indexer.async-consumer=false\n</code></pre> <p>This property allows the concurrent consumers to process concurrently; otherwise, the consumers will wait to the previous message has been processed before executing.</p>"},{"location":"installation/manual/installing-alpaca/#islandora-indexing-triplestore","title":"islandora-indexing-triplestore","text":"<p>This service indexes the Drupal node into the configured triplestore</p> <p>It's properties are:</p> <pre><code># Triplestore indexer options\ntriplestore.indexer.enabled=true\n</code></pre> <p>This defines whether the Triplestore indexer is enabled or not.</p> <pre><code>triplestore.index.stream=queue:islandora-indexing-triplestore-index\ntriplestore.delete.stream=queue:islandora-indexing-triplestore-delete\n</code></pre> <p>These define the various queues to listen on for the indexing/deletion messages. The part after <code>queue:</code> should match your Islandora instance \"Actions\".</p> <pre><code>triplestore.baseUrl=http://localhost:8080/bigdata/namespace/kb/sparql\n</code></pre> <p>This defines the location of your triplestore's SPARQL update endpoint.</p> <pre><code>triplestore.indexer.concurrent-consumers=-1\ntriplestore.indexer.max-concurrent-consumers=-1\n</code></pre> <p>These define the default number of concurrent consumers and maximum number of concurrent consumers working off your ActiveMQ instance. A value of <code>-1</code> means no setting is applied.</p> <pre><code>triplestore.indexer.async-consumer=false\n</code></pre> <p>This property allows the concurrent consumers to process concurrently; otherwise, the consumers will wait to the previous message has been processed before executing.</p>"},{"location":"installation/manual/installing-alpaca/#islandora-connector-derivative","title":"islandora-connector-derivative","text":"<p>This service is used to configure an external microservice. This service will deploy multiple copies of its routes with different configured inputs and outputs based on properties.</p> <p>The routes to be configured are defined with the property <code>derivative.systems.installed</code> which expects a comma separated list. Each item in the list defines a new route and must also define 3 additional properties.</p> <pre><code>derivative.&lt;item&gt;.enabled=true\n</code></pre> <p>This defines if the <code>item</code> service is enabled.</p> <pre><code>derivative.&lt;item&gt;.in.stream=queue:islandora-item-connector-&lt;item&gt;\n</code></pre> <p>This is the input queue for the derivative microservice. The part after <code>queue:</code> should match your Islandora instance \"Actions\".</p> <pre><code>derivative.&lt;item&gt;.service.url=http://example.org/derivative/convert\n</code></pre> <p>This is the microservice URL to process the request.</p> <pre><code>derivative.&lt;item&gt;.concurrent-consumers=-1\nderivative.&lt;item&gt;.max-concurrent-consumers=-1\n</code></pre> <p>These define the default number of concurrent consumers and maximum number of concurrent consumers working off your ActiveMQ instance. A value of <code>-1</code> means no setting is applied.</p> <pre><code>derivative.&lt;item&gt;.async-consumer=false\n</code></pre> <p>This property allows the concurrent consumers to process concurrently; otherwise, the consumers will wait to the previous message has been processed before executing.</p> <p>For example, with two services defined (houdini and crayfits) my configuration would have</p> <pre><code>derivative.systems.installed=houdini,fits\n\nderivative.houdini.enabled=true\nderivative.houdini.in.stream=queue:islandora-connector-houdini\nderivative.houdini.service.url=http://127.0.0.1/houdini/convert\nderivative.houdini.concurrent-consumers=1\nderivative.houdini.max-concurrent-consumers=4\nderivative.houdini.async-consumer=true\n\nderivative.fits.enabled=true\nderivative.fits.in.stream=queue:islandora-connector-fits\nderivative.fits.service.url=http://127.0.0.1/crayfits\nderivative.fits.concurrent-consumers=2\nderivative.fits.max-concurrent-consumers=2\nderivative.fits.async-consumer=false\n</code></pre>"},{"location":"installation/manual/installing-alpaca/#customizing-http-client-timeouts","title":"Customizing HTTP client timeouts","text":"<p>You can alter the HTTP client from the defaults for its request, connection and socket timeouts. To do this you want to enable the request configurer.</p> <pre><code>request.configurer.enabled=true\n</code></pre> <p>Then set the next 3 timeouts (measured in milliseconds) to the desired timeout.</p> <pre><code>request.timeout=-1\nconnection.timeout=-1\nsocket.timeout=-1\n</code></pre> <p>The default for all three is <code>-1</code> which indicates no timeout.</p>"},{"location":"installation/manual/installing-alpaca/#alter-http-options","title":"Alter HTTP options","text":"<p>By default, Alpaca uses two settings for the HTTP component, these are * disableStreamCache=true * connectionClose=true</p> <p>If you want to send additional configuration parameters or alter the existing defaults. You can  add them as a comma separated list of key=value pairs.</p> <p>For example <pre><code>http.additional_options=authMethod=Basic,authUsername=Jim,authPassword=1234\n</code></pre></p> <p>These will be added to ALL http endpoint requests.</p> <p>Check Camel Configuration Parameters</p> <p>We are currently running Camel 3.7.6, some configuration parameters on the above linked page might not be supported.</p>"},{"location":"installation/manual/installing-alpaca/#deployingrunning","title":"Deploying/Running","text":"<p>You can see the options by passing the <code>-h|--help</code> flag</p> <pre><code>&gt; java -jar /opt/alpaca/alpaca.jar -h\nUsage: alpaca [-hV] [-c=&lt;configurationFilePath&gt;]\n-h, --help      Show this help message and exit.\n  -V, --version   Print version information and exit.\n  -c, --config=&lt;configurationFilePath&gt;\n                  The path to the configuration file\n</code></pre> <p>Using the <code>-V|--version</code> flag will just return the current version of the application.</p> <pre><code>&gt; java -jar /opt/alpaca/alpaca.jar -v\n2.0.0\n</code></pre> <p>To start Alpaca you would pass the external property file with the <code>-c|--config</code> flag.</p> <p>For example if you are using an external properties file located at <code>/opt/alpaca/alpaca.properties</code>, you would run:</p> <pre><code>java -jar alpaca.jar -c /opt/alpaca/alpaca.properties\n</code></pre> <p>To use systemd to start and stop the service create the file <code>/etc/systemd/system/alpaca.service</code>:</p> <pre><code>[Unit]\nDescription=Alpaca service\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=java -jar /opt/alpaca/alpaca.jar -c /opt/alpaca/alpaca.properties\nExecStop=/bin/kill -15 $MAINPID\nSuccessExitStatus=143\nRestart=always\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Now you can start the service by running <code>sudo systemctl start alpaca</code> and set it to come up when the system reboots with <code>sudo systemctl enable alpaca</code>. Check the status by running <code>sudo systemctl status alpaca</code>.</p>"},{"location":"installation/manual/installing-composer-drush-and-drupal/","title":"Installing Composer, Drush, and Drupal","text":"<p>Needs Maintenance</p> <p>The manual installation documentation is in need of attention. We are aware that some components no longer work as documented here. If you are interested in helping us improve the documentation, please see Contributing.</p>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#in-this-section-we-will-install","title":"In this section, we will install:","text":"<ul> <li>cURL is used by composer to efficiently download libraries</li> <li>Composer at its current latest version, the package manager that will allow us to install PHP applications</li> <li>Either the Islandora Starter Site, or the Drupal recommended-project, which will install, among other things:<ul> <li>Drush at its latest version, the command-line PHP application for running tasks in Drupal</li> <li>Drupal at its latest version, the content management system Islandora uses for content modelling and front-end display</li> </ul> </li> </ul>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#install-curl","title":"Install cURL","text":"<p>cURL may already be installed. Check by running <code>curl --version</code>. If it isn't, install it:</p> <pre><code>sudo apt install curl\n</code></pre>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#install-composer","title":"Install Composer","text":""},{"location":"installation/manual/installing-composer-drush-and-drupal/#download-and-install-composer-2x","title":"Download and install Composer 2.x","text":"<p>Composer provides PHP code that we can use to install it. After downloading and running the installer, we\u2019re going to move the generated executable to a place in <code>$PATH</code>, removing its extension:</p> <pre><code>curl \"https://getcomposer.org/installer\" &gt; composer-install.php\nchmod +x composer-install.php\nphp composer-install.php\nsudo mv composer.phar /usr/local/bin/composer\n</code></pre>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#download-and-scaffold-drupal","title":"Download and Scaffold Drupal","text":"<p>At this point, you have the option of using the Islandora Starter Site, with its pre-selected modules and configurations which function \"out of the box,\" or build a clean stock Drupal via the Drupal Recommended Project and install Islandora modules as you desire.</p> <p>On a default Ubuntu install the <code>/var/www</code> directory is owned by root, but we want the webserver to control this space, so we'll give it ownership:</p> <pre><code>sudo chown -R www-data: /var/www\n</code></pre>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#option-1-create-a-project-using-the-islandora-starter-site","title":"Option 1: Create a project using the Islandora Starter Site","text":"<p>Navigate to the folder where you want to put your Islandora project (in our case <code>/var/www/html</code>). You can give your site any name you like, but for these instructions we will simply call it \"drupal\":</p> <pre><code>cd /var/www/html\nsudo -u www-data mkdir drupal\nsudo -u www-data composer create-project islandora/islandora-starter-site drupal\n</code></pre> <p>This will install all PHP dependencies, including Drush, and scaffold the site.</p> <p>Drush is not accessible via <code>$PATH</code>, but is available using the command <code>composer exec -- drush</code> </p>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#option-2-create-a-basic-drupal-recommended-project","title":"Option 2: Create a basic Drupal Recommended Project","text":"<p>Navigate to the folder where you want to put your Drupal project (in our case <code>/var/www/html</code>), and create the Drupal Recommended Project:</p> <pre><code>cd /var/www/html\nsudo -u www-data composer create-project drupal/recommended-project drupal\n</code></pre>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#make-the-new-webroot-accessible-in-apache","title":"Make the new webroot accessible in Apache","text":"<p>Before we can proceed with the actual site installation, we\u2019re going to need to make our new Drupal installation the default web-accessible location Apache serves up. This will include an appropriate <code>ports.conf</code> file, and replacing the default enabled site.</p> <p>Notice</p> <p>Out of the box, these files will contain support for SSL, which we will not be setting up in this guide (and therefore removing with these overwritten configurations), but which are absolutely indispensable to a production site. This guide does not recommend any particular SSL certificate authority or installation method, but you may find DigitalOcean's tutorial helpful.</p> <p><code>/etc/apache2/ports.conf | root:root/644</code> <pre><code>Listen 80\n</code></pre></p> <p>Remove everything but the \"Listen 80\" line. You can leave the comments in if you want.</p> <p>Create a drupal virtual host: <code>/etc/apache2/sites-available/islandora.conf | root:root/644</code> <pre><code>&lt;VirtualHost *:80&gt;\nServerName SERVER_NAME\n  DocumentRoot \"/var/www/html/drupal/web\"\n  &lt;Directory \"/var/www/html/drupal/web\"&gt;\nOptions Indexes FollowSymLinks MultiViews\n    AllowOverride all\n    Require all granted\n  &lt;/Directory&gt;\n# Ensure some logging is in place.\n  ErrorLog \"/var/log/apache2/localhost_error.log\"\n  CustomLog \"/var/log/apache2/localhost_access.log\" combined\n&lt;/VirtualHost&gt;\n</code></pre> - <code>SERVER_NAME</code>: <code>localhost</code>     - For a development environment hosted on your own machine or a VM, <code>localhost</code> should suffice. Realistically, this should be the domain or IP address the server will be accessed at.</p> <p>Set permissions and enable the virtual host:</p> <pre><code>sudo systemctl restart apache2\nsudo a2ensite islandora.conf\nsudo systemctl reload apache2\n</code></pre>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#prepare-the-mysql-database","title":"Prepare the MySQL database","text":"<p>We're going to create a user in MySQL for this Drupal site. Then create a database that we can use to install Drupal.</p> <p>The following values can (and in the case of the password, should) be changed to local values.</p> <ul> <li><code>DRUPAL_DATABASE_NAME</code>: This will be used as the core database that Drupal is installed into</li> <li><code>MYSQL_USER_FOR_DRUPAL</code>: Specifically, this is the user that will connect to the MySQL database being created, not the user that will be logging into Drupal</li> <li><code>MYSQL_PASSWORD_FOR_DRUPAL</code>:  This should be a secure password; it\u2019s recommended to use a password generator to create this such as the one provided by random.org</li> </ul> <pre><code>sudo mysql -u root\nCREATE DATABASE [DRUPAL_DATABASE_NAME];\nCREATE USER '[MYSQL_USER_FOR_DRUPAL]'@'localhost' IDENTIFIED BY '[MYSQL_PASSWORD_FOR_DRUPAL]';\nGRANT ALL PRIVILEGES ON [DRUPAL_DATABASE_NAME].* TO '[MYSQL_USER_FOR_DRUPAL]'@'localhost';\nexit\n</code></pre>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#install-drupal-using-drush","title":"Install Drupal using Drush","text":"<p>The Drupal installation process can be done through the GUI in a series of form steps, or can be done quickly using Drush's <code>site-install</code> command. It can be invoked with the full list of parameters (such as <code>--db-url</code> and <code>--site-name</code>), but if parameters are missing, they will be asked of you interactively.</p>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#option-1-site-install-the-starter-site-with-existing-configs","title":"Option 1: Site install the Starter Site with existing configs","text":"<p>Follow the instructions in the README of the Islandora Starter Site. The steps are not reproduced here to remove redundancy. But specifically,</p> <ol> <li>Configure the database connection information (see the section above) and fedora flysystem in <code>/var/www/html/drupal/web/sites/default/settings.php</code>.</li> <li>Install the site using <code>sudo -u www-data composer exec -- drush site:install --existing-config</code>.</li> </ol> <p>When this installation is done, you'll have a starter site ready-to-go. Once you set up the external services in the next sections, you'll need to configure Drupal to know where they are.</p>"},{"location":"installation/manual/installing-composer-drush-and-drupal/#option-2-site-install-the-basic-drupal-recommended-project","title":"Option 2: Site install the basic Drupal Recommended Project","text":"<p><pre><code>cd /var/www/drupal\nsudo -u www-data drush -y site-install standard --db-url=\"mysql://MYSQL_USER_FOR_DRUPAL:MYSQL_PASSWORD_FOR_DRUPAL@127.0.0.1:3306/DRUPAL_DATABASE_NAME\" --site-name=\"SITE_NAME\" --account-name=DRUPAL_LOGIN --account-pass=DRUPAL_PASS\n</code></pre> This uses the same parameters from the above step, as well as:</p> <ul> <li><code>SITE_NAME</code>: Islandora 2.0<ul> <li>This is arbitrary, and is simply used to title the site on the home page</li> </ul> </li> <li><code>DRUPAL_LOGIN</code>: <code>islandora</code><ul> <li>The Drupal administrative username to use</li> </ul> </li> <li><code>DRUPAL_PASS</code>: <code>islandora</code><ul> <li>The password to use for the Drupal administrative user</li> </ul> </li> </ul> <p>Congratulations, you have a Drupal site! It currently isn\u2019t really configured to do anything, but we\u2019ll get those portions set up in the coming sections.</p>"},{"location":"installation/manual/installing-crayfish/","title":"Installing Crayfish","text":"<p>Needs Maintenance</p> <p>The manual installation documentation is in need of attention. We are aware that some components no longer work as documented here. If you are interested in helping us improve the documentation, please see Contributing.</p>"},{"location":"installation/manual/installing-crayfish/#in-this-section-we-will-install","title":"In this section, we will install:","text":"<ul> <li>FITS Web Service, a webservice for identifying file metadata</li> <li>Islandora/Crayfish, the suite of microservices that power the backend of Islandora 2.0</li> <li>Indvidual microservices underneath Crayfish</li> </ul>"},{"location":"installation/manual/installing-crayfish/#fits-web-service","title":"FITS Web Service","text":"<p>The FITS Web Service is used to extract file metadata from files. The Crayfish microservice CrayFits will use this service to push FITS metadata back to Drupal. It comes in two pieces, the actual FITS tool and the FITS Webservice which runs in Tomcat.</p> <p>FITS itself wraps other file identification and metadata tools which may require installing additional libraries. On Ububtu 20.04, the version this guide is using, we will install a few:</p> <pre><code>sudo apt install mediainfo python3-jpylyzer\n</code></pre> <p>To set up the FITS application, first find the latest FITS version on GitHub to replace the <code>[FITS_VERSION_NUMBER]</code> and then run the following commands:</p> <pre><code>cd /opt\nsudo wget https://github.com/harvard-lts/fits/releases/download/[FITS_VERSION_NUMBER]/fits-[FITS_VERSION_NUMBER].zip\nsudo unzip /opt/fits-[FITS_VERSION_NUMBER].zip -d /opt/fits\n</code></pre> <p>Similarly with the FITS webservice, get the current service version number to replace <code>[FITS_SERVICE_WAR_VERSION_NUMBER]</code>:</p> <p>Download the FITS webservice:</p> <pre><code>sudo -u tomcat wget -O /opt/tomcat/webapps/fits.war https://github.com/harvard-lts/FITSservlet/releases/download/[FITS_SERVICE_WAR_VERSION_NUMBER]/fits-service-[FITS_SERVICE_WAR_VERSION_NUMBER].war\n</code></pre> <p>Configure the webservice but adding the following lines to the bottom of <code>/opt/tomcat/conf/catalina.properties</code>:</p> <pre><code>fits.home=/opt/fits\nshared.loader=/opt/fits/lib/*.jar\n</code></pre> <p>Restart Tomcat:</p> <pre><code>sudo systemctl restart tomcat\n</code></pre> <p>Wait for a few minutes to let the service start up the first time and then visit <code>http://localhost:8080/fits/</code> to ensure it is working. You can also follow the catalina logs to see how tomcat is progressing in setting up each service it is running: <code>sudo tail -f /opt/tomcat/logs/catalina.out</code>. To stop following the logs, hit control-C.</p>"},{"location":"installation/manual/installing-crayfish/#crayfish-20","title":"Crayfish 2.0","text":""},{"location":"installation/manual/installing-crayfish/#installing-prerequisites","title":"Installing Prerequisites","text":"<p>Some packages need to be installed before we can proceed with installing Crayfish; these packages are used by the microservices within Crayfish. These include:</p> <ul> <li>Imagemagick, which will be used for image processing. We'll be using the LYRASIS build of imagemagick here, which supports JP2 files.</li> <li>Tesseract, which will be used for optical character recognition; note that by default Tesseract can only understand English; several other individual Tesseract language packs can be installed using <code>apt-get</code>, and a list of available packs can be procured with <code>sudo apt-cache search tesseract-ocr</code></li> <li>FFMPEG, which will be used for video processing</li> <li>Poppler, which will be used for generating PDFs</li> </ul> <pre><code>sudo apt-get install software-properties-common\nsudo add-apt-repository -y ppa:lyrasis/imagemagick-jp2\nsudo apt-get update\nsudo apt-get -y install imagemagick tesseract-ocr ffmpeg poppler-utils\n</code></pre>"},{"location":"installation/manual/installing-crayfish/#cloning-and-installing-crayfish","title":"Cloning and Installing Crayfish","text":"<p>We\u2019re going to clone Crayfish to <code>/opt</code>, and individually run <code>composer install</code> against each of the microservice subdirectories.</p> <pre><code>cd /opt\nsudo git clone https://github.com/Islandora/Crayfish.git crayfish\nsudo chown -R www-data:www-data crayfish\nsudo -u www-data composer install -d crayfish/Homarus\nsudo -u www-data composer install -d crayfish/Houdini\nsudo -u www-data composer install -d crayfish/Hypercube\nsudo -u www-data composer install -d crayfish/Milliner\nsudo -u www-data composer install -d crayfish/Recast\nsudo -u www-data composer install -d crayfish/CrayFits\n</code></pre>"},{"location":"installation/manual/installing-crayfish/#preparing-logging","title":"Preparing Logging","text":"<p>Not much needs to happen here; Crayfish opts for a simple logging approach, with one <code>.log</code> file for each component. We\u2019ll create a folder where each logfile can live.</p> <pre><code>sudo mkdir /var/log/islandora\nsudo chown www-data:www-data /var/log/islandora\n</code></pre>"},{"location":"installation/manual/installing-crayfish/#configuring-crayfish-components","title":"Configuring Crayfish Components","text":"<p>Each Crayfish component requires one or more <code>.yaml</code> file(s) to ensure everything is wired up correctly.</p> <p>Update the defaults to meet your needs</p> <p>The following configuration files represent somewhat sensible defaults; you should take consideration of the logging levels in use, as this can vary in desirability from installation to installation. Also note that in all cases, <code>http</code> URLs are being used, as this guide does not deal with setting up https support. In a production installation, this should not be the case. These files also assume a connection to a PostgreSQL database; use a <code>pdo_mysql</code> driver and the appropriate <code>3306</code> port if using MySQL.</p> <p>Using JWT for Crayfish Authentication</p> <p>For Crayfish microservices use the <code>lexik_jwt_authentication</code> package. They are configured to use the <code>JWT_PUBLIC_KEY</code> environment variable to find the public key we created earlier (<code>/opt/keys/syn_public.key</code>). Later on in this guide we will add the environment variable to the Apache configs, but you may alternatively write the path to the key in the <code>lexik_jwt_authentication.yaml</code> file that resides along-side the <code>security.yaml</code> files we edit in this section.</p>"},{"location":"installation/manual/installing-crayfish/#homarus-audiovideo-derivatives","title":"Homarus (Audio/Video derivatives)","text":"<p>Enable JSON Web Token (JWT) based access to the service by updating the security settings. Edit <code>/opt/crayfish/Homarus/config/packages/security.yaml</code> to set firewalls: main: anonymous to <code>false</code> and uncomment the <code>provider</code> and <code>jwt</code> lines further down in that section.</p> <p>Edit <code>/opt/crayfish/Homarus/config/packages/monolog.yaml</code> to point to the new logging directory:</p> <pre><code>        homarus:\n            type: rotating_file\n            path: /var/logs/islandora/Homarus.log\n</code></pre> <p>Edit the commons config to update it with Fedora's location (if necessary) and enable the apix middleware in <code>/opt/crayfish/Homarus/config/packages/crayfish_commons.yaml</code>:</p> <pre><code>crayfish_commons:\n  fedora_base_uri: 'http://localhost:8080/fcrepo/rest'\n  apix_middleware_enabled: true\n</code></pre>"},{"location":"installation/manual/installing-crayfish/#houdini-image-derivatives","title":"Houdini (Image derivatives)","text":"<p>Currently the Houdini microservice uses a different system (Symfony) than the other microservices, this requires different configuration.</p> <p><code>/opt/crayfish/Houdini/config/services.yaml | www-data:www-data/644</code> <pre><code># This file is the entry point to configure your own services.\n# Files in the packages/ subdirectory configure your dependencies.\n# Put parameters here that don't need to change on each machine where the app is deployed\n# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration\nparameters:\napp.executable: /usr/bin/convert\napp.formats.valid:\n- image/jpeg\n- image/png\n- image/tiff\n- image/jp2\napp.formats.default: image/jpeg\nservices:\n# default configuration for services in *this* file\n_defaults:\nautowire: true      # Automatically injects dependencies in your services.\nautoconfigure: true # Automatically registers your services as commands, event subscribers, etc.\n# makes classes in src/ available to be used as services\n# this creates a service per class whose id is the fully-qualified class name\nApp\\Islandora\\Houdini\\:\nresource: '../src/*'\nexclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'\n# controllers are imported separately to make sure services can be injected\n# as action arguments even if you don't extend any base controller class\nApp\\Islandora\\Houdini\\Controller\\HoudiniController:\npublic: false\nbind:\n$formats: '%app.formats.valid%'\n$default_format: '%app.formats.default%'\n$executable: '%app.executable%'\ntags: ['controller.service_arguments']\n# add more service definitions when explicit configuration is needed\n# please note that last definitions always *replace* previous ones\n</code></pre></p> <p><code>/opt/crayfish/Houdini/config/packages/crayfish_commons.yaml | www-data:www-data/644</code> <pre><code>crayfish_commons:\nfedora_base_uri: 'http://localhost:8080/fcrepo/rest'\nsyn_config: /opt/fcrepo/config/syn-settings.xml\nsyn_enabled: True\n</code></pre></p> <p><code>/opt/crayfish/Houdini/config/packages/monolog.yaml | www-data:www-data/644</code> <pre><code>monolog:\nhandlers:\nhoudini:\ntype: rotating_file\npath: /var/log/islandora/Houdini.log\nlevel: DEBUG\nmax_files: 1\n</code></pre></p> <p>The below files are two versions of the same file to enable or disable JWT token authentication.</p> <p><code>/opt/crayfish/Houdini/config/packages/security.yaml | www-data:www-data/644</code></p> <p>Enabled JWT token authentication: <pre><code># To disable Syn checking, set syn_enabled=false in crayfish_commons.yaml and remove this configuration file.\nsecurity:\n# https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers\nproviders:\nusers_in_memory: { memory: null }\njwt:\nlexik_jwt: ~\nfirewalls:\ndev:\npattern: ^/(_(profiler|wdt)|css|images|js)/\nsecurity: false\nmain:\n# To enable Syn, change anonymous to false and uncomment the lines further below\nanonymous: false\n# Need stateless or it reloads the User based on a token.\nstateless: true\n# To enable JWT authentication, uncomment the below 2 lines and change anonymous to false above.\nprovider: jwt\njwt: ~\n# activate different ways to authenticate\n# https://symfony.com/doc/5.4/security.html#firewalls-authentication\n# https://symfony.com/doc/5.4/security/impersonating_user.html\n# switch_user: true\n# Easy way to control access for large sections of your site\n# Note: Only the *first* access control that matches will be used\naccess_control:\n# - { path: ^/admin, roles: ROLE_ADMIN }\n# - { path: ^/profile, roles: ROLE_USER }\n</code></pre></p> <p>Disabled JWT token authentication: <pre><code>security:\n# https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers\nproviders:\njwt_user_provider:\nid: Islandora\\Crayfish\\Commons\\Syn\\JwtUserProvider\nfirewalls:\ndev:\npattern: ^/(_(profiler|wdt)|css|images|js)/\nsecurity: false\nmain:\nanonymous: true\n# Need stateless or it reloads the User based on a token.\nstateless: true\n</code></pre></p>"},{"location":"installation/manual/installing-crayfish/#hypercube-ocr","title":"Hypercube (OCR)","text":"<p>Enable JSON Web Token (JWT) based access to the service by updating the security settings. Edit <code>/opt/crayfish/Hypercube/config/packages/security.yaml</code> to set firewalls: main: anonymous to <code>false</code> and uncomment the <code>provider</code> and <code>jwt</code> lines further down in that section.</p> <p>Edit <code>/opt/crayfish/Hypercube/config/packages/monolog.yaml</code> to point to the new logging directory:</p> <pre><code>        hypercube:\n            type: rotating_file\n            path: /var/logs/islandora/Hypercube.log\n</code></pre> <p>Edit the commons config to update it with Fedora's location (if necessary) and enable the apix middleware in <code>/opt/crayfish/Hypercube/config/packages/crayfish_commons.yaml</code>:</p> <pre><code>crayfish_commons:\n  fedora_base_uri: 'http://localhost:8080/fcrepo/rest'\n  apix_middleware_enabled: true\n</code></pre>"},{"location":"installation/manual/installing-crayfish/#milliner-fedora-indexing","title":"Milliner (Fedora indexing)","text":"<p>Enable JSON Web Token (JWT) based access to the service by updating the security settings. Edit <code>/opt/crayfish/Milliner/config/packages/security.yaml</code> to set firewalls: main: anonymous to <code>false</code> and uncomment the <code>provider</code> and <code>jwt</code> lines further down in that section.</p> <p>Edit <code>/opt/crayfish/Milliner/config/packages/monolog.yaml</code> to point to the new logging directory:</p> <pre><code>        milliner:\n            type: rotating_file\n            path: /var/logs/islandora/Milliner.log\n</code></pre> <p>Edit the commons config to update it with Fedora's location (if necessary) and enable the apix middleware in <code>/opt/crayfish/Milliner/config/packages/crayfish_commons.yaml</code>:</p>"},{"location":"installation/manual/installing-crayfish/#creating-apache-configurations-for-crayfish-components","title":"Creating Apache Configurations for Crayfish Components","text":"<p>Finally, we need appropriate Apache configurations for Crayfish; these will allow other services to connect to Crayfish components via their HTTP endpoints.</p> <p>Each endpoint we need to be able to connect to will get its own <code>.conf</code> file, which we will then enable.</p> <p>Possible Route Collisions</p> <p>These configurations would potentially have collisions with Drupal routes, if any are created in Drupal with the same name. If this is a concern, it would likely be better to reserve a subdomain or another port specifically for Crayfish. For the purposes of this installation guide, these endpoints will suffice.</p> <p><code>/etc/apache2/conf-available/Homarus.conf | root:root/644</code> <pre><code>Alias \"/homarus\" \"/opt/crayfish/Homarus/public\"\n&lt;Directory \"/opt/crayfish/Homarus/public\"&gt;\n  FallbackResource /homarus/index.php\n  Require all granted\n  DirectoryIndex index.php\n  SetEnv JWT_PUBLIC_KEY /opt/keys/syn_public.key\n  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n&lt;/Directory&gt;\n</code></pre></p> <p><code>/etc/apache2/conf-available/Houdini.conf | root:root/644</code> <pre><code>Alias \"/houdini\" \"/opt/crayfish/Houdini/public\"\n&lt;Directory \"/opt/crayfish/Houdini/public\"&gt;\n  FallbackResource /houdini/index.php\n  Require all granted\n  DirectoryIndex index.php\n  SetEnv JWT_PUBLIC_KEY /opt/keys/syn_public.key\n  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n&lt;/Directory&gt;\n</code></pre></p> <p><code>/etc/apache2/conf-available/Hypercube.conf | root:root/644</code> <pre><code>Alias \"/hypercube\" \"/opt/crayfish/Hypercube/public\"\n&lt;Directory \"/opt/crayfish/Hypercube/public\"&gt;\n  FallbackResource /hypercube/index.php\n  Require all granted\n  DirectoryIndex index.php\n  SetEnv JWT_PUBLIC_KEY /opt/keys/syn_public.key\n  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n&lt;/Directory&gt;\n</code></pre></p> <p><code>/etc/apache2/conf-available/Milliner.conf | root:root/644</code> <pre><code>Alias \"/milliner\" \"/opt/crayfish/Milliner/public\"\n&lt;Directory \"/opt/crayfish/Milliner/public\"&gt;\n  FallbackResource /milliner/index.php\n  Require all granted\n  DirectoryIndex index.php\n  SetEnv JWT_PUBLIC_KEY /opt/keys/syn_public.key\n  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n&lt;/Directory&gt;\n</code></pre></p> <p><code>/etc/apache2/conf-available/CrayFits.conf | root:root/644</code> <pre><code>Alias \"/crayfits\" \"/opt/crayfish/CrayFits/public\"\n&lt;Directory \"/opt/crayfish/CrayFits/public\"&gt;\n  FallbackResource /crayfits/index.php\n  Require all granted\n  DirectoryIndex index.php\n  SetEnv JWT_PUBLIC_KEY /opt/keys/syn_public.key\n  SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n&lt;/Directory&gt;\n</code></pre></p>"},{"location":"installation/manual/installing-crayfish/#enabling-each-crayfish-component-apache-configuration","title":"Enabling Each Crayfish Component Apache Configuration","text":"<p>Enabling each of these configurations involves creating a symlink to them in the <code>conf-enabled</code> directory; the standardized method of doing this in Apache is with <code>a2enconf</code>.</p> <pre><code>sudo a2enconf Homarus Houdini Hypercube Milliner CrayFits\n</code></pre>"},{"location":"installation/manual/installing-crayfish/#restarting-the-apache-service","title":"Restarting the Apache Service","text":"<p>Finally, to get these new endpoints up and running, we need to restart the Apache service.</p> <pre><code>sudo systemctl restart apache2\n</code></pre>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/","title":"Installing Fedora, Syn, and Blazegraph","text":""},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#in-this-section-we-will-install","title":"In this section, we will install:","text":"<ul> <li>Fedora 6, the back-end repository that Islandora will use</li> <li>Syn, the authentication broker that will manage communication with Fedora</li> <li>Blazegraph, the resource index layer on top of Fedora for managing discoverability via RDF</li> </ul>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#fedora-6","title":"Fedora 6","text":""},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#stop-the-tomcat-service","title":"Stop the Tomcat Service","text":"<p>We're going to stop the Tomcat service while working on setting up Fedora to prevent any autodeploy misconfigurations.</p> <pre><code>sudo systemctl stop tomcat\n</code></pre>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#creating-a-working-space-for-fedora","title":"Creating a Working Space for Fedora","text":"<p>Fedora\u2019s configuration and data won\u2019t live with Tomcat itself; rather, we\u2019re going to prepare a space for them to make them easier to manage.</p> <pre><code>sudo mkdir -p /opt/fcrepo/data/objects\nsudo mkdir /opt/fcrepo/config\nsudo chown -R tomcat:tomcat /opt/fcrepo\n</code></pre>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#creating-a-database-for-fedora","title":"Creating a Database for Fedora","text":"<p>The method for creating the database here will closely mimic the method we used to create our database for Drupal.</p> <pre><code>sudo mysql -u root\nCREATE DATABASE [FEDORA_DB];\nCREATE USER '[MYSQL_USER_FOR_FEDORA]'@'localhost' IDENTIFIED BY '[MYSQL_PASSWORD_FOR_FEDORA]';\nGRANT ALL PRIVILEGES ON [FEDORA_DB].* TO '[MYSQL_USER_FOR_FEDORA]'@'localhost';\n</code></pre> <ul> <li><code>FEDORA_DB</code>: <code>fcrepo</code><ul> <li>This will be used as the database Fedora will store the repository in.</li> </ul> </li> <li><code>FEDORA_DB_USER</code>: <code>fedora</code></li> <li><code>FEDORA_DB_PASSWORD</code>: <code>fedora</code><ul> <li>Again, this should be a secure password of some kind; leaving it as <code>fedora</code> is not recommended.</li> </ul> </li> </ul>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#adding-a-fedora-configuration","title":"Adding a Fedora Configuration","text":"<p>The Fedora configuration is going to come in a few different chunks that need to be in place before Fedora will be functional. We\u2019re going to place several files outright, with mildly modified parameters according to our configuration.</p> <p>The basics of these configuration files have been pulled largely from the templates in Islandora-Devops/islandora-playbook internal Fedora role; you may consider referencing the playbook\u2019s templates directory for more details.</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#namespace-prefixes","title":"Namespace prefixes","text":"<p><code>i8_namespaces.yml</code> is a list of namespaces used by Islandora that may not necessarily be present in Fedora; we add them here to ensure we can use them in queries.</p> <p><code>/opt/fcrepo/config/i8_namespaces.yml | tomcat:tomcat/644</code> <pre><code># Islandora 8/Fedora namespaces\n#\n# This file contains ALL the prefix mappings, if a URI\n# does not appear in this file it will be displayed as \n# the full URI in Fedora. \nacl: http://www.w3.org/ns/auth/acl#\nbf: http://id.loc.gov/ontologies/bibframe/\ncc: http://creativecommons.org/ns#\ndc: http://purl.org/dc/elements/1.1/\ndcterms: http://purl.org/dc/terms/\ndwc: http://rs.tdwg.org/dwc/terms/\nebucore: http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#\nexif: http://www.w3.org/2003/12/exif/ns#\nfedoraconfig: http://fedora.info/definitions/v4/config#\nfedoramodel: info:fedora/fedora-system:def/model#\nfoaf: http://xmlns.com/foaf/0.1/\ngeo: http://www.w3.org/2003/01/geo/wgs84_pos#\ngn: http://www.geonames.org/ontology#\niana: http://www.iana.org/assignments/relation/\nislandorarelsext: http://islandora.ca/ontology/relsext#\nislandorarelsint: http://islandora.ca/ontology/relsint#\nldp: http://www.w3.org/ns/ldp#\nmemento: http://mementoweb.org/ns#\nnfo: http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#\nore: http://www.openarchives.org/ore/terms/\nowl: http://www.w3.org/2002/07/owl#\npremis: http://www.loc.gov/premis/rdf/v1#\nprov: http://www.w3.org/ns/prov#\nrdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#\nrdfs: http://www.w3.org/2000/01/rdf-schema#\nrel: http://id.loc.gov/vocabulary/relators/\nschema: http://schema.org/\nskos: http://www.w3.org/2004/02/skos/core#\ntest: info:fedora/test/\nvcard: http://www.w3.org/2006/vcard/ns#\nwebac: http://fedora.info/definitions/v4/webac#\nxml: http://www.w3.org/XML/1998/namespace\nxmlns: http://www.w3.org/2000/xmlns/\nxs: http://www.w3.org/2001/XMLSchema\nxsi: http://www.w3.org/2001/XMLSchema-instance\n</code></pre></p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#allowed-external-content-hosts","title":"Allowed External Content Hosts","text":"<p>We have Fedora provide metadata for some resources that are contained in Drupal. Fedora needs to know to allow access to these External Content hosts.</p> <p>We create a file <code>/opt/fcrepo/config/allowed_external_hosts.txt | tomcat:tomcat/644</code> <pre><code>http://localhost:8000/\n</code></pre></p> <p>Note: the trailing backslash is important here. For more information on Fedora's External Content and configuring it, see the Fedora Wiki pages</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#fedora-configuration-properties-file","title":"Fedora configuration properties file","text":"<p>Fedora 6 now allows you to put all your configuration properties into a single file. We use <code>0640</code> permissions as you will want to put your database credentials in here.</p> <p><code>/opt/fcrepo/config/fcrepo.properties | tomcat:tomcat/640</code> <pre><code>fcrepo.home=FCREPO_HOME\n# External content using path defined above.\nfcrepo.external.content.allowed=/opt/fcrepo/config/allowed_external_hosts.txt\n# Namespace registry using path defined above.\nfcrepo.namespace.registry=/opt/fcrepo/config/i8_namespaces.yml\nfcrepo.auth.principal.header.enabled=true\n# The principal header is the syn-setting.xml \"config\" element's \"header\" attribute\nfcrepo.auth.principal.header.name=X-Islandora\n# false to use manual versioning, true to create a version on each change\nfcrepo.autoversioning.enabled=true\nfcrepo.db.url=FCREPO_DB_URL\nfcrepo.db.user=FCREPO_DB_USERNAME\nfcrepo.db.password=FCREPO_DB_PASSWORD\nfcrepo.ocfl.root=FCREPO_OCFL_ROOT\nfcrepo.ocfl.temp=FCREPO_TEMP_ROOT\nfcrepo.ocfl.staging=FCREPO_STAGING_ROOT\n# Can be sha512 or sha256\nfcrepo.persistence.defaultDigestAlgorithm=sha512\n# Jms moved from 61616 to allow external ActiveMQ to use that port\nfcrepo.dynamic.jms.port=61626\n# Same as above\nfcrepo.dynamic.stomp.port=61623\nfcrepo.velocity.runtime.log=FCREPO_VELOCITY_LOG\nfcrepo.jms.baseUrl=FCREPO_JMS_BASE\n</code></pre></p> <ul> <li><code>FCREPO_HOME</code> - The home directory for all Fedora generated output and state.  Unless otherwise specified, all logs, metadata, binaries, and internally generated indexes, etc. It would default to the Tomcat starting directory. A good default would be <code>/opt/fcrepo</code></li> <li> <p><code>FCREPO_DB_URL</code> - This parameter allows you to set the database connection url. In general the format is as follows:</p> <p><code>jdbc:&lt;database_type&gt;://&lt;database_host&gt;:&lt;database_port&gt;/&lt;database_name&gt;</code> </p> <p>Fedora currently supports H2, PostgresQL 12.3, MariaDB 10.5.3, and MySQL 8.0</p> <p>So using the default ports for the supported databases here are the values we typically use:</p> <ul> <li>PostgresQL: <code>jdbc:postgresql://localhost:5432/fcrepo</code></li> <li>MariaDB:  <code>jdbc:mariadb://localhost:3306/fcrepo</code></li> <li>MySQL:  <code>jdbc:mysql://localhost:3306/fcrepo</code></li> </ul> </li> <li> <p><code>FCREPO_DB_USERNAME</code> - The database username</p> </li> <li><code>FCREPO_DB_PASSWORD</code> - The database password</li> <li><code>FCREPO_OCFL_ROOT</code> - Sets the root directory of the OCFL. Defaults to <code>FCREPO_HOME/data/ocfl-root</code> if this line is deleted.</li> <li><code>FCREPO_TEMP_ROOT</code> - Sets the temp directory used by OCFL. Defaults to <code>FCREPO_HOME/data/temp</code> if this line is deleted.</li> <li><code>FCREPO_STAGING_ROOT</code> - Sets the staging directory used by OCFL. Defaults to <code>FCREPO_HOME/data/staging</code> if this line is deleted.</li> <li><code>FCREPO_VELOCITY_LOG</code> - The Fedora HTML template code uses Apache Velocity, which generates a runtime log called velocity.log. Defaults to <code>FCREPO_HOME/logs/velocity</code>. A good choice might be /opt/tomcat/logs/velocity.log</li> <li><code>FCREPO_JMS_BASE</code> - This specifies the baseUrl to use when generating JMS messages. You can specify the hostname with or without port and with or without path. If your system is behind a NAT firewall you may need this to avoid your message consumers trying to access the system on an invalid port. If this system property is not set, the host, port and context from the user's request will be used in the emitted JMS messages. If your Alpaca is on the same machine as your Fedora and you use the <code>islandora-indexing-fcrepo</code>, you could use http://localhost:8080/fcrepo/rest. </li> </ul> <p>Check the Lyrasis Wiki to find all of Fedora's properties</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#adding-the-fedora-variables-to-java_opts","title":"Adding the Fedora Variables to <code>JAVA_OPTS</code>","text":"<p>We need our Tomcat <code>JAVA_OPTS</code> to include references to our repository configuration.</p> <p><code>/opt/tomcat/bin/setenv.sh</code></p> <p>Before:</p> <p>3 | export JAVA_OPTS=\"-Djava.awt.headless=true -server -Xmx1500m -Xms1000m\"</p> <p>After:</p> <p>3 | export JAVA_OPTS=\"-Djava.awt.headless=true -Dfcrepo.config.file=/opt/fcrepo/config/fcrepo.properties -DconnectionTimeout=-1 -server -Xmx1500m -Xms1000m\"</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#ensuring-tomcat-users-are-in-place","title":"Ensuring Tomcat Users Are In Place","text":"<p>While not strictly necessary, we can use the <code>tomcat-users.xml</code> file to give us direct access to the Fedora endpoint. Fedora defines, out of the box, a <code>fedoraAdmin</code> and <code>fedoraUser</code> role that can be reflected in the users list for access. The following file will also include the base <code>tomcat</code> user. As always, these default passwords should likely not stay as the defaults.</p> <p><code>/opt/tomcat/conf/tomcat-users.xml | tomcat:tomcat/600</code> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;tomcat-users xmlns=\"http://tomcat.apache.org/xml\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\"\nversion=\"1.0\"&gt;\n&lt;role rolename=\"tomcat\"/&gt;\n&lt;role rolename=\"fedoraAdmin\"/&gt;\n&lt;role rolename=\"fedoraUser\"/&gt;\n&lt;user username=\"tomcat\" password=\"TOMCAT_PASSWORD\" roles=\"tomcat\"/&gt;\n&lt;user username=\"fedoraAdmin\" password=\"FEDORA_ADMIN_PASSWORD\" roles=\"fedoraAdmin\"/&gt;\n&lt;user username=\"fedoraUser\" password=\"FEDORA_USER_PASSWORD\" roles=\"fedoraUser\"/&gt;\n&lt;/tomcat-users&gt;\n</code></pre></p> <ul> <li><code>TOMCAT_PASSWORD</code>: <code>tomcat</code></li> <li><code>FEDORA_ADMIN_PASSWORD</code>: <code>islandora</code></li> <li><code>FEDORA_USER_PASSWORD</code>: <code>islandora</code></li> </ul>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#downloading-and-placing-the-latest-release","title":"Downloading and Placing the Latest Release","text":"<p>Fedora <code>.war</code> files are packaged up as releases on the official GitHub repository. You should download the most recent stable release.</p> <pre><code>sudo wget -O fcrepo.war FCREPO_WAR_URL\nsudo mv fcrepo.war /opt/tomcat/webapps\nsudo chown tomcat:tomcat /opt/tomcat/webapps/fcrepo.war\n</code></pre> <ul> <li><code>FCREPO_WAR_URL</code>: This can be found at the fcrepo downloads page; the file you're looking for is:<ul> <li>Tagged in green as the 'Latest release'</li> <li>Named \"fcrepo-webapp-VERSION.war\"</li> </ul> </li> </ul>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#start-the-tomcat-service","title":"Start the Tomcat Service","text":"<p>As before, start the Tomcat service to get Fedora up and running.</p> <pre><code>sudo systemctl start tomcat\n</code></pre> <p>Note: sometimes it takes a while for Fedora and Tomcat to start up, usually it shouldn't take longer than 5 minutes.</p> <p>Once it starts up, Fedora REST API should be available at http://localhost:8080/fcrepo/rest. The username is fedoraAdmin and we defined the password before as <code>FEDORA_ADMIN_PASSWORD</code> (default: \"islandora\").</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#syn","title":"Syn","text":""},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#downloading-the-syn-jar-file","title":"Downloading the Syn JAR File","text":"<p>A compiled JAR of Syn can be found on the Syn releases page. We\u2019re going to add this to the list libraries accessible to Tomcat.</p> <pre><code>sudo -u tomcat wget -P /opt/tomcat/lib SYN_JAR_URL\n# Ensure the library has the correct permissions.\nsudo chmod -R 640 /opt/tomcat/lib\n</code></pre> <ul> <li><code>SYN_JAR_URL</code>: The latest stable release of the Syn JAR from the releases page. Specifically, the JAR compiled as <code>-all.jar</code> is required.</li> </ul>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#generating-an-ssl-key-for-syn","title":"Generating an SSL Key for Syn","text":"<p>For Islandora and Fedora to talk to each other, an SSL key needs to be generated for use with Syn. We\u2019re going to make a spot where such keys can live, and generate one.</p> <pre><code>sudo mkdir /opt/keys\nsudo openssl genrsa -out \"/opt/keys/syn_private.key\" 2048\nsudo openssl rsa -pubout -in \"/opt/keys/syn_private.key\" -out \"/opt/keys/syn_public.key\"\nsudo chown www-data:www-data /opt/keys/syn*\n</code></pre>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#placing-the-syn-settings","title":"Placing the Syn Settings","text":"<p>Syn sites and tokens belong in a settings file that we\u2019re going to reference in Tomcat.</p> <p><code>/opt/fcrepo/config/syn-settings.xml | tomcat:tomcat/600</code> <pre><code>&lt;config version='1' header='X-Islandora'&gt;\n&lt;site algorithm='RS256' encoding='PEM' anonymous='true' default='true' path='/opt/keys/syn_public.key'/&gt;\n&lt;token user='islandora' roles='fedoraAdmin'&gt;ISLANDORA_SYN_TOKEN&lt;/token&gt;\n&lt;/config&gt;\n</code></pre></p> <ul> <li><code>ISLANDORA_SYN_TOKEN</code>: <code>islandora</code><ul> <li>This should be a secure generated token rather than this default; it will be configured on the Drupal side later.</li> </ul> </li> </ul>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#adding-the-syn-valve-to-tomcat","title":"Adding the Syn Valve to Tomcat","text":"<p>Referencing the valve we\u2019ve created in our <code>syn-settings.xml</code> involves creating a <code>&lt;Valve&gt;</code> entry in Tomcat\u2019s <code>context.xml</code>:</p> <p>There are two options here: </p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#1-enable-the-syn-valve-for-all-of-tomcat","title":"1. Enable the Syn Valve for all of Tomcat.","text":"<p><code>/opt/tomcat/conf/context.xml</code></p> <p>Before:</p> <p>30 |     <code>--&gt;</code></p> <p>31 | <code>&lt;/Context&gt;</code></p> <p>After:</p> <p>30 |    <code>--&gt;</code></p> <p>31 |    <code>&lt;Valve className=\"ca.islandora.syn.valve.SynValve\" pathname=\"/opt/fcrepo/config/syn-settings.xml\"/&gt;</code></p> <p>32 | <code>&lt;/Context&gt;</code></p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#2-enable-the-syn-valve-for-only-fedora","title":"2. Enable the Syn Valve for only Fedora.","text":"<p>Create a new file at</p> <p><code>/opt/tomcat/conf/Catalina/localhost/fcrepo.xml</code></p> <pre><code>&lt;Context&gt;\n&lt;Valve className=\"ca.islandora.syn.valve.SynValve\" pathname=\"/opt/fcrepo/config/syn-settings.xml\"/&gt;\n&lt;/Context&gt;\n</code></pre> <p>Your Fedora web application needs to be deployed in Tomcat with the name <code>fcrepo.war</code>. Otherwise, change the name of the above XML file to match the deployed web application's name.</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#restarting-tomcat","title":"Restarting Tomcat","text":"<p>Finally, restart tomcat to apply the new configurations.</p> <pre><code>sudo systemctl restart tomcat\n</code></pre> <p>Note: sometimes it takes a while for Fedora and Tomcat to start up, usually it shouldn't take longer than 5 minutes.</p> <p>Note: after installing the Syn valve, you'll no longer be able to manually create/edit or delete objects via Fedora Web UI. All communication with Fedora will now be handled from the Islandora module in Drupal.</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#redhat-logging","title":"Redhat logging","text":"<p>Redhat systems have stopped generating an all inclusive <code>catalina.out</code>, the <code>catalina.&lt;date&gt;.log</code> does not include web application's log statements. To get Fedora log statements flowing, you can create your own LogBack configuration file and point to it.</p> <p><code>/opt/fcrepo/config/fcrepo-logback.xml | tomcat:tomcat/644</code> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE configuration&gt;\n&lt;configuration&gt;\n&lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n&lt;encoder&gt;\n&lt;pattern&gt;%p %d{HH:mm:ss.SSS} [%thread] \\(%c{0}\\) %m%n&lt;/pattern&gt;\n&lt;/encoder&gt;\n&lt;/appender&gt;\n&lt;appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;\n&lt;file&gt;${catalina.base}/logs/fcrepo.log&lt;/file&gt;\n&lt;append&gt;true&lt;/append&gt;\n&lt;rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"&gt;\n&lt;fileNamePattern&gt;${catalina.base}/logs/fcrepo.%d{yyyy-MM-dd}.log.%i&lt;/fileNamePattern&gt;\n&lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;\n&lt;maxHistory&gt;30&lt;/maxHistory&gt;\n&lt;totalSizeCap&gt;2GB&lt;/totalSizeCap&gt;\n&lt;/rollingPolicy&gt;\n&lt;encoder&gt;\n&lt;pattern&gt;%p %d{HH:mm:ss.SSS} [%thread] \\(%c{0}\\) %m%n&lt;/pattern&gt;\n&lt;/encoder&gt;\n&lt;/appender&gt;\n&lt;logger name=\"org.fcrepo.auth\" additivity=\"false\" level=\"${fcrepo.log.auth:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.config\" additivity=\"false\" level=\"${fcrepo.log.config:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.event\" additivity=\"false\" level=\"${fcrepo.log.event:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.http.api\" additivity=\"false\" level=\"${fcrepo.log.http.api:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.http.commons\" additivity=\"false\" level=\"${fcrepo.log.http.commons:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.jms\" additivity=\"false\" level=\"${fcrepo.log.jms:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.kernel\" additivity=\"false\" level=\"${fcrepo.log.kernel:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.persistence\" additivity=\"false\" level=\"${fcrepo.log.persistence:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.search\" additivity=\"false\" level=\"${fcrepo.log.search:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo.storage\" additivity=\"false\" level=\"${fcrepo.log.storage:-null}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;logger name=\"org.fcrepo\" additivity=\"false\" level=\"${fcrepo.log:-INFO}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/logger&gt;\n&lt;root level=\"${fcrepo.log.root:-WARN}\"&gt;\n&lt;appender-ref ref=\"STDOUT\"/&gt;\n&lt;appender-ref ref=\"FILE\"/&gt;\n&lt;/root&gt;\n&lt;/configuration&gt;\n</code></pre></p> <p>Then alter your <code>$JAVA_OPTS</code> like above to include  <pre><code>-Dlogback.configurationFile=/opt/fcrepo/config/fcrepo-logback.xml\n</code></pre></p> <p>This will generate a log file at <code>${catalina.base}/logs/fcrepo.log</code> and will rotate each day or if the logs reaches 10MB. It will maintain 30 days of old logs, or 2GB whichever comes first.</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#blazegraph-2","title":"Blazegraph 2","text":""},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#creating-a-working-space-for-blazegraph","title":"Creating a Working Space for Blazegraph","text":"<p>Blazegraph needs a space for configurations and data; we\u2019re going to create this space in <code>/opt</code>.</p> <pre><code>sudo mkdir -p /opt/blazegraph/data\nsudo mkdir /opt/blazegraph/conf\nsudo chown -R tomcat:tomcat /opt/blazegraph\n</code></pre>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#downloading-and-placing-the-blazegraph-war","title":"Downloading and Placing the Blazegraph WAR","text":"<p>The Blazegraph <code>.war</code> file can be found in a few different places, but to ensure we\u2019re able to easily <code>wget</code> it, we\u2019re going to use the maven.org repository link to grab it.</p> <pre><code>cd /opt\nsudo wget -O blazegraph.war BLAZEGRAPH_WARFILE_LINK\nsudo mv blazegraph.war /opt/tomcat/webapps\nsudo chown tomcat:tomcat /opt/tomcat/webapps/blazegraph.war\n</code></pre> <ul> <li>BLAZEGRAPH_WAR_URL: You can find a link to this at the Maven repository for Blazegraph; you\u2019ll want to click the link for the latest version of Blazegraph 2.1.x, then get the link to the <code>.war</code> file within that version folder.</li> </ul> <p>Once this is downloaded, give it a moment to expand before moving on to the next step.</p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#configuring-logging","title":"Configuring Logging","text":"<p>We would like to have an appropriate logging configuration for Blazegraph, which can be useful for looking at incoming traffic and determining if anything has gone wrong with Blazegraph. Our logger isn\u2019t going to be much different than the default logger; it can be made more or less verbose by changing the default <code>WARN</code> levels. There are several other loggers that can be enabled, like a SPARQL query trace or summary query evaluation log; if these are desired they should be added in. Consult the Blazegraph documentation for more details.</p> <p><code>/opt/blazegraph/conf/log4j.properties | tomcat:tomcat/644</code> <pre><code>log4j.rootCategory=WARN, dest1\n\n# Loggers.\nlog4j.logger.com.bigdata=WARN\nlog4j.logger.com.bigdata.btree=WARN\n\n# Normal data loader (single threaded).\n#log4j.logger.com.bigdata.rdf.store.DataLoader=INFO\n\n# dest1\nlog4j.appender.dest1=org.apache.log4j.ConsoleAppender\nlog4j.appender.dest1.layout=org.apache.log4j.PatternLayout\nlog4j.appender.dest1.layout.ConversionPattern=%-5p: %F:%L: %m%n\n#log4j.appender.dest1.layout.ConversionPattern=%-5p: %r %l: %m%n\n#log4j.appender.dest1.layout.ConversionPattern=%-5p: %m%n\n#log4j.appender.dest1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n#log4j.appender.dest1.layout.ConversionPattern=%-4r(%d) [%t] %-5p %c(%l:%M) %x - %m%n\n\n# Rule execution log. This is a formatted log file (comma delimited).\nlog4j.logger.com.bigdata.relation.rule.eval.RuleLog=INFO,ruleLog\nlog4j.additivity.com.bigdata.relation.rule.eval.RuleLog=false\nlog4j.appender.ruleLog=org.apache.log4j.FileAppender\nlog4j.appender.ruleLog.Threshold=ALL\nlog4j.appender.ruleLog.File=/var/log/blazegraph/rules.log\nlog4j.appender.ruleLog.Append=true\nlog4j.appender.ruleLog.BufferedIO=false\nlog4j.appender.ruleLog.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ruleLog.layout.ConversionPattern=%m\n</code></pre></p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#adding-a-blazegraph-configuration","title":"Adding a Blazegraph Configuration","text":"<p>Our configuration will be built from a few different files that we will eventually reference in <code>JAVA_OPTS</code> and directly apply to Blazegraph; these include most of the functional pieces Blazegraph requires, as well as a generalized configuration for the <code>islandora</code> namespace it will use. As with most large configurations like this, these should likely be tuned to your preferences, and the following files only represent sensible defaults.</p> <p><code>/opt/blazegraph/conf/RWStore.properties | tomcat:tomcat/644</code> <pre><code>com.bigdata.journal.AbstractJournal.file=/opt/blazegraph/data/blazegraph.jnl\ncom.bigdata.journal.AbstractJournal.bufferMode=DiskRW\ncom.bigdata.service.AbstractTransactionService.minReleaseAge=1\ncom.bigdata.journal.Journal.groupCommit=false\ncom.bigdata.btree.writeRetentionQueue.capacity=4000\ncom.bigdata.btree.BTree.branchingFactor=128\ncom.bigdata.journal.AbstractJournal.initialExtent=209715200\ncom.bigdata.journal.AbstractJournal.maximumExtent=209715200\ncom.bigdata.rdf.sail.truthMaintenance=false\ncom.bigdata.rdf.store.AbstractTripleStore.quads=true\ncom.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false\ncom.bigdata.rdf.store.AbstractTripleStore.textIndex=false\ncom.bigdata.rdf.store.AbstractTripleStore.axiomsClass=com.bigdata.rdf.axioms.NoAxioms\ncom.bigdata.namespace.kb.lex.com.bigdata.btree.BTree.branchingFactor=400\ncom.bigdata.namespace.kb.spo.com.bigdata.btree.BTree.branchingFactor=1024\ncom.bigdata.journal.Journal.collectPlatformStatistics=false\n</code></pre></p> <p><code>/opt/blazegraph/conf/blazegraph.properties | tomcat:tomcat/644</code> <pre><code>com.bigdata.rdf.store.AbstractTripleStore.textIndex=false\ncom.bigdata.rdf.store.AbstractTripleStore.axiomsClass=com.bigdata.rdf.axioms.OwlAxioms\ncom.bigdata.rdf.sail.isolatableIndices=false\ncom.bigdata.rdf.store.AbstractTripleStore.justify=true\ncom.bigdata.rdf.sail.truthMaintenance=true\ncom.bigdata.rdf.sail.namespace=islandora\ncom.bigdata.rdf.store.AbstractTripleStore.quads=false\ncom.bigdata.namespace.islandora.lex.com.bigdata.btree.BTree.branchingFactor=400\ncom.bigdata.journal.Journal.groupCommit=false\ncom.bigdata.namespace.islandora.spo.com.bigdata.btree.BTree.branchingFactor=1024\ncom.bigdata.rdf.store.AbstractTripleStore.geoSpatial=false\ncom.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false\n</code></pre></p> <p><code>/opt/blazegraph/conf/inference.nt | tomcat:tomcat/644</code> <pre><code>&lt;http://pcdm.org/models#memberOf&gt; &lt;http://www.w3.org/2002/07/owl#inverseOf&gt; &lt;http://pcdm.org/models#hasMember&gt; .\n&lt;http://pcdm.org/models#fileOf&gt; &lt;http://www.w3.org/2002/07/owl#inverseOf&gt; &lt;http://pcdm.org/models#hasFile&gt; .\n</code></pre></p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#specifying-the-rwstoreproperties-in-java_opts","title":"Specifying the <code>RWStore.properties</code> in <code>JAVA_OPTS</code>","text":"<p>In order to enable our configuration when Tomcat starts, we need to add the location of <code>RWStore.properties</code> to the existing <code>JAVA_OPTS</code> environment variable that Tomcat uses in <code>/opt/tomcat/bin/setenv.sh</code>: <code>-Dcom.bigdata.rdf.sail.webapp.ConfigParams.propertyFile=/opt/blazegraph/conf/RWStore.properties -Dlog4j.configuration=file:/opt/blazegraph/conf/log4j.properties</code></p>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#restarting-tomcat_1","title":"Restarting Tomcat","text":"<p>Finally, restart Tomcat to pick up the changes we\u2019ve made.</p> <pre><code>sudo systemctl restart tomcat\n</code></pre>"},{"location":"installation/manual/installing-fedora-syn-and-blazegraph/#installing-blazegraph-namespaces-and-inference","title":"Installing Blazegraph Namespaces and Inference","text":"<p>The two other files we created, <code>blazegraph.properties</code> and <code>inference.nt</code>, contain information that Blazegraph requires in order to establish and correctly use the datasets Islandora will send to it. First, we need to create a dataset - contained in <code>blazegraph.properties</code> - and then we need to inform that dataset of the inference set we have contained in <code>inference.nt</code>.</p> <p><pre><code>curl -X POST -H \"Content-Type: text/plain\" --data-binary @/opt/blazegraph/conf/blazegraph.properties http://localhost:8080/blazegraph/namespace\n</code></pre> If this worked correctly, Blazegraph should respond with \"CREATED: islandora\" to let us know it created the islandora namespace. <pre><code>curl -X POST -H \"Content-Type: text/plain\" --data-binary @/opt/blazegraph/conf/inference.nt http://localhost:8080/blazegraph/namespace/islandora/sparql\n</code></pre> If this worked correctly, Blazegraph should respond with some XML letting us know it added the 2 entries from inference.nt to the namespace.</p>"},{"location":"installation/manual/installing-solr/","title":"Installing Solr","text":"<p>Needs Maintenance</p> <p>The manual installation documentation is in need of attention. We are aware that some components no longer work as documented here. If you are interested in helping us improve the documentation, please see Contributing.</p>"},{"location":"installation/manual/installing-solr/#in-this-section-we-will-install","title":"In this section, we will install:","text":"<ul> <li>Apache Solr 8, the search engine used to index and find Drupal content</li> <li>search_api_solr, the Solr implementation of Drupal's search API</li> </ul>"},{"location":"installation/manual/installing-solr/#solr-9","title":"Solr 9","text":""},{"location":"installation/manual/installing-solr/#downloading-and-placing-solr","title":"Downloading and Placing Solr","text":"<p>The Solr binaries can be found at the Solr downloads page; the most recent stable release of Solr 9 should be used.</p> <p><pre><code># While generally we download tarballs as .tar.gz files without version\n# information, the Solr installer is a bit particular in that it expects a .tgz\n# file with the same name as the extracted folder it contains. It's odd, and we\n# can't really get around it.\ncd /opt\nsudo wget -O SOLR_TARBALL SOLR_DOWNLOAD_LINK\nsudo tar -xzvf SOLR_TARBALL\n</code></pre> - <code>SOLR_DOWNLOAD_LINK</code>: NOTICE: This will depend on a few different things, not least of all the current version of Solr. The link to the <code>.tgz</code> for the binary on the downloads page will take you to a list of mirrors that Solr can be downloaded from, and provide you with a preferred mirror at the top. This preferred mirror should be used as the <code>SOLR_DOWNLOAD_LINK</code>. - <code>SOLR_TARBALL</code>: The filename that was downloaded, e.g., <code>solr-9.6.1.tgz</code></p>"},{"location":"installation/manual/installing-solr/#running-the-solr-installer","title":"Running the Solr Installer","text":"<p>Solr includes an installer that does most of the heavy lifting of ensuring we have a Solr user, a location where Solr lives, and configurations in place to ensure it\u2019s running on boot.</p> <p><pre><code>sudo UNTARRED_SOLR_FOLDER/bin/install_solr_service.sh SOLR_TARBALL\n</code></pre> - <code>UNTARRED_SOLR_FOLDER</code>: This will likely simply be <code>solr-VERSION</code>, where <code>VERSION</code> is the version number that was downloaded.</p> <p>The installer will start the service for you. Check the status and stop and restart if needed:</p> <pre><code>sudo systemctl status solr\nsudo systemctl stop solr\nsudo systemctl start solr\n</code></pre> <p>If you want to use the web dashboard (for development only) you can edit the <code>solr.in.sh</code> file to make it more accessible.</p> <p>Find <code>#SOLR_JETTY_HOST=\"127.0.0.1\"</code> and change it to <code>SOLR_JETTY_HOST=\"0.0.0.0\"</code>. (Note the lack of <code>#</code> now.)</p> <p>Restart Solr <code>sudo systemctl restart solr</code> and go to http://localhost:8983/solr.</p>"},{"location":"installation/manual/installing-solr/#increasing-the-open-file-limit-optional","title":"Increasing the Open File Limit (Optional)","text":"<p>Solr's installation guide recommends that you increase the open file limit so that operations aren't disrupted while Solr is trying to access things in its index. This limit can be increased while the system is running, but doing so won't persist after a reboot. You can hard-increase this limit using your system's <code>sysctl</code> file:</p> <p><code>/etc/sysctl.conf</code></p> <p>Add the following line to the end of the file:</p> <pre><code>fs.file-max = 65535\n</code></pre> <p>Then apply your new configuration.</p> <pre><code>sudo sysctl -p\n</code></pre>"},{"location":"installation/manual/installing-solr/#installing-search_api_solr","title":"Installing <code>search_api_solr</code>","text":"<p>Rather than use an out-of-the-box configuration that won\u2019t be suitable for our purposes, we\u2019re going to use the Drupal <code>search_api_solr</code> module to generate one for us. This module was already installed if you used the starter site, but you can install it if you didn't:</p> <pre><code>cd /var/www/html/drupal\nsudo -u www-data composer require drupal/search_api_solr:^4.2\ndrush -y en search_api_solr\n</code></pre> <p>You should see an output similar to this: <pre><code>The following module(s) will be enabled: search_api_solr, language, search_api\n\n // Do you want to continue?: yes.\n\n [success] Successfully enabled: search_api_solr, language, search_api\n</code></pre></p>"},{"location":"installation/manual/installing-solr/#configuring-search_api_solr","title":"Configuring search_api_solr","text":"<p>Before we can create configurations to use with Solr, the core we created earlier needs to be referenced in Drupal. Again, the starter site provides this already; but if you installed it yourself, the directions below should help.</p> <p>Log in to the Drupal site at <code>/user</code> using the sitewide administrator username and password (if using defaults from previous chapters this should be <code>islandora</code> and <code>islandora</code>), then navigate to <code>/admin/config/search/search-api/add-server</code>.</p> <p>Fill out the server addition form using the following options:</p> <p></p> <p></p> <p></p> <ul> <li><code>SERVER_NAME</code>: <code>islandora</code><ul> <li>This is completely arbitrary, and is simply used to differentiate this search server configuration from all others. Write down or otherwise pay attention to the <code>machine_name</code> generated next to the server name you type in; this will be used in the next step.</li> </ul> </li> </ul> <p>As a recap for this configuration:</p> <ul> <li>Server name should be an arbitrary identifier for this server</li> <li>Enabled should be checked</li> <li>Backend should be set to Solr</li> <li>Under CONFIGURE SOLR BACKEND, Solr Connector should be set to Standard</li> <li>Under CONFIGURE STANDARD SOLR CONNECTOR:<ul> <li>HTTP protocol is simply set to http since we've set this up on the same machine Drupal lives on. On a production installation, Solr should likely be installed behind an HTTPS connection.</li> <li>Solr host can be set to localhost since, again, this is set up on the same machine Drupal lives on. On a production installation, this may vary, especially if parts of the installation live on different severs</li> <li>Solr port should be set to the port Solr was installed on, which is 8983 by default</li> <li>Solr path should be set to the configured path to the instance of Solr; in a default installation, there is only one Solr instance, and it lives at /</li> <li>Solr core should be the name of the Solr core you created earlier, which is why it's listed as SOLR_CORE here</li> </ul> </li> <li>Under ADVANCED SERVER CONFIGURATION, solr.install.dir should be set to the path where we installed Solr, which this guide has established at /opt/solr</li> </ul> <p>Click Save to create the server configuration.</p> <p>NOTICE     You can ignore the error about an incompatible Solr schema; we're going to set this up in the next step. In fact, if you refresh the page after restarting Solr in the next step, you should see the error disappear.</p>"},{"location":"installation/manual/installing-solr/#generating-and-applying-solr-configurations","title":"Generating and Applying Solr Configurations","text":"<p>Now that our core is in place and our Drupal-side configurations exist, we\u2019re ready to generate Solr configuration files to connect this site to our search engine.</p> <p><pre><code>cd /var/www/html/drupal\ndrush solr-gsc SERVER_MACHINE_NAME solrconfig.zip\nunzip -d ~/solrconfig solrconfig.zip\nsudo -u solr /opt/solr/bin/solr create_core -c SOLR_CORE -d ~/solrconfig -n SOLR_CORE\nsudo systemctl restart solr\n</code></pre> - <code>SERVER_MACHINE_NAME</code>: This should be the <code>machine_name</code> that was automatically generated when creating the configuration in the above step. The starter site uses <code>default_solr_server</code>.</p>"},{"location":"installation/manual/installing-solr/#adding-an-index","title":"Adding an Index","text":"<p>The site template provides an index for us; but if you didn't use it, you need to set up your index configuration. Navigate to <code>/admin/config/search/search-api/add-index</code> and check off the things you'd like to be indexed.</p> <p>NOTICE     You should come back here later and reconfigure this after completing the last step in this guide. The default indexing configuration is pretty permissive, and you may want to restrict, for example, indexed content to just Islandora-centric bundles. This guide doesn't set up the index's fields either, which are going to be almost wholly dependent on the needs of your installation. Once you complete that configuration later on, re-index Solr from the configuration page of the index we're creating here.</p> <p></p> <p></p> <p>Click Save to add your index and kick off indexing of existing items.</p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/","title":"Installing Tomcat and Cantaloupe","text":"<p>Needs Maintenance</p> <p>The manual installation documentation is in need of attention. We are aware that some components no longer work as documented here. If you are interested in helping us improve the documentation, please see Contributing.</p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#in-this-section-we-will-install","title":"In this section, we will install:","text":"<ul> <li>Tomcat 9, the Java servlet container that will serve up some Java applications on various endpoints, including, importantly, Fedora</li> <li>Cantaloupe 5, the image tileserver - running in Tomcat - that will be used to serve up large images in a web-accessible fashion</li> </ul>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#tomcat-9","title":"Tomcat 9","text":""},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#creating-a-tomcat-user","title":"Creating a <code>tomcat</code> User","text":"<p>Apache Tomcat, and all its processes, will be owned and managed by a specific user for the purposes of keeping parts of the stack segregated and accountable.</p> <pre><code>sudo addgroup tomcat\nsudo adduser tomcat --ingroup tomcat --home /opt/tomcat --shell /usr/bin\n</code></pre> <p>You will be prompted to create a password for the <code>tomcat</code> user; all the other information as part of the <code>adduser</code> command can be ignored.</p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#downloading-and-placing-tomcat-9","title":"Downloading and Placing Tomcat 9","text":"<p>Tomcat 9 itself can be installed in several different ways; while it\u2019s possible to install via <code>apt-get</code>, this doesn\u2019t give us a great deal of control over exactly how we\u2019re going to run and manage it; as a critical part of the stack, it is beneficial for our purposes to have a good frame of reference for the inner workings of Tomcat.</p> <p>We\u2019re going to download the latest version of Tomcat to <code>/opt</code> and set it up so that it runs automatically. Bear in mind that with the following commands, this is going to be entirely relative to the current version of Tomcat 9, which we\u2019ll try to mitigate as we go.</p> <p><pre><code>cd /opt\nsudo wget -O tomcat.tar.gz TOMCAT_TARBALL_LINK\nsudo tar -zxvf tomcat.tar.gz\nsudo mv /opt/TOMCAT_DIRECTORY/* /opt/tomcat\nsudo chown -R tomcat:tomcat /opt/tomcat\n</code></pre> - <code>TOMCAT_TARBALL_LINK</code>: No default can be provided here; you should navigate to the Tomcat 9 downloads page and grab the link to the latest <code>.tar.gz</code> file under the \u201cCore\u201d section of \u201cBinary Distributions\u201d. It is highly recommended to grab the latest version of Tomcat 9, as it will come with associated security patches and fixes. - <code>TOMCAT_DIRECTORY</code>: This will also depend entirely on the exact version of tomcat downloaded - for example, <code>apache-tomcat-9.0.50</code>. Again, <code>ls /opt</code> can be used to find this.</p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#creating-a-setenvsh-script","title":"Creating a setenv.sh Script","text":"<p>When Tomcat runs, some configuration needs to be pre-established as a series of environment variables that will be used by the script that runs it.</p> <p><code>/opt/tomcat/bin/setenv.sh | tomcat:tomcat/755</code> <pre><code>export CATALINA_HOME=\"/opt/tomcat\"\nexport JAVA_HOME=\"PATH_TO_JAVA_HOME\"\nexport JAVA_OPTS=\"-Djava.awt.headless=true -server -Xmx1500m -Xms1000m\"\n</code></pre> - <code>PATH_TO_JAVA_HOME</code>: This will vary a bit depending on the environment, but will likely live in <code>/usr/lib/jvm</code> somewhere (e.g., <code>/usr/lib/jvm/java-11-openjdk-amd64</code>); again, in an Ubunutu environment you can check a part of this using <code>update-alternatives --list java</code>, which will give you the path to the JRE binary within the Java home. Note that <code>update-alternatives --list java</code> will give you the path to the binary, so for <code>PATH_TO_JAVA_HOME</code> delete the <code>/bin/java</code> at the end to get the Java home directory, so it should look something like this: <pre><code>export JAVA_HOME=\"/usr/lib/jvm/java-11-openjdk-amd64\"\n</code></pre></p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#creating-the-tomcat-service","title":"Creating the Tomcat Service","text":"<p>Tomcat includes two shell scripts we\u2019re going to make use of - <code>startup.sh</code> and <code>shutdown.sh</code> - which are light wrappers on top of a third script, <code>catalina.sh</code>, which manages spinning up and shutting down the Tomcat server.</p> <p>Debian and Ubuntu use <code>systemctl</code> to manage services; we\u2019re going to create a .service file that can run these shell scripts.</p> <p><code>/etc/systemd/system/tomcat.service | root:root/755</code> <pre><code>[Unit]\nDescription=Tomcat\n\n[Service]\nType=forking\nExecStart=/opt/tomcat/bin/startup.sh\nExecStop=/opt/tomcat/bin/shutdown.sh\nSyslogIdentifier=tomcat\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#enabling-and-starting-tomcat","title":"Enabling and Starting Tomcat","text":"<p>We\u2019re going to both <code>enable</code> and <code>start</code> Tomcat. Enabling Tomcat will ensure that it starts on boot, the timing of which is defined by the <code>[Install]</code> section\u2019s <code>WantedBy</code> statement, which specifies what it should start after. This is separate from starting it, which we need to do now in order to get Tomcat up and running without requiring a reboot.</p> <pre><code>sudo systemctl enable tomcat\nsudo systemctl start tomcat\n</code></pre> <p>We can check that Tomcat has started by running <code>sudo systemctl status tomcat | grep Active</code>; we should see that Tomcat is <code>active (running)</code>, which is the correct result of startup.sh finishing its run successfully.</p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#installing-cantaloupe-5","title":"Installing Cantaloupe 5","text":"<p>Since version 5, Cantaloupe is released as a standalone Java application and is no longer deployed in Tomcat via a .war file. Even so, we can still fine-tune how it runs and even install it as a service.</p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#downloading-cantaloupe","title":"Downloading Cantaloupe","text":"<p>Releases of Cantaloupe live on the Cantaloupe release page; the latest version can be found here as a <code>.zip</code> file.</p> <p><pre><code>cd /opt/\nsudo wget -O cantaloupe.zip CANTALOUPE_RELEASE_URL\nsudo unzip cantaloupe.zip\nsudo mv [CANTALOUPE_VERSION] cantaloupe\nsudo rm cantaloupe.zip\n</code></pre> - <code>CANTALOUPE_RELEASE_URL</code>: It\u2019s recommended we grab the latest version of Cantaloupe 5. This can be found on the above-linked release page, as the <code>.zip</code> version; for example, https://github.com/cantaloupe-project/cantaloupe/releases/download/v5.0.6/cantaloupe-5.0.6.zip - make sure not to download the source code zip file as that isn't compiled for running out-of-the-box. - <code>CANTALOUPE_VERSION</code>: This will depend on the exact version of Cantaloupe downloaded; in the above example release, this would be <code>cantaloupe-5.0.6</code></p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#creating-a-cantaloupe-configuration","title":"Creating a Cantaloupe Configuration","text":"<p>Cantaloupe pulls its configuration from a file called <code>cantaloupe.properties</code>; there are also some other files that can contain instructions for Cantaloupe while it\u2019s running; specifically, we\u2019re going to copy over the <code>delegates.rb</code> file, which can also contain custom configuration. We won\u2019t make use of this file; we\u2019re just copying it over for demonstration purposes.</p> <p>Creating these files from scratch is not recommended; rather, we\u2019re going to take the default cantaloupe configurations and plop them into their own folder so we can work with them.</p> <pre><code>cd cantaloupe\nsudo cp cantaloupe.properties.sample cantaloupe.properties\nsudo cp delegates.rb.sample delegates.rb\n</code></pre> <p>Most of the out-of-the-box configuration will work fine for our purposes. We will change the source lookup and logging, but it\u2019s highly recommended that you take a look through the rest of the <code>cantaloupe.properties</code> and see what changes can be made. Review the config block below and change the related portions of yours to match.</p> <p><code>/opt/cantaloupe/cantaloupe.properties</code> <pre><code>##############\n# SOURCES\n##############\n\nsource.static = HttpSource\n\n##############\n# HttpSource\n##############\n\nHttpSource.BasicLookupStrategy.url_prefix =\n\n##############\n# LOGGING\n##############\n\nlog.application.FileAppender.pathname = /var/log/islandora/cantaloupe-application.log\n\nlog.application.RollingFileAppender.enabled = true\nlog.application.RollingFileAppender.pathname = /var/log/islandora/cantaloupe-application.log\nlog.application.RollingFileAppender.TimeBasedRollingPolicy.filename_pattern = /var/log/islandora/cantaloupe-application-%d{yyyy-MM-dd}.log\n\nlog.error.FileAppender.pathname = /var/log/islandora/cantaloupe-error.log\n\nlog.error.RollingFileAppender.enabled = true\nlog.error.RollingFileAppender.pathname = /var/log/islandora/cantaloupe-error.log\nlog.error.RollingFileAppender.TimeBasedRollingPolicy.filename_pattern = /var/log/islandora/cantaloupe-error-%d{yyyy-MM-dd}.log\n\nlog.access.FileAppender.pathname = /var/log/islandora/cantaloupe-access.log\n\nlog.access.RollingFileAppender.enabled = true\nlog.access.RollingFileAppender.pathname = /var/log/islandora/cantaloupe-access.log\nlog.access.RollingFileAppender.TimeBasedRollingPolicy.filename_pattern = /var/log/islandora/cantaloupe-access-%d{yyyy-MM-dd}.log\n</code></pre></p>"},{"location":"installation/manual/installing-tomcat-and-cantaloupe/#installing-and-configuring-cantaloupe-as-a-service","title":"Installing and configuring Cantaloupe as a service","text":"<p>Since it is a standalone application, we can configure Cantaloupe as a systemd service like we did with Tomcat, so it can start on boot:</p> <p><code>/etc/systemd/system/cantaloupe.service | root:root/755</code> <pre><code>[Unit]\nDescription=Cantaloupe\n\n[Service]\nExecStart=java -cp /opt/cantaloupe/cantaloupe-CANTALOUPE_VER.jar -Dcantaloupe.config=/opt/cantaloupe/cantaloupe.properties -Xmx1500m -Xms1000m edu.illinois.library.cantaloupe.StandaloneEntry\nSyslogIdentifier=cantaloupe\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> - <code>CANTALOUPE_VER</code>: This will depend on the exact version of Cantaloupe downloaded; in the above example release, this would be <code>cantaloupe-5.0.3</code></p> <p>We can now enable the service and run it:</p> <pre><code>sudo systemctl enable cantaloupe\nsudo systemctl start cantaloupe\n</code></pre> <p>We can check the service status with <code>sudo systemctl status cantaloupe | grep Active</code> and the splash screen of Cantaloupe should be available at http://localhost:8182/iiif/2.</p> <p>If you have trouble connecting, check the status of your port and allow it if necessary:</p> <pre><code>sudo ufw status verbose\nsudo ufw allow 8182/tcp\n</code></pre>"},{"location":"installation/manual/introduction/","title":"Introduction","text":"<p>Needs Maintenance</p> <p>The manual installation documentation is in need of attention. We are aware that some components no longer work as documented here. If you are interested in helping us improve the documentation, please see Contributing.</p> <p>Notice</p> <p>The manual installation guide is not intended to describe the Islandora installation but rather an Islandora installation. The server created using this guide is not hardened, will not be easily scalable, and the components may not be configured in a way you consider easy to work with. A production instance of Islandora should be installed and maintained by a professional with an understanding of Linux and server administration.</p> <p>This guide will contain generalized steps on installation and configuration of the various components, but will contain specific example commands for executing these steps on an Ubuntu 20.04 Server.</p>"},{"location":"installation/manual/introduction/#some-prerequisite-knowledge","title":"Some Prerequisite Knowledge","text":"<p>This guide assumes the user has some knowledge:</p> <ul> <li>A general idea of how to work on the command-line of a Linux server using Bash. Commands are described in detail, but servers are volatile, and knowledge is still assumed in case anything happens outside of your expectations.</li> <li>An understanding of how to modify files from the command line. Configurations will often need to be created or modified in order to get things up and running. This might involve using an application like <code>nano</code> or <code>vi</code>/<code>vim</code>, or creating these files locally and uploading them to the server. It should also generally be assumed that most of these configuration files will have to be created or edited using <code>sudo</code>, and that permissions and ownership may need to be specified on these files.</li> </ul>"},{"location":"installation/manual/introduction/#conventions-used-in-this-guide","title":"Conventions Used in This Guide","text":""},{"location":"installation/manual/introduction/#chronological-organization","title":"Chronological Organization","text":"<p>The steps in this guide are listed in chronological order of installation and configuration. Some sections will reference variables and rely on components installed in previous sections. It does not account for skipping over or otherwise changing the order of installation steps; bear this in mind if you decide to do things out of the provided order.</p>"},{"location":"installation/manual/introduction/#replacement-variables","title":"Replacement Variables","text":"<p>It is expected that the person setting up the site may want to use different usernames, passwords, and other such variables than the ones presented by default in this guide. Additionally, some defaults can't be provided, such as up-to-date version information for externally-provided components. In such cases, the replacement variables will be placed in all capital letters, and a description of the variables, any possible defaults, and how to get up-to-date information, will be listed below.</p>"},{"location":"installation/manual/introduction/#bash-commands","title":"Bash Commands","text":"<p>Notice</p> <p>Command blocks are always assumed to start at the home folder of the user originally created during the server installation. They are never run as <code>root</code>; if root access is required, <code>sudo</code> will be specified, and if files are created belonging to <code>root</code> that should not belong to <code>root</code>, <code>chmod</code> and <code>chown</code> will be run against them immediately afterwards to ensure correct permissions. If commands need to be run from a different working directory, an absolute path will be specified to use with <code>cd</code>. If you're concerned about whether or not a code block can be run from your current working directory, run <code>cd ~</code> before executing any commands in it.</p> <p>Commands to be run on the command line will be placed in code blocks, with one command per line, and any replacement variables below, e.g.,</p> <p><pre><code>sudo run --this-command\npython3 run.py /this/other/command --with-param PARAMETER\n</code></pre> - <code>PARAMETER</code>: <code>some_sensible_default</code>, perhaps with an explanation of why, or how to determine alternatives</p>"},{"location":"installation/manual/introduction/#editing-files-in-place","title":"Editing Files In Place","text":"<p>When an individual file needs to be modified in place (as opposed to replacing it outright), a Before and After quote will be provided that identifies one or more lines in the file, what the default installed version of that file looks like on that line, and what the line should look like after it has been modified, like so:</p> <p><code>/path/to/file_being_modified</code></p> <p>Before:</p> <p>174 | Here is what line 174 in the file looked like before</p> <p>175 | And here is what the following line looked like in the file before</p> <p>After:</p> <p>174 | Here is what line 174 should look like after modification</p> <p>175 | And here is what the following line should look like after modification: VARIABLE</p> <ul> <li><code>VARIABLE</code>: <code>some_value</code>, perhaps with an explanation of why</li> </ul> <p>It should be noted that configuration files and the like are subject to change by the organizations that maintain their respective applications; this guide generally recommends installing the latest version of these applications, as these generally include security updates. It is expected that the implementer will be able to search through a file and find specific lines in the case where the maintaining organization has moved it in a subsequent patch. In most cases, configuration files will be provided outright to avoid these scenarios.</p>"},{"location":"installation/manual/introduction/#adding-or-replacing-files","title":"Adding or Replacing Files","text":"<p>When a file needs to be added or replaced, it will be described in three sections:</p> <ul> <li>A line that describes the path to the file, as well as the owner, group, and umask for the file; it is assumed that the person following the guide will use <code>chmod</code> and <code>chown</code> appropriately to apply the owner, group, and umask</li> <li>The entire contents of the file in a code block, including any portions that need to be replaced with specific values</li> <li>Those replacement values</li> </ul> <p><code>/the/path/to/some/file.php | owner:group/umask</code> <pre><code>&lt;?php\n/**\n * Here is the entire contents of a PHP file\n */\nfunction do_something($to_this) {\n$to_this += THE_NUMBER_TO_ADD_TO_THIS;\n}\n?&gt;\n</code></pre> - <code>THE_NUMBER_TO_ADD_TO_THIS</code>: 12, perhaps with an explanation of why, or other numbers that may be appropriate</p>"},{"location":"installation/manual/introduction/#account-tracker","title":"Account Tracker","text":"<p>We will create several accounts during the installation process. For some items the instructions use placeholders in square brackets (<code>[]</code>). Create your own and use them in place of these placeholders as appropriate.</p> <ul> <li>MySQL root account</li> <li>username: <code>root</code></li> <li>password: <code>[mysql_root_password]</code></li> <li>MySQL account for Drupal database access</li> <li>username: <code>[mysql_drupal]</code></li> <li>password: <code>[mysql_drupal_password]</code></li> <li>MySQL account for Fedora access</li> <li>username: <code>[mysql_fedora]</code></li> <li>password: <code>[mysql_fedora_password]</code></li> <li>Tomcat</li> <li>username: <code>tomcat</code></li> <li>password: <code>[tomcat_user_password]</code></li> <li>Fedora fedoraAdmin account</li> <li>username: <code>fedoraAdmin</code></li> <li>password: <code>[fedora_admin_password]</code></li> <li>Fedora fedoraUser account</li> <li>username: <code>fedoraUser</code></li> <li>password: <code>[fedora_user_password]</code></li> <li>ActiveMQ</li> <li>username: <code>[activemq_user]</code></li> <li>password: <code>[activemq_user_password]</code></li> </ul>"},{"location":"installation/manual/introduction/#troubleshooting","title":"Troubleshooting","text":"<p>The most common issues you will likely run into when manually provisioning a server are:</p> <ul> <li>Files or directories are not owned by the user who needs access to them, and can therefore not be written to. Check the ownership of files using <code>ls -la</code>, and ensure their ownership using <code>chown USER</code> for files, and <code>chown -R USER</code> for directories</li> <li>Replacement variables were left in place in files specified by the guide. Ensure any replacement variables such as server addresses and passwords are swapped out when writing files to the server</li> </ul> <p>For any other issues, don't hesitate to email the mailing list to ask for help. If you think that a part of the installation documentation is incorrect or could be improved, please create an issue in the documentation issues queue and give it a <code>documentation</code> tag. Bear in mind that this guide is built for Ubuntu 20.04 and attempts to give generalized instructions; you will likely naturally encounter situations where your own environment needs to differ from the guide.</p>"},{"location":"installation/manual/preparing-a-webserver/","title":"Preparing a LAPP Server","text":"<p>Needs Maintenance</p> <p>The manual installation documentation is in need of attention. We are aware that some components no longer work as documented here. If you are interested in helping us improve the documentation, please see Contributing.</p>"},{"location":"installation/manual/preparing-a-webserver/#in-this-section-we-will-install","title":"In this section, we will install:","text":"<ul> <li>Java/OpenJDK is the Java runtime environment used by multiple components: Solr, Cantaloupe, Alpaca, Fedora, and Blazegraph.</li> <li>Apache 2, the webserver that will deliver webpages to end users</li> <li>PHP 8, the runtime code interpreter that Drupal will use to generate webpages and other services via apache, as well as that Drush and Composer will use to run tasks from the command line</li> <li>Several modules for PHP 8 which are required to run the PHP code that Drupal and other applications will be executing</li> <li>MySQL, the database that Drupal will use for storage (as well as other applications down the line)</li> </ul>"},{"location":"installation/manual/preparing-a-webserver/#installing-openjdk-11","title":"Installing OpenJDK 11","text":"<p>Tomcat runs in a Java runtime environment, so we'll need one to continue. In our case, OpenJDK 11 is open-source, free to use, and can fairly simply be installed using <code>apt-get</code>:</p> <pre><code>sudo apt-get -y install openjdk-11-jdk openjdk-11-jre\n</code></pre> <p>The installation of OpenJDK via <code>apt-get</code> establishes it as the de-facto Java runtime environment to be used on the system, so no further configuration is required.</p> <p>The resultant location of the java JRE binary (and therefore, the correct value of <code>JAVA_HOME</code> when it\u2019s referenced) will vary based on the specifics of the machine it\u2019s being installed on; that being said, you can find its exact location using <code>update-alternatives</code>:</p> <p><pre><code>update-alternatives --list java\n</code></pre> Take a note of this path as we will need it later.</p>"},{"location":"installation/manual/preparing-a-webserver/#apache-2","title":"Apache 2","text":""},{"location":"installation/manual/preparing-a-webserver/#install-apache-2","title":"Install Apache 2","text":"<p>Apache can typically be installed and configured outright by your operating system\u2019s package manager:</p> <pre><code>sudo apt-get -y install apache2 apache2-utils\n</code></pre> <p>This will install:</p> <ul> <li>A <code>systemd</code> service that will ensure Apache can be stopped and started, and will run when the machine is powered on</li> <li>A set of Apache configurations in <code>/etc/apache2</code>, including the basic configuration, ports configuration, enabled mods, and enabled sites</li> <li>An Apache webroot in <code>/var/www/html</code>, configured to be the provided server on port <code>:80</code> in <code>/etc/apache2/sites-enabled/000-default.conf</code>; we\u2019ll make changes and additions to this file later</li> <li>A user and group, <code>www-data</code>, which we will use to read/write web documents.</li> </ul>"},{"location":"installation/manual/preparing-a-webserver/#enable-apache-mods","title":"Enable Apache Mods","text":"<p>We\u2019re going to enable a couple of Apache mods that Drupal highly recommends installing, and which are de-facto considered required by Islandora:</p> <pre><code>sudo a2enmod ssl\nsudo a2enmod rewrite\nsudo systemctl restart apache2\n</code></pre>"},{"location":"installation/manual/preparing-a-webserver/#add-the-current-user-to-the-www-data-group","title":"Add the Current User to the <code>www-data</code> Group","text":"<p>Since the user we are currently logged in as is going to work quite a bit inside the Drupal directory, we want to give it group permissions to anything the <code>www-data</code> group has access to. When we run <code>composer</code>, <code>www-data</code> will also be caching data in our own home directory, so we want this group modification to go in both directions.</p> <p>N.B. This code block uses backticks, not single quotes; this is an important distinction as backticks have special meaning in <code>bash</code>.</p> <p>Note If doing this in the terminal, replace \"whoami\" with your username and remove the backticks</p> <pre><code>sudo usermod -a -G www-data `whoami`\nsudo usermod -a -G `whoami` www-data\n# Immediately log back in to apply the new group.\nsudo su `whoami`\n</code></pre>"},{"location":"installation/manual/preparing-a-webserver/#php-8x","title":"PHP 8.x","text":"<p>Installing Alternate Versions</p> <p>Although the instructions below will install PHP 8.3, the instructions should work for future versions by replacing the <code>8.3</code> with whatever version you are attempting to install.</p>"},{"location":"installation/manual/preparing-a-webserver/#install-php-8x","title":"Install PHP 8.x","text":"<p>If you're running Ununtu 20.04+ you should be able to install PHP 8 from the apt packages directly, although the <code>ondrej/php</code> repository provides additional libraries:</p> <pre><code>sudo apt update\nsudo add-apt-repository ppa:ondrej/php\nsudo apt update\nsudo apt install php8.3 libapache2-mod-php unzip\nsudo apt install php8.3-{cli,common,curl,gd,imap,intl,mysql,opcache,redis,xdebug,xml,yaml,zip}\n</code></pre> <p>Restart Apache to make the changes active:</p> <pre><code>sudo systemctl restart apache2\n</code></pre> <p>Installation directories created: </p> <ul> <li><code>/etc/php/8.3</code> (this is where you can edit PHP settings, such as timeouts, as needed for your site)</li> <li><code>/usr/bin/php8.3</code></li> </ul>"},{"location":"installation/manual/preparing-a-webserver/#mysql","title":"MySQL","text":""},{"location":"installation/manual/preparing-a-webserver/#install","title":"Install","text":"<pre><code>sudo apt install mysql-server\n</code></pre> <p>There are a few ways to check the MySQL status:</p> <pre><code>sudo service mysql status  # press \"q\" to exit\nsudo ss -tap | grep mysql\nsudo service mysql restart\nsudo journalctl -u mysql   # helps troubleshooting\n</code></pre>"},{"location":"models/audio/","title":"Audio","text":""},{"location":"models/audio/#media-and-file-types","title":"Media and File Types","text":"<p>Islandora Starter Site uses the built-in Drupal \"Audio\" media type for video. Islandora Starter Site configures it to accept files of type <code>mp3</code>, <code>wav</code>, and <code>aac</code>.</p>"},{"location":"models/audio/#derivatives","title":"Derivatives","text":"<p>Islandora uses Homarus (ffmpeg as a microservice) to create audio derivatives. Islandora Starter Site sets you up to create:</p> <ul> <li>\"Service file\" from the original file, with parameters <code>-codec:a libmp3lame -q:a 5</code>, stored in the public filesystem</li> </ul> <p>These parameters can be changed in the configuration for the Drupal Action that Islandora uses to generate an Audio derivative.</p> <p>Islandora Starter Site sets up a context to automatically create this derivative when:</p> <ul> <li>The Audio media is tagged with the \"Original File\" term (a term with External URI <code>http://pcdm.org/use#OriginalFile</code>)</li> <li>The media's parent node is tagged with the \"Audio\" model (a term with External URI <code>http://purl.org/coar/resource_type/c_18cc</code>)</li> </ul> <p>The mimetype formats allowed by Homarus are configured in Homarus itself - see Installing Crayfish</p>"},{"location":"models/audio/#display","title":"Display","text":"<p>Drupal provides an \"Audio\" field formatter for file fields that displays a simple playable audio widget. It works but does not support captions/subtitles. Islandora provides an \"Audio with captions\" formatter that allows for captions.</p> <p>To use the captions feature out of the box, add the captions track as a WEBVTT file (<code>.vtt</code>) in the Audio media's \"Track\" field (see below regarding which Audio media to use). If you don't have the \"Track\" field (provided by Islandora Starter Site), create a field of type \"Media Track\" (a type provided by Islandora) on the same Media (or more broadly, same entity) as your audio file.  Then use the Manage Display page to set your audio file field to render using the \"Audio with captions\" field formatter.</p> <p>If you're using Islandora Starter Site, you can expect to see an audio player on your node. This is done with a special view (an EVA view) that displays service files, which is configured to show on Repository Item's default display mode (on the \"Manage Display\" page). The EVA view renders the service file media using the \"Source\" view mode. For Audio media, this is configured to show only the audio file using the \"Audio with Captions\" widget. Note that captions, to be displayed, must be on the media that is playing. Thus, when the Service file media is being played, captions on the Original File media are ignored. </p>"},{"location":"models/video/","title":"Video","text":""},{"location":"models/video/#media-and-file-types","title":"Media and file types","text":"<p>Islandora Starter Site uses the built-in Drupal \"Video\" media type for videos. Islandora Starter Site configures it to accept files of type <code>mp4</code>.</p> <p>The Install Profile also makes available the \"Remote video\" media type, but its behaviour has not been publicly documented.</p>"},{"location":"models/video/#derivatives","title":"Derivatives","text":"<p>Islandora uses Homarus (ffmpeg as a microservice) to create video derivatives. Islandora Starter Site sets you up to create:</p> <ul> <li>Service file with mimetype video/mp4 [yes, this is the same as the input, i'm not sure if it downsamples]</li> <li>Thumbnail with mimetype image/jpeg, derived from one second into the video and scaled down to ~100 px using the command <code>-ss 00:00:01.000 -frames 1 -vf scale=100:-2</code>. </li> </ul> <p>These parameters can be changed in the configuration for the Drupal Actions that Islandora uses to create video derivatives.</p> <p>Islandora Starter Site sets up a context to automatically create this derivative when:</p> <ul> <li>The Video media is tagged with the \"Original File\" term (a term with External URI <code>http://pcdm.org/use#OriginalFile</code>)</li> <li>The media's parent node is tagged with the \"Video\" model (a term with External URI <code>http://purl.org/coar/resource_type/c_18cc</code>)</li> </ul> <p>The mimetype formats allowed by Homarus are configured in Homarus itself - see Installing Crayfish</p>"},{"location":"models/video/#display","title":"Display","text":"<p>Drupal provides a \"Video\" field formatter for file fields that displays a simple playable video widget. It works but does not support captions/subtitles. Islandora provides a \"Video with Captions\" formatter that allows for captions.</p> <p>To use the Captions feature out of the box, add the captions track as a  WEBVTT file (<code>.vtt</code>) in the Video media's \"Track\" field (see below regarding which Video media to use). If you don't have the \"Track\" field (provided by Islandora Starter Site), create a field of type \"Media Track\" (a type provided by Islandora) on the same Media (or more broadly, same entity) as your audio file.  Then use the Manage Display page to set your audio file field to render using the \"Audio with captions\" field formatter.</p> <p>If you're using Islandora Starter Site, you can expect to see a video player on your node. This is done with a special view (an EVA view) that displays service files, which is configured to show on the default view of Repository Items (see the \"Manage Display\" page). The EVA view renders the service file media using the \"Source\" view mode. For Video media, this is configured to show only the video file using the \"Video with Captions\" formatter. Thus, when the Service file media is being played, captions on the Original File media are ignored. </p>"},{"location":"release_notes/8.x-2.0/","title":"Islandora 2.0.0 Release Notes / Upgrade Instructions","text":""},{"location":"release_notes/8.x-2.0/#update-to-php-74","title":"Update to PHP 7.4","text":"<p>Upstream dependencies have forced us to upgrade PHP to 7.4.  How to do this varies by operating system, but for Ubuntu 18.04 the following will work:</p> <ul> <li><code>sudo apt install software-properties-common</code></li> <li><code>sudo add-apt-repository ppa:ondrej/php</code></li> <li><code>sudo apt update</code></li> <li><code>sudo apt install php7.4</code></li> <li><code>sudo apt install php7.4-curl php7.4-xml php7.4-gd php7.4-imap php7.4-mbstring php7.4-mysql</code></li> </ul>"},{"location":"release_notes/8.x-2.0/#updating-alpaca","title":"Updating Alpaca","text":"<p>Here's the steps to update Alpaca code in general.  None of this is specific to this release, it's just the process.</p> <p>Move your blueprint config out of the deploy directory temporarily</p> <ul> <li><code>mv /opt/karaf/deploy/ca.islandora.* /opt/karaf</code></li> </ul> <p>Now we'll uninstall the old features and install the new ones. We're assuming you're currently on 1.0.3 and want to update to 1.0.5, but you may be on an older version.  Keep that in mind when copy/pasting these commands.</p> <ul> <li><code>/opt/karaf/bin/client \"feature:uninstall islandora-connector-derivative\"</code></li> <li><code>/opt/karaf/bin/client \"feature:uninstall islandora-indexing-fcrepo\"</code></li> <li><code>/opt/karaf/bin/client \"feature:uninstall islandora-indexing-triplestore\"</code></li> <li><code>/opt/karaf/bin/client \"feature:uninstall islandora-http-client\"</code></li> <li><code>/opt/karaf/bin/client \"feature:repo-remove mvn:ca.islandora.alpaca/islandora-karaf/1.0.3/xml/features\"</code></li> <li><code>/opt/karaf/bin/client \"feature:repo-add mvn:ca.islandora.alpaca/islandora-karaf/1.0.5/xml/features\"</code></li> <li><code>/opt/karaf/bin/client \"feature:install islandora-http-client\"</code></li> <li><code>/opt/karaf/bin/client \"feature:install islandora-indexing-triplestore\"</code></li> <li><code>/opt/karaf/bin/client \"feature:install islandora-indexing-fcrepo\"</code></li> <li><code>/opt/karaf/bin/client \"feature:install islandora-connector-derivative\"</code></li> </ul> <p>Move the blueprint files back to the <code>deploy</code> folder to deploy the derivative routes</p> <ul> <li><code>mv /opt/karaf/ca.islandora.* /opt/karaf/deploy</code></li> </ul> <p>You can check that everything is working with</p> <ul> <li><code>/opt/karaf/bin/client \"la | grep islandora\"</code></li> </ul> <p>If all the bundles have a state of <code>Active</code>, then you're all good!</p>"},{"location":"release_notes/8.x-2.0/#configuring-alpaca-timeouts","title":"Configuring Alpaca Timeouts","text":"<p>Some users have experienced timeouts when generating derivatives.  We've added the ability to set the timeout length to your routes.  In order to do so, edit each <code>ca.islandora.*</code> file in the <code>deploy</code> directory and replace</p> <pre><code>&lt;bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"/&gt;\n&lt;bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"/&gt;\n</code></pre> <p>with</p> <pre><code>&lt;bean id=\"requestConfigConfigurer\" class=\"ca.islandora.alpaca.connector.derivative.RequestConfigConfigurer\"&gt;\n  &lt;property name=\"connectionRequestTimeoutMs\" value=\"10000\"/&gt;\n  &lt;property name=\"connectTimeoutMs\" value=\"10000\"/&gt;\n  &lt;property name=\"socketTimeoutMs\" value=\"10000\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"http\" class=\"org.apache.camel.component.http4.HttpComponent\"&gt;\n  &lt;property name=\"httpClientConfigurer\" ref=\"requestConfigConfigurer\"/&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"https\" class=\"org.apache.camel.component.http4.HttpComponent\"&gt;\n  &lt;property name=\"httpClientConfigurer\" ref=\"requestConfigConfigurer\"/&gt;\n&lt;/bean&gt;\n</code></pre> <p>You can set the timeout values to whatever you like, we're using 10000 in this example.</p>"},{"location":"release_notes/8.x-2.0/#update-drupal-core-and-modules","title":"Update Drupal core and modules","text":"<p>To get the latest Drupal code, edit your <code>composer.json</code> file and change the <code>islandora/*</code> packages versions' to the latest (<code>2.0.0</code> for most).  Then run the following command to update them, your dependencies, and Drupal core:</p> <pre><code>sudo php -d memory_limit=-1 `which composer` update --with-all-dependencies\n</code></pre> <p>Afterwards, you need to run <code>drush updb</code> or visit <code>/update.php</code> in your browser to trigger the database updates. This includes important changes, like stripping out configuration we no longer use as well as a fix to support large media (&gt;2.2 GB). The database updates may take a while depending on how many media you have.</p>"},{"location":"release_notes/8.x-2.0/#update-crayfish-and-remove-gemini","title":"Update Crayfish and Remove Gemini","text":"<p>We removed the Gemini microservice and pushed its code into Crayfish-Commons so that it can be used by the other microservices and Drupal modules.  Once you've updated your Drupal installation, Gemini will no longer be utilized.  It will still, however, need to be removed. It is recommended to test this method in a staging/development environment before running in your production environment.</p> <ol> <li>Make sure you have the <code>2.0.0</code> version of the <code>islandora</code> module.  If you followed the steps above to update Drupal core and its modules, you'll have this.</li> <li> <p>Import two new Islandora views</p> <p>i. This can be done by coping the views into a new directory and using drush such as <pre><code>mkdir /var/www/html/drupal/config/1time\ncp /var/www/html/drupal/web/modules/contrib/islandora/modules/islandora_core_feature/config/install/views.view.all_taxonomy_terms.yml /var/www/html/drupal/config/1time/\ncp /var/www/html/drupal/web/modules/contrib/islandora/modules/islandora_core_feature/config/install/views.view.non_fedora_files.yml /var/www/html/drupal/config/1time/\ndrush config:import --partial --source /var/www/html/drupal/config/1time\n</code></pre> ii. It can also be done through the UI at <code>/admin/config/development/configuration/single/import</code> 4. Update Crayfish to <code>2.0.0</code> 1. <code>cd /var/www/html/Crayfish</code> 2. <code>git fetch origin --tags</code> 3. <code>git checkout 2.0.0</code> 6. Run composer install for Milliner such as <code>cd /var/www/html/Crayfish/Milliner &amp;&amp; composer install</code> 7. Run composer install for Recast such as <code>cd /var/www/html/Crayfish/Recast &amp;&amp; composer install</code> 8. Update the Recast config 1. <code>cd /var/www/html/Crayfish/Recast/cfg</code> 2. open <code>config.yaml</code> 3. Remove <code>gemini_base_url</code> 4. Update <code>base_url</code> in <code>fedora_resource</code> section. It should contain a value something like <code>http://localhost:8080/fcrepo/rest</code> 8. Clear your cache in Drupal using Drush (<code>cd /var/www/html/drupal &amp;&amp; drush cr</code>) or the UI. 9. Restart apache <code>sudo systemctl restart apache2</code> 9. Test to make sure you can view existing objects in Fedora by going to the Drupal UI and clicking one of the Fedora URI links 10. Create a new object and make sure it persists to Fedora and the Fedora URI link resolves correctly. Make sure that no new entries get added to Gemini. 11. Once you've confirmed everything is working as expected, you can then remove Gemini like 1. <code>rm /var/www/html/Crayfish/Gemini</code> 2. Remove the gemini database and the associated mysql user 3. Remove the vhost file for gemini: <code>sudo rm /etc/apache2/conf-enabled/Gemini.conf</code> 4. Restart apache: <code>sudo systemctl restart apache2</code></p> </li> </ol>"},{"location":"release_notes/8.x-2.0/#adding-captions","title":"Adding Captions","text":"<p>You can now add captions to A/V content! If you are starting with a new installation, there's nothing to do, but if you have an existing install, here's how to configure Drupal to display captions/</p> <ol> <li>Make sure you have the <code>2.0.0</code> version of islandora and islandora_defaults. If you followed the steps above to update Drupal core and its modules, you'll have this.</li> <li>Selectively import the following configurations from <code>islandora_defaults</code> using the Features UI (recommended) or by copying them into a temporary directory and using <code>drush</code> to do a partial config import.<ol> <li>core.entity_form_display.media.audio.default</li> <li>core.entity_form_display.media.video.default</li> <li>core.entity_view_display.media.audio.default</li> <li>core.entity_view_display.media.audio.source</li> <li>core.entity_view_display.media.video.default</li> <li>core.entity_view_display.media.video.source</li> <li>field.field.media.audio.field_track</li> <li>field.field.media.video.field_track</li> <li>field.storage.media.field_track</li> </ol> </li> <li>Clear your drupal cache <code>drush cr</code></li> <li>You should now see a \"track\" field on audio and video media objects</li> </ol>"},{"location":"technical-documentation/adding-format-jsonld/","title":"Adding back ?_format=jsonld","text":"<p>Drupal requires the use of a <code>_format</code> query parameter to get alternate representations of a node/media.</p> <p>By default, Islandora deploys with the jsonld module and the Milliner microservice. These two components are configured to strip this <code>_format</code> query parameter off of the end of URIs.</p> <p>This means that when your content is indexed in Fedora, the triplestore, etc... it's URI will be something like <code>http://localhost:8000/node/1</code> and not <code>http://localhost:8000/node/1?_format=jsonld</code>.</p>"},{"location":"technical-documentation/adding-format-jsonld/#pre-10-installations","title":"Pre-1.0 installations.","text":"<p>If you are using a very early version of Islandora \"8\" (pre-release), then you may have URIs with <code>_format=jsonld</code> at the end of them.</p> <p>If you update to newer code, you will need to ensure that your site is configured to add <code>?_format=jsonld</code> back to the URLs if you want to maintain consistency.</p> <p>If you don't do this, you can end up with two copies of your objects in your Fedora repository (one with and one without <code>?_format=jsonld</code>). You will also have two sets of triples in your triplestore.</p>"},{"location":"technical-documentation/adding-format-jsonld/#adding-_formatjsonld-to-your-uris","title":"Adding ?_format=jsonld to your URIs","text":"<p>To turn the <code>?_format</code> parameter back on:</p> <ul> <li>Go to <code>admin/config/search/jsonld</code> and confirm the \"Remove jsonld parameter from @ids\" checkbox is unchecked.</li> <li>Add <code>strip_format_jsonld: false</code> to your Milliner config. If you deployed using the default Islandora-playbook this file would be located at <code>/var/www/html/Crayfish/Milliner/cfg/config.yaml</code>.</li> </ul> <p>If you are using Islandora-playbook and are provisioning new environments for your older Islandora, you'll want to lock down the variables in your inventory that control this config.</p> <ul> <li><code>crayfish_milliner_strip_format_jsonld: true</code></li> <li><code>webserver_app_jsonld_remove_format: 1</code></li> </ul>"},{"location":"technical-documentation/alpaca-tips/","title":"Alpaca Tips","text":"<p>Alpaca is event-driven middleware based on Apache Camel for Islandora</p> <p>Currently, Alpaca ships with four event-driven components</p> <ul> <li>islandora-connector-derivative</li> <li>islandora-http-client</li> <li>islandora-indexing-fcrepo</li> <li>islandora-indexing-triplestore</li> </ul>"},{"location":"technical-documentation/alpaca-tips/#islandora-connector-derivative","title":"islandora-connector-derivative","text":"<p>This service receives requests from Drupal when it wants to create derivatives and passes that request along to a microservice in Crayfish. When it receives the derivative file back from the microservice, it passes the file back to Drupal.</p>"},{"location":"technical-documentation/alpaca-tips/#islandora-http-client","title":"islandora-http-client","text":"<p>This service overrides the default http client with Islandora specific configuration.</p>"},{"location":"technical-documentation/alpaca-tips/#islandora-indexing-fcrepo","title":"islandora-indexing-fcrepo","text":"<p>This service receives requests from Drupal in response to write operations on entities. These requests are passed along to Milliner microservice in Crayfish to convert Drupal entities into Fedora resources and communicate with Fedora (via Chullo).</p>"},{"location":"technical-documentation/alpaca-tips/#islandora-indexing-triplestore","title":"islandora-indexing-triplestore","text":"<p>This service receives requests from Drupal on indexing and deleting in order to persist/delete content in the triplestore.</p>"},{"location":"technical-documentation/alpaca-tips/#steps-for-developing-with-alpaca","title":"Steps for developing with Alpaca","text":"<p>Alpaca now runs as a single executable jar which can enable none, some or all of the available services.</p> <p>To develop your own module, start by cloning the Alpaca code base. </p> <p>Then create a new directory (for example <code>my-new-module</code>) along side the <code>islandora-indexing-fcrepo</code>, <code>islandora-indexing-triplestore</code> directories</p> <p>Add your new directory to the <code>settings.gradle</code> file, following the pattern of the others. <pre><code>  include ':islandora-support'\ninclude ':islandora-indexing-triplestore'\ninclude ':islandora-indexing-fcrepo'\ninclude ':islandora-connector-derivative'\ninclude ':islandora-http-client'\ninclude ':islandora-alpaca-app'\n+ include ':my-new-module'\nproject(':islandora-alpaca-app').setProjectDir(\"$rootDir/islandora-alpaca-app\" as File)\nproject(':islandora-support').setProjectDir(\"$rootDir/islandora-support\" as File)\nproject(':islandora-indexing-triplestore').setProjectDir(\"$rootDir/islandora-indexing-triplestore\" as File)\nproject(':islandora-indexing-fcrepo').setProjectDir(\"$rootDir/islandora-indexing-fcrepo\" as File)\nproject(':islandora-connector-derivative').setProjectDir(\"$rootDir/islandora-connector-derivative\" as File)\nproject(':islandora-http-client').setProjectDir(\"$rootDir/islandora-http-client\" as File)\n+ project(':my-new-module').setProjectDir(\"$rootDir/my-new-module\" as File)\n</code></pre></p> <p>You can explore the <code>islandora-indexing-fcrepo</code> module to see the pattern to develop your own module.</p> <p>This module contains three classes. </p> <p>You can ignore the <code>CommonProcessor</code> class, that is just some processing that is split out for reusability.</p> <p>The first class is the <code>FcrepoIndexer</code>, this class extends the Apache Camel <code>RouteBuilder</code> and requires a <code>configure</code> method which defines the processing elements of your workflow. This is the Camel \"route\".</p> <p>The second class is the <code>FcrepoIndexerOptions</code>, this class extends the Alpaca <code>PropertyConfig</code> base class which gets common configuration parameters into your module. It also contains any custom configuration parameters needed for your route. </p> <p>Lastly it uses the <code>@Conditional(FcrepoIndexerOptions.FcrepoIndexerEnabled.class)</code> to define when this module is enabled. </p> <p><code>FcrepoIndexerOptions.FcrepoIndexerEnabled.class</code> refers to the static inner class.</p> <p>This class is inside of <code>FcrepoIndexerOptions</code> and works like this: <pre><code>[1]  static class FcrepoIndexerEnabled extends ConditionOnPropertyTrue { \n[2]    FcrepoIndexerEnabled() {\n[3]      super(FcrepoIndexerOptions.FCREPO_INDEXER_ENABLED, false);\n[4]    }\n[5]  }\n</code></pre> Line 1 extends the class that will register (enable) this module when a defined property is \"TRUE\"</p> <p>Line 2 is the constructor for this static class</p> <p>Line 3 passes to the parent constructor two things.</p> <ol> <li>the property name to check for enabling this module.</li> <li>the default value to use if the property (above) is not found.</li> </ol> <p>So in this case we check for the property <code>fcrepo.indexer.enabled</code> and if we don't find it, we pass <code>false</code>. So this module is assumed to be \"off\" unless the property <code>fcrepo.indexer.enabled=true</code> is located.</p> <p>The last thing is to add your new module to the <code>islandora-alpaca-app</code> <code>build.gradle</code> file as a dependencies, like the existing modules. i.e. <pre><code>dependencies {\n    implementation \"info.picocli:picocli:${versions.picocli}\"\n    implementation \"org.apache.camel:camel-spring-javaconfig:${versions.camel}\"\n    implementation \"org.slf4j:slf4j-api:${versions.slf4j}\"\n    implementation \"org.springframework:spring-context:${versions.spring}\"\n    implementation project(':islandora-support')\n    implementation project(':islandora-connector-derivative')\n    implementation project(':islandora-indexing-fcrepo')\n    implementation project(':islandora-indexing-triplestore')\n+   implementation project(':my-new-module')\n\n    runtimeOnly \"ch.qos.logback:logback-classic:${versions.logback}\"\n\n}\n</code></pre></p> <p>Finally from the top-level directory of Alpaca execute <pre><code>./gradlew clean build shadowJar\n</code></pre></p> <p>This tells Gradle to clean the modules, then build the modules and finally create a single jar with all needed code (the shadow jar).</p> <p>The final executable jar is: <pre><code>&lt;alpaca directory&gt;/islandora-alpaca-app/build/libs/islandora-alpaca-&lt;version&gt;-all.jar\n</code></pre></p>"},{"location":"technical-documentation/checking-coding-standards/","title":"Checking Code Style","text":"<p>Before opening a pull request, you should check your code style. If you are using the Vagrant, you can run <code>phpcs</code> within the Drupal installation directory (on the Vagrant, that is <code>/var/www/html/drupal</code>) or from within the <code>web</code> directory (<code>/var/www/html/drupal/web</code>) as follows:</p> <ul> <li>from within Drupal's root directory: <code>./vendor/bin/phpcs --standard=./vendor/drupal/coder/coder_sniffer/Drupal modules/contrib/my_module</code>, where <code>modules/contrib/my_module</code> is the relative or full path to the PHP file you want to check.</li> <li>from within Drupal's <code>web</code> directory: <code>../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal yourfile</code>, where <code>yourfile</code> is the relative or full path to the PHP file you want to check.</li> </ul> <p>In both cases:</p> <ul> <li>the path to the coding standard file can be relative to where you are running it from, e.g. when in <code>web</code>: <code>--standard=../vendor/drupal/coder/coder_sniffer/Drupal</code></li> <li>you can specify a single file to check, or a directory path; in the latter case, all files in that directory will be checked.</li> </ul> <p>Islandora runs <code>phpcs</code> in its Github continuous integration environment, and there, it specifies which files to ignore and which files to check. It is a good idea for developers to specify the same options when running <code>phpcs</code> locally, prior to opening a pull request. For example (running <code>phpcs</code> from the within Drupal's <code>web</code> directory), you should use the following <code>--ignore</code> and <code>--extensions</code> options:</p> <p><code>../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal --ignore=*.md --extensions=php,module,inc,install,test,profile,theme,css,info modules/contrib/my_module</code></p>"},{"location":"technical-documentation/diagram/","title":"Islandora Architecture Diagram","text":"<p>Diagram prepared by Bethany Seeger based on work done by Gavin Morris</p>"},{"location":"technical-documentation/diagram/#components","title":"Components","text":""},{"location":"technical-documentation/diagram/#islandora","title":"Islandora","text":"<p>The following components are microservices developed and maintained by the Islandora community. They are bundled under Islandora Crayfish:</p> <ul> <li>FITS - A Symfony 4 Microservice to generate FITS data and persist it as a Drupal media node. Works with Islandora FITS</li> <li>Homarus - Provides FFmpeg as a microservice for generating video and audio derivatives.</li> <li>Houdini - ImageMagick as a microservice for generating image-based derivatives, including thumbnails.</li> <li>Hypercube - Tesseract as a microservice for optical character recognition (OCR).</li> <li>Milliner - A microservice that converts Drupal entities into Fedora resources.</li> <li>Recast - A microservice that remaps Drupal URIs to add Fedora-to-Fedora links based on associated Drupal URIs in RDF.</li> </ul>"},{"location":"technical-documentation/diagram/#other-open-source","title":"Other Open Source","text":"<p>The following components are deployed with Islandora, but are developed and maintained by other open source projects:</p> <ul> <li>Apache - The Apache HTTP Server, colloquially called Apache, is a free and open-source cross-platform web server software. Provides the environment in which Islandora and its components run.</li> <li>ActiveMQ - Apache ActiveMQ is an open source message broker written in Java together with a full Java Message Service client.</li> <li>Karaf - A modular open source OSGi runtime environment.</li> <li>Tomcat - an open-source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and WebSocket technologies. Tomcat provides a \"pure Java\" HTTP web server environment in which Java code can run.</li> <li>Solr - An open-source enterprise-search platform. Solr is the default search and discover layer of Islandora, and a key component in some methods for migration to Islandora from Islandora Legacy</li> <li>Blazegraph - Blazegraph is a triplestore and graph database.</li> <li>Cantaloupe - an open-source dynamic image server for on-demand generation of derivatives of high-resolution source images. Used in Islandora to support IIIF</li> <li>Drupal - Drupal is an open source content management system, and the heart of Islandora. All user and site-building aspects of Islandora are experienced through Drupal as a graphical user interface.</li> <li>Fedora - A robust, modular, open source repository system for the management and dissemination of digital content. The default smart storage for Islandora.</li> <li>Matomo - Matomo, formerly Piwik, is a free and open source web analytics application. It provides usage statistics and a rich dashboard for Islandora.</li> <li>MySQL - MySQL is an open-source relational database management system. Used as a Drupal database in Islandora, it can be easily replaced with other database management systems such as PostgreSQL</li> <li>Triplestore - See Blazegraph.</li> </ul>"},{"location":"technical-documentation/docs-build/","title":"Introduction","text":"<p>This documentation is built using MkDocs, a static site generator that is geared towards building project documentation. The documentation is created in the Markdown format, and it all resides in the <code>docs</code> directory in the repository. The organization of the documentation is controlled by the <code>mkdocs.yml</code> in the root of the repository.</p> <p>Video version available</p> <p>Some of the material in this tutorial is presented in our video, How to Build Documentation.</p>"},{"location":"technical-documentation/docs-build/#prerequisites","title":"Prerequisites","text":"<p>You will need to have <code>mkdocs</code> software installed locally, as well as a required plugin and the MkDocs Material theme. Below we will show you how to install <code>mkdocs</code> using the Python language's <code>pip</code> tool. For more details on installing and using MkDocs visit the MkDocs installation guide.</p> <ul> <li> <p>Open a terminal window.</p> </li> <li> <p>Install <code>mkdocs</code>:</p> <p>Windows / Linux:</p> <p><code>sudo -H pip install mkdocs</code></p> <p>macOS:</p> <p><code>pip3 install mkdocs</code></p> </li> <li> <p>Install plugin to enable display of the last revision date:</p> <p>Windows / Linux:</p> <p><code>sudo -H pip install mkdocs-git-revision-date-localized-plugin</code></p> <p>macOS:</p> <p><code>pip3 install mkdocs-git-revision-date-localized-plugin</code></p> </li> <li> <p>Install plugin to enable redirects:</p> <p>Windows / Linux:</p> <p><code>sudo -H pip install mkdocs-redirects</code></p> <p>macOS:</p> <p><code>pip3 install mkdocs-redirects</code></p> </li> <li> <p>Install Material theme:</p> <p>Windows / Linux:</p> <p><code>sudo -H pip install mkdocs-material</code></p> <p>macOS:</p> <p><code>pip3 install mkdocs-material</code></p> </li> </ul>"},{"location":"technical-documentation/docs-build/#build-and-deploy-documentation","title":"Build and Deploy documentation","text":"<p>Make sure you have all the submodules:</p> <p><code>git submodule update --init --recursive</code></p> <p>Documentation is build by running to the following command in the root of the repository:</p> <p><code>mkdocs build --clean</code></p> <p>This command will create a static <code>site</code> folder in the root of the repository.</p> <p>You can preview any changes you have made to the documentation by running the following command:</p> <p><code>mkdocs serve</code></p> <p>And then visiting http://localhost:8111 in your browser.</p> <p>To deploy documentation to GitHub Pages, issue the following command:</p> <p><code>mkdocs gh-deploy --clean</code></p> <p>To stop the <code>mkdocs serve</code> command just type the key combination \"Control-c\".</p>"},{"location":"technical-documentation/install-enable-drupal-modules/","title":"Installing Modules","text":""},{"location":"technical-documentation/install-enable-drupal-modules/#downloading-and-enabling-drupal-modules-and-themes","title":"Downloading and Enabling Drupal Modules and Themes","text":"<p>Islandora can make use of the majority of Drupal modules and themes. Common use cases have been documented in the Islandora Cookbook. There are several ways to download and install Drupal modules. Please refer to this guide on Drupal.org.</p> <p>Composer is the recommended method to install and update drupal modules and themes in Islandora. Drupal modules provided by Islandora can be accessed at the <code>drupal/</code> namespace. <pre><code>$ composer require \"&lt;vendor&gt;/&lt;package&gt;:&lt;version&gt;\"\n# Example\n$ composer require \"drupal/jsonld:^2\"\n</code></pre></p> <p>In the Islandora playbook, you can add a Drupal module's or theme's machine name to the <code>drupal_composer_dependencies</code> variable here. To enable the Drupal module or theme, add the module machine name to the <code>drupal_enable_modules</code> variable as well.</p> <p></p> <p>For modules that require additional steps, additional tasks may need to be added to the Ansible playbook. Re-provisioning your instance via Ansible will install the module.</p>"},{"location":"technical-documentation/install-enable-drupal-modules/#video-walkthroughs-modules-installing-modules-with-composer","title":"Video Walkthroughs: Modules &amp; Installing modules with Composer","text":"<p>Click the image below to open the introduction to Modules video tutorial on the Islandora Youtube channel. </p> <p></p> <p>Click the image below to open the Installing modules with Composer video tutorial on the Islandora Youtube channel. </p> <p></p> <p>See more videos from the Drupal 101 series here.</p>"},{"location":"technical-documentation/migrate-7x/","title":"Islandora 7","text":""},{"location":"technical-documentation/migrate-7x/#migrating-from-islandora-legacy-to-islandora-youtube-video","title":"Migrating from Islandora Legacy to Islandora (YouTube Video)","text":"<p> Nov 21, 2019</p> <p>!! note \"Migration from Islandora Legacy\"    For tools to migrate into Islandora from an existing Islandora Legacy instance, please see migrate_7x_claw.</p>"},{"location":"technical-documentation/migrate-7x/#project-planning-for-migration","title":"Project Planning for Migration","text":"<p>Presented by Mark Jordan and Janice Banser, this session will outline strategies for understanding your data and planning for a move to Islandora.</p>"},{"location":"technical-documentation/migrate-csv/","title":"CSV","text":""},{"location":"technical-documentation/migrate-csv/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Summary</li> <li>Introduction</li> <li>Overview</li> <li>Installation</li> <li>Ingesting Files<ul> <li>Anatomy of a migration<ul> <li>Source</li> <li>Process</li> <li>Destination</li> <li>The Process Section in Depth</li> </ul> </li> <li>Running the File Migration</li> </ul> </li> <li>Ingesting Nodes<ul> <li>Complex Fields</li> <li>Running the node migration</li> </ul> </li> <li>Migrating Media</li> <li>What have we learned</li> <li>Where to go from here</li> </ul>"},{"location":"technical-documentation/migrate-csv/#summary","title":"Summary","text":"<p>This tutorial introduces you to the Drupal Migrate tools available to create Islandora content. Whether you will eventually use CSVs or other sources (such as XML or directly from a Legacy Islandora) this tutorial should be useful as it covers the basics and mechanics of migration.</p> <p>This tutorial uses the configurations and code available in the migrate_islandora_csv module which, when enabled, will create three example migrations ready for you to use with the Migrate API. Each migration comes from one of the files in the <code>config/install</code> folder. We'll walk through them in detail below. The module is also uses Features which allows you to make changes to the configuration files and sync those changes into your Drupal site.</p> <p>A note on using Features</p> <p>This tutorial (and Islandora in general) makes heavy use of Features, which is an easy way to ship and install Drupal configuration. However, after enabling a Feature module, the code in that module's directory is no longer \"live\", as the configuration now resides in the Drupal database. If you change code in the YAML files, it will not take effect until you re-import the Feature. There is a walkthrough in the \"Configuration\" section of the Migrate 7.x to Islandora tutorial.</p> <p>Sample CSV and images are also included in the module as a convenience so they are easily available on the Drupal server running the migration. (This is not the recommended method for making files available to Drupal in a real migration.)</p> <p>The module also contains a Migrate process plugin that transforms strings into associative arrays. This is useful for populating multiple Contributor (field_linked_agent) fields. (See \"Typed Relation\" for more information on the Contributor field's type.) It will be available when this module is enabled, and the node migration uses it. It was written generically and will hopefully become part of Migrate Plus, but for now it is here.</p> <p>When you are ready to create your actual migrations, the contents of this repository can function as a template for you to create the YAML files defining your own migrations.</p>"},{"location":"technical-documentation/migrate-csv/#introduction","title":"Introduction","text":"<p>Why CSV? CSV files (whether separated by commas, tabs, or other delimiters) are easy to understand and work with, and there's good tooling available for using them with Drupal's Migrate API. The Drupal contrib module migrate_source_csv provides a source plugin that reads from a CSV file, and migrate_plus provides more tools and flexibility for creating migrations, including the ability to create customized migrations using YAML and package them up as Features.</p> <p>In this tutorial, we'll be inspecting each migration file in detail before running it.  You'll start out by migrating the images themselves first, and then you'll create various Drupal entities to describe the files from the metadata in the CSV. It's not as scary as it sounds (especially since this module contains the data we'll be using in a <code>data</code> directory), but you will need a few things before beginning:</p> <ol> <li>An instance of Islandora. Use Islandora Playbook to spin up an environment pre-loaded with all the modules you need (except this one)</li> <li>Some basic command line skills.  You won't need to know much, but you'll have to <code>vagrant ssh</code> into the box, navigate into Drupal, and use <code>git</code> and <code>drush</code>, etc...  If you can copy/paste into a terminal, you'll survive.</li> </ol> <p>The configuration referred to in this tutorial comes from the Islandora Starter Site, which defines the content model and metadata fields that we'll be migrating into. You're not required to use the Islandora Starter Site for your repository, but for the purposes of demonstration, it saves you a lot of user interface administrivia so you can focus just on the learning how to migrate.  By the time you are done with this exercise, you'll be able to easily apply your knowledge to migrate using any custom metadata profile you can build using Drupal.</p>"},{"location":"technical-documentation/migrate-csv/#overview","title":"Overview","text":"<p>The Migrate API is the main way to ingest batches of data into Drupal (and because Islandora is Drupal, into Islandora). The Migrate module only provides the framework, it's up to you to create the rules that take data from a source, through a process (i.e. a mapping) to a destination. A set of these rules is called a \"migration\". It has to be set up (as a Configuration Entity, either by importing a YAML file or by installing a Feature) and then it has to be run.</p> <p>Once a migration has been run, it will have created (or updated) a bunch of Drupal entities of one type - whether that's taxonomy terms, nodes, files, etc. Since an Object in Islandora is made up of several different Drupal entities that refer to each other, it's going to take multiple migrations to create an Islandora object, and it's important to perform these migrations in a sensible order.</p> <p>A basic Islandora object is at minimum: - a file, which holds the actual binary contents of an item - a node, which holds the descriptive metadata for an item and makes it discoverable - a media, which holds technical metadata and references the file and the node, linking the two together.</p> <p>Therefore, each row in your CSV must contain enough information to create these.</p> <p>Using multiple sources for object components</p> <p>While this tutorial uses a single CSV to describe all the parts of an islandora object, a site can use multiple sources (CSV or otherwise) to migrate the various parts. The only requirements then is to have keys in place matching the parts together. For example, a 'files.csv' can use paths that serve as file identifiers and 'metadata.csv' can use an object identifier. As long as the source for the media migration has the key values for the file and metadata migrations (the file paths and object identifiers, respectively, in this example), we can create the necessary links between the object's components. This is very useful when you need to migrate multiple media/file pairs  associated with a single node, such as pre-processed derivatives that need to be migrated.</p> <p>Buried in your descriptive metadata are often references to other things which aren't repository items themselves, but records still need to be kept for them.  Authors, publishers, universities, places, etc... can be modeled as Drupal Entities, so that they can be referenced by other Entities.  So there's the potential to have a lot of different entity types described in a single row in a CSV.</p> <p>In this tutorial, we will use the three migrations defined in this module to migrate into Drupal entities. The entities we are migrating content into have already been defined by the Islandora Starter Site:</p> <ul> <li>file</li> <li>node</li> <li>media</li> <li>subject</li> <li>person</li> <li>corporate_body</li> </ul> <p>We can do this because subjects, persons, and corporate bodies are (in this example) represented by simple 'name' strings. We create them on the fly, as if we were adding new tags to a tag vocabulary. If we wanted to model subjects, people, or corporate bodies as entities with multiple fields (first name, last name, date, subheadings, URI, etc.) then we would need up to six migrations.</p> <p>Migrations follow the Extract-Transform-Load pattern.  You extract the information from a source, process the data to transform it into the format you need, and load it into the destination system (i.e. Drupal).  Migrations are stored in Drupal as configuration, which means they can be represented in YAML, transferred to and from different sites, and are compatible with Drupal's configuration synchronization tools. And the structure of each YAML file is arranged to follow the Extract-Transform-Load pattern.</p> <p>To perform the migrations, we'll be using <code>drush</code>. We will be able to run each of the file, node, and media migrations separately or all at once in a group. We will also learn how to roll back a migration in case it didn't go as planned.</p> <p>The sample migrations here will give us a chance to show off some techniques for working with multi-valued fields, entity reference fields, and complex field types like <code>controlled_access_terms</code>'s <code>typed_relation</code> field.  We'll also see how the migrate framework can help de-duplicate, and at the same time, linked data-ize :tm: your data by looking up previously migrated entities.</p> <p>So hold on to your hats.  First, let's get this module onto your Islandora instance.</p>"},{"location":"technical-documentation/migrate-csv/#installation","title":"Installation","text":"<p>From your <code>islandora-playbook</code> directory, issue the following commands to enable this module: - <code>vagrant ssh</code> to open a shell in your Islandora instance. - <code>cd /var/www/html/drupal/web/modules/contrib</code> to get to your modules directory. - <code>git clone https://github.com/Islandora/migrate_islandora_csv</code> to clone down the repository from GitHub. - <code>drush en -y migrate_islandora_csv</code> to enable the module, installing the migrations as configuration.</p> <p>Optionally, flush the cache (<code>drush cr</code>), so the migrations become visible in the GUI at Manage &gt; Structure &gt; Migrations &gt; migrate_islandora_csv (http://localhost:8000/admin/structure/migrate/manage/migrate_islandora_csv/migrations)</p> <p>Now lets go migrate some files.</p> <p>Caution</p> <p>As you saw, you can <code>git clone</code> into the modules directory, but if you're installing a custom module that's intended to stay installed for the long term (unlike a migration feature, which you should probably uninstall and delete when you're done with it) then you may want to check with your devops folks and use Composer instead. However, using Git directly allows you to be more flexible when iterating and testing.</p>"},{"location":"technical-documentation/migrate-csv/#ingesting-files","title":"Ingesting Files","text":"<p>To migrate files (i.e. just the raw binaries) from a CSV, you need: - a column in the CSV containing paths to the files you wish to ingest, and - the files need to be accessible from the server that's running Drupal so that the Migrate framework can find them.</p> <p>This tutorial assumes you're working with the sample images provided in the module, which will be located at <code>/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images</code>. When you're migrating for real, the files will have to be uploaded or otherwise made accessible to the server before this point.</p> <p>Open up the CSV file at <code>data/migration.csv</code> and you'll see a <code>file</code> column containing paths to the sample images. You can use your favorite shell-based utility to open it at <code>/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv</code>, or browse to it on GitHub, or just look at it pasted below as this tutorial does not require you to edit the files.</p> file /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Nails Nails Nails.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Free Smells.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Nothing to See Here.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Call For Champagne.jpg /var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/This Must Be The Place.jpg <p>Open up the \"files\" migration at <code>config/install/migrate_plus.migration.file.yml</code>.  You'll see the following migration config:</p> <pre><code>id: file\nlabel: Import Image Files\nmigration_group: migrate_islandora_csv\n\nsource:\n  plugin: csv\n  path: '/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv'\n  delimiter: ','\n\n  # 1 means you have a header row, 0 means you don't\n  header_row_count: 1\n\n  # Each migration needs a unique key (\"id\") per row in the CSV.  Here we're using the file path.\n  ids:\n    - file\n\n  # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'.\n  constants:\n    # Islandora uses Flysystem and stream wrappers to work with files.  What we're really saying here is\n    # to put these files in Fedora in a 'csv_migration' folder.  It doesn't matter if the directory\n    # doesn't exist yet, it will get created for you automatically.\n    destination_dir: 'fedora://csv_migration'\n\nprocess:\n\n  ##\n  # The following two fields are temporary, and just used to generate a destination for the file.\n  ##\n\n  # Hack the file name out of the full path provided in the 'file' column.\n  filename:\n    -\n      plugin: callback\n      callable: pathinfo\n      source: file\n    -\n      plugin: extract\n      index:\n        - basename\n\n  # Construct the destination URI using the file name.\n  destination:\n    plugin: concat\n    delimiter: /\n    source:\n      - constants/destination_dir\n      - '@filename'\n\n  ##\n  # Here's where we copy the file over and set the URI of the file entity.\n  ##\n  uri:\n    plugin: file_copy\n    source:\n      - file # The source column in the CSV\n      - '@destination' # The destination entry from above\n\ndestination:\n  # These are Drupal 'image' entities we're making, not just plain 'file' entities.\n  plugin: 'entity:file'\n  type: image\n</code></pre>"},{"location":"technical-documentation/migrate-csv/#anatomy-of-a-migration","title":"Anatomy of a Migration","text":"<p>It seems like a lot to take in at first, but there's a pattern to Drupal migrations.  They always contain core identification information and three key sections: <code>source</code>, <code>process</code>, and <code>destination</code>.  And these sections correspond exactly to Extract, Transform, and Load.</p>"},{"location":"technical-documentation/migrate-csv/#identification","title":"Identification","text":"<p>The first section of a migration contains metadata for Drupal about the migration itself. The <code>id</code> parameter is the machine name of this migration, and must not conflict with existing migrations. Note: use alphanumeric characters and underscores. Hyphens (-) will cause the migration to fail. The <code>label</code> is a human-readable string to identify this migration, and the <code>migration_group</code> is where this migration will be grouped in the GUI.</p>"},{"location":"technical-documentation/migrate-csv/#source","title":"Source","text":"<p>The <code>source</code> section configures a Drupal source plugin that will extract the data.  A source plugin provides \"rows\" of data to processing plugins so that they can be worked on.  In this case, we're using the <code>csv</code> source plugin, which very literally uses rows, however you can have source plugins that work with other data formats like XML and JSON. Look at the config from this section. <pre><code>source:\n  plugin: csv\n  path: '/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/migration.csv'\n  delimiter: ','\n  header_row_count: 1\n  ids:\n    - file\n  constants:\n    destination_dir: 'fedora://csv_migration'\n</code></pre> You can see we provide a path to its location, what delimiter to use, if it uses a header row, and which column contains a unique id for each entry.  Constants can also be defined here (more on those later).</p>"},{"location":"technical-documentation/migrate-csv/#process","title":"Process","text":"<p>We're going to dive into the details of this step below, but in summary: the <code>process</code> section is where we extract the desired bits from that row, transform them as desired, and populate them into an associative array. This section is a series of named steps, that call one or more process plugins. These plugins are executed in sequence, with the results getting passed from one to the next, forming a pipeline. By the end of the step, you have transformed some element of data (perhaps through text manipulation, concatenation, etc...) into the form that Drupal is expecting. The resulting value gets associated with the name of the step.</p> <p>If the name of a step is the same as a field or property name on the target entity, the migrated entity will have that value for that field or property.  This is how you can apply metadata from the CSV to an entity.  If the step name is not the name of a field or property on the target entity, the migrate framework assumes it's a temporary value you're using as part of more complex logic.  It won't wind up on the entity when the migration is done, but it will be available for you to use within other process plugins.  You can always spot when a temporary value is being used by the fact that it's prefixed with an <code>@</code> and surrounded by quotes.  You can also pass constants into process plugins, which are prefixed with <code>constants/</code>.</p>"},{"location":"technical-documentation/migrate-csv/#destination","title":"Destination","text":"<p>The <code>destination</code> section contains the configuration that describes what gets loaded into Drupal. <pre><code>destination:\n  plugin: 'entity:file'\n  type: image\n</code></pre> You can create any type of content entity in Drupal. In this case, we're making file entities.  Specifically, we're making images, which are a special type of file entity that's provided by core Drupal.</p>"},{"location":"technical-documentation/migrate-csv/#the-process-section-in-depth","title":"The Process Section in Depth","text":"<p>In the <code>process</code> section of the migration, we're copying the images over into a Drupal file system and setting the <code>uri</code> property on the corresponding File entity. <pre><code>  uri:\n    plugin: file_copy\n    source:\n      - file\n      - '@destination'\n</code></pre> To do this, we're using the <code>file_copy</code> process plugin.  But first, we have to know where a file is located and where it should be copied to.  We know where the file resides, we have that in the CSV's <code>file</code> column.  But we're going to have to do some string manipulation in order to generate the new location where we want the file copied. We're trying to convert something like <code>/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/data/images/Free Smells.jpg</code> to <code>fedora://csv_migration/Free Smells.jpg</code>.</p> <p>The URI we're constructing is a stream wrapper of the form <code>scheme://path/to/file</code>.  Islandora uses <code>Flysystem</code>, which allows for integration with many different types of filesystems, both remote and local.  With <code>Flysystem</code>, the scheme part of the URI is the name of a filesystem.  By default, Fedora is exposed using the scheme <code>fedora://</code>.  So by setting uri to <code>fedora://csv_migration/Free Smells.jpg</code>, we're saying \"put Free Smells.jpg in the csv_migration directory in Fedora.\"</p> <p>Now, to perform this string manipulation in PHP, we'd do something like</p> <pre><code>$info = pathinfo($filepath);\n$filename = $info['basename'];\n$destination = \"fedora://csv_migration/\" . $filename;\n</code></pre> <p>We will mimic this exactly in the <code>process</code> section of our migration config.  Just like we declare variables and call functions with PHP code, we can make entries in the <code>process</code> section to store the output of Drupal process plugins. We'll build up a <code>destination</code> \"variable\" using a <code>filename</code> \"variable\" and pass it into the <code>file_copy</code> process plugin.</p> <p>To start, we'll get the filename using two process plugins, which do the same steps as the first two lines of the PHP above: <pre><code>  filename:\n    -\n      plugin: callback\n      callable: pathinfo\n      source: file\n    -\n      plugin: extract\n      index:\n        - basename\n</code></pre> The first process plugin, <code>callback</code>, lets you execute any PHP function that takes a single input and returns an output.  It's not as flexible as making your own custom process plugin, but it's still pretty useful in a lot of situations.  Here we're using it to call <code>pathinfo()</code>, telling it to use the <code>file</code> column in the CSV as input.  We pass the resulting array from <code>pathinfo()</code> to the <code>extract</code> process plugin, which pulls data out of arrays using the keys you provide it under <code>index</code>.</p> <p>Now that we have the file name, we have to prepend it with <code>fedora://csv_migration/</code> to make the destination URI.  In our PHP code above, we used <code>.</code> to concatenate the strings.  In the migration framework, we use the <code>concat</code> process plugin.  You provide it with two or more strings to concatenate, as well as a delimiter.</p> <pre><code>  destination:\n    plugin: concat\n    delimiter: /\n    source:\n      - constants/destination_dir\n      - '@filename'\n</code></pre> <p>In our PHP code, we concatenated the <code>$filename</code> variable with a string literal. In our process plugin, we can provide the variable, e.g. the output of the <code>filename</code> process step, by prefixing it with an <code>@</code>.  We can't, however, pass in <code>fedora://csv_migration</code> directly as a string.  At first glance, you might think something like this would work, but it totally doesn't: <pre><code>  # Can't do this.  Won't work at all.\n  destination:\n    plugin: concat\n    delimiter: /\n    source:\n      - 'fedora://csv_migration'\n      - '@filename'\n</code></pre> That's because the migrate framework only interprets <code>source</code> values as names of columns from the CSV or names of other process steps.  Even if they're wrapped in quotes.  It will never try to use the string directly as a value.  To circumvent this, we declare a constant in the <code>source</code> section of the migration config.</p> <pre><code>  constants:\n    destination_dir: 'fedora://csv_migration'\n</code></pre> <p>This constant can be referenced as <code>constants/destination_dir</code> and passed into the concat process plugin as a <code>source</code>.</p> <p>There are a lot more process plugins available through the (core) Migrate and Migrate Plus modules, and they are documented on Drupal.org.</p>"},{"location":"technical-documentation/migrate-csv/#running-the-file-migration","title":"Running the File Migration","text":"<p>Migrations can be executed via <code>drush</code> using the <code>migrate:import</code> command.  You specify which migration to run by using the id defined in its YAML.  You also need to set parameters to tell Drush who you are and what your site's URL is.  Failing to do so will result in derivatives not being generated and malformed/improper RDF. So don't forget them!  To run the file migration from the command line, make sure you're within <code>/var/www/html/drupal/web</code> (or any subdirectory) and enter <pre><code>drush -y --userid=1 --uri=localhost:8000 migrate:import file\n</code></pre> If you've already run the migration before, but want to re-run it for any reason, use the <code>--update</code> flag. <pre><code>drush -y --userid=1 --uri=localhost:8000 migrate:import file --update\n</code></pre> You may have noticed that migrations can be grouped, and that they define a <code>migration_group</code> in their configuration.  You can execute an entire group of migrations using the <code>--group</code> flag.  For example, to run the entire group defined in this module <pre><code>drush -y --userid=1 --uri=localhost:8000 migrate:import --group migrate_islandora_csv\n</code></pre> You can also use the <code>migrate:rollback</code> command to delete all migrated entities.  Like <code>migrate:import</code>, it also respects the <code>--group</code> flag and <code>--uri</code> parameter.  So to rollback everything we just did: <pre><code>drush -y --uri=localhost:8000 migrate:rollback --group migrate_islandora_csv\n</code></pre> If something goes bad during development, sometimes migrations can get stuck in a bad state.  Use the <code>migrate:reset</code> command to put a migration back to <code>Idle</code>.  For example, with the <code>file</code> migration, use <pre><code>drush -y --uri=localhost:8000 migrate:reset file\n</code></pre></p> <p>Make sure you've run (and not rolled back) the <code>file</code> migration.  It should tell you that it successfully created 5 files.  You can confirm its success by visiting http://localhost:8000/admin/content/files.  You should see 5 images of neon signs in the list.</p>"},{"location":"technical-documentation/migrate-csv/#ingesting-nodes","title":"Ingesting Nodes","text":"<p>Those five images are nice, but we need something to hold their descriptive metadata and show them off.  We use nodes in Drupal to do this, and that means we have another migration file to work with.  Nestled in with our nodes' descriptive metadata, though, are more Drupal entities, and we're going to generate them on the fly while we're making nodes.  While we're doing it, we'll see how to use pipe delimited strings for multiple values as well as how to handle <code>typed_relation</code> fields that are provided by <code>controlled_access_terms</code>. Open up <code>/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/config/install/migrate_plus.migration.node.yml</code> and check it out.</p> <p><pre><code># Uninstall this config when the feature is uninstalled\ndependencies:\n  enforced:\n    module:\n      - migrate_islandora_csv\n\nid: node\nlabel: Import Nodes from CSV\nmigration_group: migrate_islandora_csv\n\nsource:\n  plugin: csv\n  path: modules/contrib/migrate_islandora_csv/data/migration.csv\n\n  # 1 means you have a header row, 0 means you don't\n  header_row_count: 1\n\n  # Each migration needs a unique id per row in the csv.  Here we're using the file path.\n  ids:\n    - file\n\n  # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'.\n  constants:\n    # We're tagging our nodes as Images\n    model: Image\n\n    # Everything gets created as admin\n    uid: 1\n\n# Set fields using values from the CSV\nprocess:\n  title: title\n  uid: constants/uid\n\n  # We use the skip_on_empty plugin because\n  # not every row in the CSV has subtitle filled\n  # in.\n  field_alternative_title:\n    plugin: skip_on_empty\n    source: subtitle\n    method: process\n\n  field_description: description\n\n  # Dates are EDTF strings\n  field_edtf_date: issued\n\n  # Make the object an 'Image'\n  field_model:\n    plugin: entity_lookup\n    source: constants/model\n    entity_type: taxonomy_term\n    value_key: name\n    bundle_key: vid\n    bundle: islandora_models\n\n  # Split up our pipe-delimited string of\n  # subjects, and generate terms for each.\n  field_subject:\n    -\n      plugin: skip_on_empty\n      source: subject\n      method: process\n    -\n      plugin: explode\n      delimiter: '|'\n    -\n      plugin: entity_generate\n      entity_type: taxonomy_term\n      value_key: name\n      bundle_key: vid\n      bundle: subject\n\n  # If you have multiple values of a complex\n  # field, iterate over them using sub_process.\n  # But sub_process requires structured data\n  # i.e. an associative array, not a string\n  # or list of strings. To turn strings into\n  # associative arrays, use the custom\n  # process plugin str_to_assoc.\n\n  # Extract a list of names from the column\n  # called photographer, and transform it into\n  # an array of associative arrays.\n  photographers:\n    -\n      source: photographer\n      plugin: skip_on_empty\n      method: process\n    -\n      plugin: explode\n      delimiter: '|'\n    -\n      plugin: str_to_assoc\n      key: 'name'\n\n  # Iterate over the array of associative arrays.\n  # We create the taxonomy terms here so that we\n  # can specify the bundle - other columns which\n  # might feed into field_linked_agent may contain\n  # corporate bodies or families. The resulting\n  # array contains the resulting term id (tid)\n  # under the key 'target_id'.\n  # We also add a key-value pair\n  # 'rel_type' =&gt; 'relators:pht'. Other columns\n  # might use different relators.\n  linked_agent_pht:\n    plugin: sub_process\n    source: '@photographers'\n    process:\n      target_id:\n        plugin: entity_generate\n        source: name\n        entity_type: taxonomy_term\n        value_key: name\n        bundle_key: vid\n        bundle: person\n      rel_type:\n        plugin: default_value\n        default_value: 'relators:pht'\n\n  # Extract an array of names from the column\n  # called provider\n  providers:\n    -\n      source: provider\n      plugin: skip_on_empty\n      method: process\n    -\n      plugin: explode\n      delimiter: '|'\n    -\n      plugin: str_to_assoc\n      key: 'name'\n  # Generate/lookup taxonomy terms in the\n  # corporate body vocab, and add the relator.\n  linked_agent_prv:\n    plugin: sub_process\n    source: '@providers'\n    process:\n      target_id:\n        plugin: entity_generate\n        source: name\n        entity_type: taxonomy_term\n        value_key: name\n        bundle_key: vid\n        bundle: 'corporate_body'\n      rel_type:\n        plugin: default_value\n        default_value: 'relators:prv'\n\n  # Write to the linked agent field. In this case\n  # we first want to merge the info from the\n  # photographer and provider columns. Since we\n  # already prepared our structured array using\n  # the components of the typed_relation field as\n  # keys ('target_id' and 'rel_type'), we can just\n  # pass this array into field_linked_agent.\n  field_linked_agent:\n    plugin: merge\n    source:\n      - '@linked_agent_pht'\n      - '@linked_agent_prv'\n\n# We're making nodes\ndestination:\n  plugin: 'entity:node'\n  default_bundle: islandora_object\n</code></pre> The Breakdown</p> <p>The <code>source</code> section looks mostly the same other than some different constants we're defining - the string \"Image\" (no quotes needed) and the drupal ID of the user who will be assigned as the author. If values contained special characters such as colons, quotes would be needed.</p> <p>If you look at the <code>process</code> section, you can see we're taking the <code>title</code>, <code>description</code>, and <code>issued</code> columns from the CSV and applying them directly to the migrated nodes without any manipulation. <pre><code>  title: title\n  field_description: description\n  field_edtf_date: issued\n</code></pre> For <code>subtitle</code>, we're passing it through the <code>skip_on_empty</code> process plugin because not every row in our CSV has a subtitle entry.  It's very useful when you have spotty data, and you'll end up using it a lot.  The <code>method: process</code> bit tells the migrate framework only skip that particular field if the value is empty, and not to skip the whole row.  It's important, so don't forget it.  The full YAML for setting <code>field_alternative_title</code> from subtitle looks like this: <pre><code>  field_alternative_title:\n    plugin: skip_on_empty\n    source: subtitle\n    method: process\n</code></pre></p> <p>Now here's where things get interesting.  We can look up other entities to populate entity reference fields.  For example, all Repository Items have an entity reference field that holds a taxonomy term from the <code>islandora_models</code> vocabulary.  All of our examples are images, so we'll look up the Image model in the vocabulary since it already exists (it gets made for you when you use islandora-playbook).  We use the <code>entity_lookup</code> process plugin to do this. <pre><code>  field_model:\n    plugin: entity_lookup\n    source: constants/model\n    entity_type: taxonomy_term\n    # 'name' is the string value of the term, e.g. 'Original file', 'Thumbnail'.\n    value_key: name\n    bundle_key: vid\n    bundle: islandora_models\n</code></pre></p> <p>The <code>entity_lookup</code> process plugin looks up an entity based on the configuration you give it.  You use the <code>entity_type</code>, <code>bundle_key</code>, and <code>bundle</code> configurations to limit which entities you search through.  <code>entity_type</code> is, as you'd suspect, the type of entity: node, media, file, taxonomy_term, etc...  <code>bundle_key</code> tells the migrate framework which property holds the bundle of the entity, and <code>bundle</code> is the actual bundle id you want to restrict by. In this case we specify the vid (vocabulary id) has to be <code>islandora_models</code> - which is the machine name of the vocabulary we're interested in. In this plugin, <code>source</code> is the value to search for - in this case we're looking for the string \"Image\", which we've defined as a constant.  And we're comparing it to the <code>name</code> field on each term by setting the <code>value_key</code> config.</p> <p>This approach applies the same taxonomy term to all objects. If you want to assign a taxonomy term at the node level (that is, potentially a different term for each node) rather than to all the nodes being imported, you can use a configuration as illustrated next. In this example, we have a column in our CSV input file with the header 'model', which we define as the source of the <code>field_model</code> values:</p> <pre><code>  field_model:\n    plugin: entity_lookup\n    # 'model' is the header of a field in our input CSV that contains the string value of the taxonomy term.\n    source: model\n    entity_type: taxonomy_term\n    value_key: name\n    bundle_key: vid\n    bundle: islandora_models\n</code></pre> <p>If you're not sure that the entities you're looking up already exist, you can use the <code>entity_generate</code> plugin, which takes the same config, but will create a new entity if the lookup fails.  We use this plugin to create <code>subject</code> taxonomy terms that we tag our nodes with.  A node can have multiple subjects, so we've encoded them in the CSV as pipe delimited strings.</p> subject Neon signs|Night Neon signs|Night|Funny Neon signs|Night Drinking|Neon signs Neon signs <p>We can hack those apart easily enough.  In PHP we'd do something like <pre><code>$subjects = explode($string, '|');\n$terms = [];\nforeach ($subjects as $name) {\n    $terms[] = \\Drupal::service('entity_type.manager')-&gt;getStorage('taxonomy_term')-&gt;create([\n        ...\n        'vid' =&gt; 'subject',\n        'name' =&gt; $name,\n        ...\n    ]);\n}\n$node-&gt;set('field_subject', $terms);\n</code></pre></p> <p>With process plugins, that logic looks like <pre><code>field_subject:\n    -\n      plugin: skip_on_empty\n      source: subject\n      method: process\n    -\n      plugin: explode\n      delimiter: '|'\n    -\n      plugin: entity_generate\n      entity_type: taxonomy_term\n      value_key: name\n      bundle_key: vid\n      bundle: subject\n</code></pre> Here we've got a small pipeline that uses the <code>skip_on_empty</code> process plugin, which we've already seen, followed by <code>explode</code>.  The <code>explode</code> process plugin operates exactly like its PHP counterpart, taking an array and a delimiter as input.  The combination of <code>skip_on_empty</code> and <code>explode</code> behave like a foreach loop on the explode results.  If we have an empty string, nothing happens.  If there's one or more pipe delimited subject names in the string, then <code>entity_generate</code> gets called for each name that's found.  The <code>entity_generate</code> process plugin will try to look up a subject by name, and if that fails, it creates one using the name and saves a reference to it in the node.  So <code>entity_generate</code> is actually smarter than our pseudo-code above, because it can be run over and over again and it won't duplicate entities. :champagne:</p>"},{"location":"technical-documentation/migrate-csv/#complex-fields","title":"Complex Fields","text":"<p>Some fields don't hold just a single type of value.  In other words, not everything is just text, numbers, or references.  Using Drupal 8's Typed Data API, fields can hold groups of named values with different types.  Consider a field that holds an RGB color.  You could set it with PHP like so: <pre><code>$node-&gt;set('field_color', ['R' =&gt; 255, 'G' =&gt; 255, 'B' =&gt; 255]);\n</code></pre></p> <p>You could even  have a multi-valued color field, and do something like this <pre><code>$node-&gt;set('field_color', [\n  ['R' =&gt; 0, 'G' =&gt; 0, 'B' =&gt; 0],\n  ['R' =&gt; 255, 'G' =&gt; 255, 'B' =&gt; 255],\n]);\n</code></pre></p> <p>In the migrate framework, you have two options for handling these types of fields.  You can build up the full array they're expecting, which is difficult and requires a custom process plugin. Or, if you only have one value going into a complex field, you can set each named component in the field with separate process pipelines.</p> <p>In <code>controlled_access_terms</code>, we define a new field type of <code>typed_relation</code>, which is an entity reference coupled with a MARC relator.  It expects an associative array that looks like this: <pre><code>[ 'target_id' =&gt; 1, 'rel_type' =&gt; 'relators:ctb']\n</code></pre></p> <p>The <code>target_id</code> portion takes an entity id, and rel_type takes the predicate for the MARC relator we want to use to describe the relationship the entity has with the repository item.  This example would reference taxonomy_term 1 and give it the relator for \"Contributor\".</p> <p>If we have a single name to deal with, we can set those values in YAML, accessing <code>field_linked_agent/target_id</code> and <code>field_linked_agent/rel_type</code> independently. <pre><code>  field_linked_agent/target_id:\n    plugin: entity_generate\n    source: photographer\n    entity_type: taxonomy_term\n    value_key: name\n    bundle_key: vid\n    bundle: person\n\n  field_linked_agent/rel_type: constants/relator\n</code></pre></p> <p>Here we're looking at the <code>photographer</code> column in the CSV, which contains the names of the photographers that captured these images.  Since we know these are photographers, and not publishers or editors, we can bake in the <code>relator</code> constant we set to <code>relators:pht</code> in the <code>source</code> section of the migration.  So all that's left to do is to set the taxonomy term's id via <code>entity_generate</code>.  If the lookup succeeds, the id is returned.  If it fails, a term is created and its id is returned.  In the end, by using the <code>/</code> syntax to set properties on complex fields, everything gets wrapped up into that nice associative array structure for you automatically.</p> <p>However, if you have multiple names, and/or multiple columns that contain values that will go into the same <code>typed_relation</code> field, you do need to build up a full array of structured data.</p> <p>We start by extracting the values in the <code>photographer</code> column, and busting them into a list. (In this case, given the sample data, the lists will all have length 1). Then, we use a custom process plugin to make each value the value in an associative array (see example data below).</p> <pre><code>  photographers:\n    -\n      source: photographer\n      plugin: skip_on_empty\n      method: process\n    -\n      plugin: explode\n      delimiter: '|'\n    -\n      plugin: str_to_assoc\n      key: 'name'\n</code></pre> <p>So, if we started with a column containing <pre><code>'Alice|Bob|Charlie'\n</code></pre> at the end of this pipeline, the <code>photographers</code> temporary variable would contain <pre><code>[\n  ['name' =&gt; 'Alice'],\n  ['name' =&gt; 'Bob'],\n  ['name' =&gt; 'Charlie]\n]\n</code></pre></p> <p>Next, we use the <code>sub_process</code> plugin. It takes an array of associative arrays (as seen above) and iterates over them. From within subprocess' <code>process</code> parameter, you can access only what's defined in that associative array. Here, when we do our <code>entity_generate</code> lookup, our source is <code>name</code>, the (only) key in that array. <pre><code>  linked_agent_pht:\n    plugin: sub_process\n    source: '@photographers'\n    process:\n      target_id:\n        plugin: entity_generate\n        source: name\n        entity_type: taxonomy_term\n        value_key: name\n        bundle_key: vid\n        bundle: person\n      rel_type:\n        plugin: default_value\n        default_value: 'relators:pht'\n</code></pre> Within <code>sub_process</code>, we cannot access the temporary variables or constants that we've created in the outer migration. This is why we use the <code>default_value</code> plugin when for the <code>rel_type</code>. It would have been simpler to define a constant as we did with 'Image', but we wouldn't be able to access it. The output of this pipeline is now formatted as the structured data expected by a <code>typed_relation</code> field: <pre><code>[\n  ['target_id' =&gt; 42, 'rel_type' =&gt; 'relators:pht' ],\n  ['target_id' =&gt; 43, 'rel_type' =&gt; 'relators:pht' ],\n  ['target_id' =&gt; 44, 'rel_type' =&gt; 'relators:pht' ],\n]\n</code></pre> The final step will be to assign this array to the Contributor field (field_linked_agent). But first, we repeat the process for another column, which contains names that have a different relator, and a different bundle. Finally, we merge the two temporary variables and pass the result to <code>field_linked_agent</code>. We don't have to assign the sub-components of <code>field_linked_agent</code> here, because this is already the structured data it is looking for.</p> <pre><code>  field_linked_agent:\n    plugin: merge\n    source:\n      - '@linked_agent_pht'\n      - '@linked_agent_prv'\n</code></pre> <p>Clear as mud? Great.  Now let's run that migration.</p>"},{"location":"technical-documentation/migrate-csv/#running-the-node-migration","title":"Running the node migration","text":"<p>Like with the file migration, run <code>drush -y --userid=1 --uri=http://localhost:8000 migrate:import node</code> from anywhere within the Drupal installation directory will fire off the migration.  Go to http://localhost:8000/admin/content and you should see five new nodes.  Click on one, though, and you'll see it's just a stub with metadata.  The CSV metadata is there, links to other entities like subjects and photographers are there, but there's no trace of the corresponding files.  Here's where media entities come into play.</p>"},{"location":"technical-documentation/migrate-csv/#migrating-media","title":"Migrating Media","text":"<p>Media entities are Drupal's solution for fieldable files.  Since you can't put fields on a file, what you can do is wrap the file with a Media entity. In addition to a reference to the file (binary), technical metadata and structural metadata for the file go on the Media entity (e.g.  MIME type, file size, resolution).  Media also have a few special fields that are required for Islandora, <code>field_media_of</code> and <code>field_use</code>, which denote what node owns the media and what role the media serves, respectively.  Since the Media entity references both the file it wraps and the node that owns it, Media entities act as a bridge between files and nodes, tying them together.  And to do this, we make use of one last process plugin, <code>migration_lookup</code>.  Open up <code>/var/www/html/drupal/web/modules/contrib/migrate_islandora_csv/config/install/migrate_plus.migration.media.yml</code> and give it a look.</p> <pre><code># Uninstall this config when the feature is uninstalled\ndependencies:\n  enforced:\n    module:\n      - migrate_islandora_csv\n\nid: media\nlabel: Import Media from CSV\nmigration_group: migrate_islandora_csv\n\nsource:\n  plugin: csv\n  path: modules/contrib/migrate_islandora_csv/data/migration.csv\n\n  # 1 means you have a header row, 0 means you don't\n  header_row_count: 1\n\n  # Each migration needs a unique key per row in the csv.  Here we're using the file path.\n  ids:\n    - file\n\n  # You can't enter string literals into a process plugin, but you can give it a constant as a 'source'.\n  constants:\n    # We're tagging our media as Original Files\n    use: Original File\n\n    # Everything gets created as admin\n    uid: 1\n\nprocess:\n\n  name: title\n  uid: constants/uid\n\n  # Make the media an 'Original File'\n  field_media_use:\n    plugin: entity_lookup\n    source: constants/use\n    entity_type: taxonomy_term\n    value_key: name\n    bundle_key: vid\n    bundle: islandora_media_use\n\n  # Lookup the migrated file in the file migration.\n  field_media_image:\n    plugin: migration_lookup\n    source: file\n    migration: file\n    no_stub: true\n\n  # Lookup the migrated node in the node migration\n  field_media_of:\n    plugin: migration_lookup\n    source: file\n    migration: node\n    no_stub: true\n\ndestination:\n  # These are 'image' media we're making.\n  plugin: 'entity:media'\n  default_bundle: image\n\nmigration_dependencies:\n  required:\n    - migrate_plus.migration.file\n    - migrate_plus.migration.node\n  optional: {  }\n</code></pre> <p>The Breakdown</p> <p>Compared to the other migrations, this one is very straightforward.  There's no string or array manipulation in YAML, and at most there's only one process plugin per field. Title and user are set directly, with no processing required <pre><code>  name: title\n  uid: constants/uid\n</code></pre> The <code>field_media_use</code> field is a tag that's used to denote the purpose of a file with regard to the node it belongs to.  E.g. is this the original file? a lower quality derivative? thumbnail? etc...  In many ways it bears a resemblance to DSID in Islandora 7.x.  Like <code>field_model</code> with nodes, the vocabulary already exists in your Islandora install, so all you have to do is look it up with the <code>entity_lookup</code> plugin. <pre><code>  # Make the media an 'Original File'\n  field_media_use:\n    plugin: entity_lookup\n    source: constants/use\n    entity_type: taxonomy_term\n    value_key: name\n    bundle_key: vid\n    bundle: islandora_media_use\n</code></pre> The <code>field_media_image</code> and <code>field_media_of</code> fields are how the media binds a file to a node.  You could use <code>entity_lookup</code> or <code>entity_generate</code>, but we've already migrated them and can very easily look them up by the id assigned to them during migration.  But what's the benefit of doing so?  The <code>entity_lookup</code> and <code>entity_generate</code> process plugins do the job fine, right?</p> <p>The main advantage of using <code>migration_lookup</code> and defining migrations whenever possible, is that migrated entities can be rolled back.  If you were to hop into your console and execute <pre><code>drush -y --uri=http://localhost:8000 migrate:rollback --group migrate_islandora_csv\n</code></pre> Your nodes, media, and files would all be gone.  But your subjects and photographers would remain.  If you want to truly and cleanly roll back every entity in a migration, you need to define those migrations and use <code>migration_lookup</code> to set entity reference fields.</p>"},{"location":"technical-documentation/migrate-csv/#running-the-media-migration","title":"Running the media migration","text":"<p>Run <code>drush -y --uri=http://localhost:8000 migrate:import media</code> from anywhere within the Drupal installation directory. You should now be able to see the media files attached to the nodes you created earlier. At this point, you might want to create derivatives, such as thumbnails, using the appropriate Drupal actions on the main content admin window.</p>"},{"location":"technical-documentation/migrate-csv/#what-have-we-learned","title":"What have we learned?","text":"<p>If you've made it all the way to the end here, then you've learned that you can migrate files and CSV metadata into Islandora using only YAML files.  You've seen how to transform data with pipelines of processing plugins and can handle numeric, text, and entity reference fields.  You can handle multiple values for fields, and even more complicated things like <code>typed_relation</code> fields.  And as big as this walkthrough was, we're only scratching the surface of what can be done with the Migrate API.</p>"},{"location":"technical-documentation/migrate-csv/#where-to-go-from-here","title":"Where to go from here?","text":"<p>There's certainly more you can do with Drupal 8's Migrate API.  There's a plethora of source and processing plugins out there that can handle pretty much anything you throw at it.  XML and JSON are fair game.  You can also request sources using HTTP, so you can always point it at an existing systems REST API and go from there.  If you can't make the Migrate API's existing workflow make the necessary changes to your data, you can expand its capabilities by writing your own process plugins. Reading the Drupal.org documentation on the Migrate API would be a good place to start.</p> <p>But really the best thing to do is try and get your data into Islandora!  We intend to create a <code>boilerplate</code> branch of this repository that will allow you to clone down a migration template, ready for you to customize to fit your data.  And as you assemble it into CSV format, keep in mind that if you have more than just names for things like subjects and authors, that you can always make more CSVs.  Think of it like maintaining tables in an SQL database.  Each CSV has unique keys, so you can lookup/join entities between CSVs using those keys.  And you can still pipe-delimit the keys like we did in our example to handle multi-valued fields.</p> <p>In some repositories, these CSVs can be used to make bulk updates to metadata. Just make your changes to maintain the CSVs, then run the migration(s) again with the --update flag. This will not always be efficient, as you'll update every entity, even if it didn't change. But, by breaking down your CSVs per collection or object type, you could keep them small enough to use this process for a small repository.</p> <p>There is also a tool for migrating directly from a Legacy Islandora to Islandora (migrate_7x_claw), using Solr, XPaths, and Fedora calls to pull files and objects directly into Islandora. It may be worth checking out, and/or using in conjunction with a CSV migration.</p>"},{"location":"technical-documentation/migration-islandora-workbench/","title":"Islandora Workbench","text":""},{"location":"technical-documentation/migration-islandora-workbench/#islandora-workbench","title":"Islandora Workbench","text":"<p>Islandora Workbench provides a command-line solution to create, update, and delete Islandora content from CSV data. The Islandora Workbench repository can be found on Github. Full details and documentation for Islandora Workbench are maintained separately (Islandora Workbench Documentation).</p>"},{"location":"technical-documentation/migration-islandora-workbench/#overview","title":"Overview","text":"<p>Islandora Workbench is tailored towards end users with less technical knowledge or limited server access. </p> <p>Workbench provides an alternative to Drupal's Migrate framework, as it does not need to be run on the Drupal server. Islandora Workbench uses Islandora's REST API and offers cross-platform support (Windows, Mac, Linux) to run on your computer, using your provided CSVs and files.</p>"},{"location":"technical-documentation/migration-islandora-workbench/#islandora-workbench-highlights","title":"Islandora Workbench highlights","text":"<p>Islandora Workbench:</p> <ul> <li>Enables you to perform write operations: Create, update, and delete content.</li> <li>Is opinionated: Workbench provides MUCH less configuration than Drupal's Migrate framework. Decisions are made for you.</li> <li>Does not provide pre-processing: Your CSVs have to be in the right format. More information on preparing your data can be found in the Islandora Workbench documentation.</li> <li>Provides data validation:: The YAML configuration file and CSVs you provide are validated with the --check option. </li> </ul>"},{"location":"technical-documentation/migration-islandora-workbench/#islandora-workbench-basics","title":"Islandora Workbench Basics","text":"<ul> <li>Column names are field names.</li> <li>If a cell value contains a comma, make sure the value is wrapped in double quotes. Spreadsheet applications will do this for you</li> <li>Multiple values are pipe delimited.</li> <li>Entity references are done via numeric id (nid, mid, tid).</li> </ul>"},{"location":"technical-documentation/migration-islandora-workbench/#taxonomy-terms","title":"Taxonomy Terms","text":"<p>Using Islandora Workbench, you can assign both existing and new taxonomy terms to nodes. Within the CSVs you provide, the values of the taxonomy field/columns can:</p> <ul> <li>Use term IDs (integers), term names, or both. For example:<ul> <li>26</li> <li>Cats</li> <li>26|Cats</li> </ul> </li> <li>Use multiple vocabularies, by prefixing the value with the vocabulary id:<ul> <li>cats:Calico|dogs:Dachshund</li> </ul> </li> <li>Create new terms that don't exist yet in your taxonomy.</li> </ul> <p>If you need to create terms with multiple fields (such as an External URI) or which use term hierarchy, you can create terms in a separate task.</p>"},{"location":"technical-documentation/migration-islandora-workbench/#other-field-types","title":"Other Field Types","text":"<ul> <li>Typed Relations - Prefix term ids with namespace:rel:. More available on typed relation fields here. For example:<ul> <li>relators:pht:30</li> <li>Relators:pht:30|relators:pub:45</li> </ul> </li> <li>Geolocation fields - Workbench allows geocoordinates to be provides in \u201cLat,Long\u201d format. For example:<ul> <li>\"49.16667,-123.93333\"</li> </ul> </li> </ul>"},{"location":"technical-documentation/migration-islandora-workbench/#paged-content","title":"Paged Content","text":"<p>There are multiple ways to create paged content with Islandora Workbench. More information on each option is available here. You may:</p> <ul> <li>Use a specific subdirectory structure to define the relationship between the parent item and its children.</li> <li>Use page-level metadata in the CSV to create the relationship.</li> <li>Create a secondary task in Workbench.</li> </ul>"},{"location":"technical-documentation/migration-islandora-workbench/#workbench-instructional-videos","title":"Workbench Instructional Videos","text":"<p>Click the video previews shown below to open the corresponding video in Youtube.</p>"},{"location":"technical-documentation/migration-islandora-workbench/#islandoracon-2022-migration-strategies","title":"IslandoraCon 2022: Migration Strategies","text":"<p>This video (August 2022) is an overview of how to harvest data from an existing Islandora 7 site using Workbench, how to sanitize and prep that data with custom Python tools, and how to pull that data into a new Islandora 2 site.</p> <p></p>"},{"location":"technical-documentation/migration-islandora-workbench/#summer-of-islandora-workbench-introduction-to-islandora-workbench","title":"Summer of Islandora Workbench: Introduction to Islandora Workbench","text":"<p>This video (July 29, 2021) is an introduction of Islandora Workbench.</p> <p></p>"},{"location":"technical-documentation/migration-islandora-workbench/#islandora-workbench-demo","title":"Islandora Workbench Demo","text":"<p>This video (Dec 17, 2020) is a demo of Islandora Workbench.</p> <p></p>"},{"location":"technical-documentation/migration-islandora-workbench/#islandora-online-islandora-migration-tools","title":"Islandora Online: Islandora Migration Tools","text":"<p>This video (Aug 10, 2020) provides an overview of the Islandora Workbench and the two other options available to migrate data into an Islandora installation.</p> <p></p>"},{"location":"technical-documentation/migration-migrate-api/","title":"Migrate API","text":""},{"location":"technical-documentation/migration-migrate-api/#migrate-api","title":"Migrate API","text":"<p>Uses the Drupal Migrate API, which \"provides services for migrating data from a source system\" to Drupal 8, 9, or 10.</p> <p>The \"source system\" can be almost anything:</p> <ul> <li>an Islandora Legacy system</li> <li>a group of scanned images and their metadata inside a CSV file</li> <li>a web API</li> </ul> <p>Why use the Migrate API?</p> <ul> <li>You can (potentially) do everything with configs!</li> <li>Leverage contrib module plugins.</li> <li>Making plugins for more complex sources and processes is (relatively) simple.</li> <li>Updating metadata is as simple as: <code>drush mim node --update</code></li> </ul>"},{"location":"technical-documentation/migration-migrate-api/#a-migration-configuration-defines-an-extract-transform-load-etl-process","title":"A Migration Configuration defines an Extract, Transform, Load (ETL) process","text":"<ul> <li>Source plugins extract data from a source</li> <li>Process plugins transform the data</li> <li>Destination plugins load the data (create new entities)</li> </ul>"},{"location":"technical-documentation/migration-migrate-api/#weve-built-two-tools-for-you-using-the-migrate-api","title":"We\u2019ve built two tools for you using the Migrate API","text":"<ul> <li>migrate_islandora_csv<ul> <li>https://github.com/Islandora/migrate_islandora_csv<ul> <li>Tutorial with a sample migration using some files and a CSV</li> </ul> </li> <li>Documentation section on migrate_islandora_csv</li> </ul> </li> <li>migrate_7x_claw<ul> <li>https://github.com/Islandora-Devops/migrate_7x_claw</li> <li>A tool to get all your Islandora Legacy content migrated over</li> <li>Documentation section on migrate_7x_claw</li> </ul> </li> </ul>"},{"location":"technical-documentation/migration-migrate-api/#recap-of-migrate_islandora_csv","title":"Recap of migrate_islandora_csv","text":"<ul> <li>CSVs<ul> <li>Everyone understands and knows how to work with CSVs</li> </ul> </li> <li>Documented<ul> <li>It\u2019s a step-by-step walkthrough</li> </ul> </li> <li>Process Metadata<ul> <li>Clean up / transform the metadata using processors</li> </ul> </li> <li>Build Relationships<ul> <li>Migrations can reference other migrated content or generate new content on the fly</li> </ul> </li> </ul>"},{"location":"technical-documentation/migration-migrate-api/#recap-of-migrate_7x_claw","title":"Recap of migrate_7x_claw","text":"<ul> <li>Designed to migrate Islandora Legacy data to Islandora.</li> <li>DATASTREAMS<ul> <li>All of your datastreams, including the audit trail, are migrated</li> </ul> </li> <li>METADATA<ul> <li>Migrate metadata from Solr or any XML datastream</li> </ul> </li> <li>CUSTOMIZABLE<ul> <li>Migrate_7x_claw is a starting point, meant to be tailored to your metadata</li> </ul> </li> </ul>"},{"location":"technical-documentation/migration-migrate-api/#to-make-migrate_7x_claw-work-you-need","title":"To make migrate_7x_claw work you need","text":"<ul> <li>Access<ul> <li>You need credentials to both your Islandora Legacy and Islandora installs.</li> </ul> </li> <li>Migrate API Knowledge<ul> <li>The tutorial for migrate_islandora_csv Is still relevant</li> </ul> </li> <li>Config Sync<ul> <li>You need to understand Drupal config synchronization.  Features knowledge helps too.</li> </ul> </li> <li>Command Line Skills<ul> <li>This is best done with shell access and drush</li> </ul> </li> </ul>"},{"location":"technical-documentation/migration-migrate-api/#migrate-api-demo-video","title":"Migrate API demo video","text":"<p>Check out this video that demonstrates the Drupal Migrate API migration process: Islandora Webinar: Migrating from Islandora Legacy to Islandora (Nov 21, 2019)</p>"},{"location":"technical-documentation/migration-overview/","title":"Migration Overview","text":""},{"location":"technical-documentation/migration-overview/#migration-and-batch-loading","title":"Migration and Batch Loading","text":"<p>This video (Aug 10, 2020) provides an overview of the various options available to migrate data into an Islandora installation.</p> <p></p> <p>The three main migration options are:</p> <ul> <li>REST API</li> <li>Migrate API<ul> <li>migrate_islandora_csv</li> <li>migrate_7x_claw</li> </ul> </li> <li>Islandora Workbench</li> </ul>"},{"location":"technical-documentation/migration-overview/#rest-api","title":"REST API","text":"<p>Why use the rest API?</p> <ul> <li>Works anywhere: You don\u2019t have to work on the Drupal server. Migrate from your laptop!</li> <li>No PHP required: Use any language that can make an http request. Even cURL will do just fine.</li> <li>JSON: Why use XML if you don\u2019t have to?</li> <li>Relies on Drupal\u2019s own REST API</li> </ul> <p>Visit the REST API migration documentation section for more details.</p>"},{"location":"technical-documentation/migration-overview/#migrate-api","title":"Migrate API","text":"<p>Why use the Migrate API?</p> <ul> <li>You can (potentially) do everything with configs!</li> <li>Leverage contrib module plugins.</li> <li>Making plugins for more complex sources and processes is (relatively) simple.</li> <li>Updating metadata is as simple as: <code>drush mim node --update</code></li> </ul> <p>Two tools that use the Migrate API are migrate_islandora_csv and migrate_7x_claw.</p> <p>Visit the Migrate API migration documentation section for more details.</p>"},{"location":"technical-documentation/migration-overview/#islandora-workbench","title":"Islandora Workbench","text":"<p>Why use the Migrate API?</p> <ul> <li>More tailored for end users with less technical knowledge or limited server access.</li> <li>Uses Islandora\u2019s REST API</li> <li>Runs on your computer</li> <li>\u201cCSVs and a pile of scans\u201d</li> <li>Cross Platform - Python</li> </ul> <p>Visit the Islandora Workbench migration documentation section for more details.</p>"},{"location":"technical-documentation/migration-rest-api/","title":"REST API","text":""},{"location":"technical-documentation/migration-rest-api/#rest-api","title":"REST API","text":"<p>Why use the REST API?</p> <ul> <li>Works anywhere: You don\u2019t have to work on the Drupal server. Migrate from your laptop!</li> <li>No PHP required: Use any language that can make an HTTP request. Even cURL will do just fine.</li> <li>JSON: Why use XML if you don\u2019t have to?</li> </ul> <p>BONUS: It\u2019s just Drupal\u2019s REST API</p>"},{"location":"technical-documentation/migration-rest-api/#islandora-only-provides-two-additional-api-endpoints","title":"Islandora only provides two additional API endpoints","text":"<ul> <li>/media/{mid}/source<ul> <li>PUT a file to this endpoint to create/update a Media\u2019s file</li> </ul> </li> <li>/node/{nid}/media/{media_type}/{taxonomy_term}<ul> <li>PUT a file to this endpoint to create/update a Media for a Node</li> </ul> </li> </ul> <p>Just be aware, you are writing everything yourself! (In other words you are making all of the migration decisions yourself.)</p>"},{"location":"technical-documentation/migration-rest-api/#videos","title":"Videos","text":"<p>This video (Aug 10, 2020) provides an overview of the REST API and the two other options available to migrate data into an Islandora installation.</p> <p></p>"},{"location":"technical-documentation/ppa-documentation/","title":"Updating a <code>deb</code> and adding it to LYRASIS PPA","text":""},{"location":"technical-documentation/ppa-documentation/#this-page-is-here-for-archival-purposes","title":"This page is here for archival purposes.","text":"<p>If you are running Ubuntu 20.04 or higher, installing a specially-compiled imagemagick is no longer necessary. We are leaving this page available in case in the future we have a need to package our own <code>deb</code> and add it to the Lyrasis PPA.</p>"},{"location":"technical-documentation/ppa-documentation/#background","title":"Background","text":"<p>Ubuntu removed JPEG 2000 support from ImageMagick since Vivid Vervet's 8:6.8.9.9-5 version. The PPA that we have created adds JPEG 2000 support back into ImageMagick for Ubuntu 16.04 and 18.04. More information on why JPEG 2000 support was removed can be found here, and more information on <code>openjpeg</code> in Ubuntu can be found here.</p>"},{"location":"technical-documentation/ppa-documentation/#prerequisites","title":"Prerequisites","text":"<p>Review the Ubuntu Packaging Guide. Key items needed are in the Getting Set Up section:</p> <ul> <li>Basic packaging software:</li> <li><code>sudo apt install gnupg pbuilder ubuntu-dev-tools apt-file</code></li> <li>Make sure you have your GPG, if you do not, follow the instructions in the guide.</li> <li>Setup <code>pbuilder</code>:</li> <li><code>pbuilder-dist bionic create</code></li> <li>Configure your shell with some exports for <code>debuild</code>:</li> <li>export DEBFULLNAME=\"Bob Dobbs\"</li> <li>export DEBEMAIL=\"subgenius@example.com\"</li> <li>Contact Jonathan Green to get setup on the LYRASIS PPA team.</li> </ul>"},{"location":"technical-documentation/ppa-documentation/#patching-source","title":"Patching source","text":"<p><code>imagemagick</code> is used an example. If you need to only change or patch the actual source code, then you will need to use <code>quilt</code>. More information on using <code>quilt</code> can be found in the Patches to Packages section. If you are only change dependencies, or information in the <code>debian</code> directory of a package, <code>quilt</code> is not required, and if used will cause build failures.</p> <ul> <li>Create a directory to work in:</li> <li><code>mkdir imagemagick-bionic-jp2</code></li> <li><code>cd imagemagick-bionic-jp2</code></li> <li>Pull down the source:</li> <li><code>pull-lp-source imagemagick bionic</code></li> <li><code>cd imagemagick-6.9.7.4+dfsg</code></li> <li>Edit files as needed</li> <li>Document the fix:</li> <li><code>dch</code> (Make sure to change <code>UNRELEASED</code> to the Ubuntu release name. For example: <code>bionic</code>)</li> <li>Build the package:</li> <li><code>debuild -S</code></li> </ul>"},{"location":"technical-documentation/ppa-documentation/#example-patch","title":"Example Patch","text":"<pre><code>Index: imagemagick-6.9.7.4+dfsg/debian/control\n===================================================================\n--- imagemagick-6.9.7.4+dfsg.orig/debian/control\n+++ imagemagick-6.9.7.4+dfsg/debian/control\n@@ -26,8 +26,7 @@ Build-Depends: debhelper (&gt;= 10),\n libx11-dev, libxext-dev, libxt-dev,\n # for plugins\n  ghostscript, libdjvulibre-dev, libexif-dev,\n- libjpeg-dev,\n-# libopenjp2-7-dev, Needed for JPEG 2000 but not in main see MIR #711061\n+ libjpeg-dev, libopenjp2-7-dev,\n libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev,\n  libwmf-dev,\n # libgraphviz-dev, incompatible license against fftw\n@@ -273,8 +272,7 @@ Depends: libmagickcore-6-headers (= ${so\n libmagickcore-6.q16-3 (= ${binary:Version}),\n  libmagickcore-6.q16-3-extra (= ${binary:Version}),\n  libbz2-dev, libdjvulibre-dev,\n- libexif-dev, libfreetype6-dev, libjpeg-dev,\n-# libopenjp2-7-dev, Needed for JPEG 2000 but not in main see MIR #711061\n+ libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev,\n liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev,\n  librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev,\n  libxt-dev, zlib1g-dev,\n@@ -483,8 +481,7 @@ Depends: libmagickcore-6-headers (= ${so\n libmagickcore-6.q16hdri-3 (= ${binary:Version}),\n  libmagickcore-6.q16hdri-3-extra (= ${binary:Version}),\n  libbz2-dev, libdjvulibre-dev,\n- libexif-dev, libfreetype6-dev, libjpeg-dev,\n-# libopenjp2-7-dev, Needed for JPEG 2000 but not in main see MIR #711061\n+ libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev,\n liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev,\n  librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev,\n  libxt-dev, zlib1g-dev,\nIndex: imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in\n===================================================================\n--- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/noquantum.in\n+++ imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in\n@@ -26,8 +26,7 @@ Build-Depends: debhelper (&gt;= 10),\n libx11-dev, libxext-dev, libxt-dev,\n # for plugins\n  ghostscript, libdjvulibre-dev, libexif-dev,\n- libjpeg-dev,\n-# libopenjp2-7-dev, Needed for JPEG 2000 but not in main see MIR #711061\n+ libjpeg-dev, libopenjp2-7-dev,\n libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev,\n  libwmf-dev,\n # libgraphviz-dev, incompatible license against fftw\nIndex: imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in\n===================================================================\n--- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/quantum.in\n+++ imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in\n@@ -78,8 +78,7 @@ Depends: libmagickcore-${IMVERSION}-head\n libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION} (= ${binary:Version}),\n  libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION}-extra (= ${binary:Version}),\n  libbz2-dev, libdjvulibre-dev,\n- libexif-dev, libfreetype6-dev, libjpeg-dev,\n-# libopenjp2-7-dev, Needed for JPEG 2000 but not in main see MIR #711061\n+ libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev,\n liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev,\n  librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev,\n  libxt-dev, zlib1g-dev,\nIndex: imagemagick-6.9.7.4+dfsg/debian/rules\n===================================================================\n--- imagemagick-6.9.7.4+dfsg.orig/debian/rules\n+++ imagemagick-6.9.7.4+dfsg/debian/rules\n@@ -98,7 +98,7 @@ STATIC_CONFIGURE_OPTIONS := \\\n   --with-gs-font-dir=/usr/share/fonts/type1/gsfonts \\\n    --with-magick-plus-plus \\\n    --with-djvu \\\n-        --with-openjp2 \\\n+  --with-openjp2 \\\n   --with-wmf \\\n    --without-gvc \\\n    --enable-shared \\\n</code></pre>"},{"location":"technical-documentation/ppa-documentation/#uploading-to-lyrasis-ppa","title":"Uploading to LYRASIS PPA","text":"<p>Once the package is built successfully, you'll upload the <code>changes</code> file to Launchpad. For example:</p> <ul> <li><code>dput ppa:lyrasis/imagemagick-jp2 imagemagick_6.9.7.4+dfsg-16ubuntu6.8_source.changes</code></li> </ul> <p>After the package is successfully uploaded to the PPA, you'll receive an email from Launchpad. Something like this:</p> <pre><code>Accepted:\n OK: imagemagick_6.9.7.4+dfsg.orig.tar.xz\n OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.debian.tar.xz\n OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.dsc\n     -&gt; Component: main Section: graphics\n\nimagemagick (8:6.9.7.4+dfsg-16ubuntu6.8) bionic; urgency=medium\n\n  * Add jp2 support.\n</code></pre> <p>And you will see it in the interface for the Lyrasis PPA:</p> <p></p>"},{"location":"technical-documentation/resizing-vm/","title":"Resizing a VM","text":""},{"location":"technical-documentation/resizing-vm/#resize-vagrant-machine","title":"Resize vagrant machine","text":"<p>To expand virtual machine's hard drive for testing of larger files. Once the VM has started, you'll need to <code>halt</code> the VM, download and run the script, tell it what size (in MB) and then start the VM. The last step <code>vagrant ssh --command \"sudo resize2fs /dev/sda1\"</code> is a check. It should return there was nothing to do. If you already provisioned you VM you can skip the 2 steps with provisioning in them.</p> <pre><code># Skip this if you VM is already provisioned.\n$ vagrant up --no-provision  &lt;-- Exclude if already running and provisioned.\n\n$ vagrant halt\n\n# Download and run. This will default to the correct name (just press enter) then give the size.\n# Example: `350000` is equal to 350GB\n$ wget https://gist.githubusercontent.com/DonRichards/6dc6c81ae9fc22cba8d7a57b90ab1509/raw/45017e07a3b93657f8822dfbbe4fc690169cdabc/expand_disk.py\n$ chmod +x expand_disk.py\n$ python expand_disk.py\n$ vagrant up --no-provision\n\n# This step isn't needed but acts as a check to verify it worked.\n$ vagrant ssh --command \"sudo resize2fs /dev/sda1\"\n# Skip this if you VM is already provisioned.\n$ vagrant provision           &lt;-- Exclude if already provisioned.\n</code></pre>"},{"location":"technical-documentation/resizing-vm/#troubleshooting-expand_diskpy","title":"Troubleshooting expand_disk.py","text":"<p>You may need to remove the \"resized\" version. Assuming your VM location is <code>~/VirtualBox\\ VMs</code> <pre><code>$ rm -rf ~/VirtualBox\\ VMs/Islandora\\ CLAW\\ Ansible_resized\n</code></pre></p>"},{"location":"technical-documentation/rest-authorization/","title":"Authorization","text":""},{"location":"technical-documentation/rest-authorization/#rest-authorization","title":"REST Authorization","text":"<p>If your resources are restricted (hidden) you will need to have authorization to access them.</p> <p>You can specify which types of authentication are allowed for which HTTP methods.</p> <p>These are common to all HTTP methods against the REST API.</p> <p>In the above screenshot we have 3 allowed methods. 1. basic_auth 1. jwt_auth 1. cookie</p>"},{"location":"technical-documentation/rest-authorization/#basic-authentication-basic_auth","title":"Basic authentication (basic_auth)","text":"<p>To use basic authentication with a client like cURL use the <code>-u username:password</code> argument.</p> <p>For example: <pre><code>curl -u admin:islandora http://localhost:8000/node/3\n</code></pre></p>"},{"location":"technical-documentation/rest-authorization/#jwt-authentication-jwt_auth","title":"JWT authentication (jwt_auth)","text":"<p>By default JWTs are passed internally from Drupal to various microservices and Fedora.</p> <p>To use a JWT yourself you need to enable the <code>JWT Authentication Issuer</code> module.</p> <p>Once enabled this module makes a <code>/jwt/token</code> endpoint. You can perform a <code>GET</code> against this endpoint as an authenticated user to receive a JWT.</p> <p>For example: <pre><code>curl -i -u admin:islandora http://localhost:8000/jwt/token\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 22:08:37 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 620\nContent-Type: application/json\n\n{\n  \"token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA\"\n}\n</code></pre></p> <p>You can then take the same token and re-use it.</p> <pre><code>curl -H\"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA\" http://localhost:8000/node/3?_format=jsonld\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 22:10:02 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink: &lt;http://localhost:8000/node/3&gt;; rel=\"canonical\"\nLink: &lt;http://localhost:8000/node/3/delete&gt;; rel=\"https://drupal.org/link-relations/delete-form\"\nLink: &lt;http://localhost:8000/admin/content/node/delete?node=3&gt;; rel=\"https://drupal.org/link-relations/delete-multiple-form\"\nLink: &lt;http://localhost:8000/node/3/edit&gt;; rel=\"edit-form\"\nLink: &lt;http://localhost:8000/node/3/revisions&gt;; rel=\"version-history\"\nLink: &lt;http://localhost:8000/node/3&gt;; rel=\"https://drupal.org/link-relations/revision\"\nLink: &lt;http://localhost:8000/node?node=3&gt;; rel=\"https://drupal.org/link-relations/create\"\nLink: &lt;http://purl.org/coar/resource_type/c_c513&gt;; rel=\"tag\"; title=\"Image\"\nLink: &lt;http://localhost:8000/media/1&gt;; rel=\"related\"; title=\"Original File\"\nLink: &lt;http://localhost:8000/media/2&gt;; rel=\"related\"; title=\"Service File\"\nLink: &lt;http://localhost:8000/media/3&gt;; rel=\"related\"; title=\"Thumbnail Image\"\nLink: &lt;http://localhost:8000/node/3?_format=json&gt;; rel=\"alternate\"; type=\"application/json\"\nX-Drupal-Dynamic-Cache: HIT\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 858\nContent-Type: application/ld+json\n\n{\n  \"@graph\": [\n    {\n      \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/node\\\\/3?_format=jsonld\",\n      \"@type\": [\n        \"http:\\\\/\\\\/pcdm.org\\\\/models#Object\"\n      ],\n      \"http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/title\": [\n        {\n          \"@value\": \"Custom item\",\n          \"@language\": \"en\"\n        }\n      ],\n      \"http:\\\\/\\\\/schema.org\\\\/author\": [\n        {\n          \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld\"\n        }\n      ],\n      \"http:\\\\/\\\\/schema.org\\\\/dateCreated\": [\n        {\n          \"@value\": \"2019-03-01T19:42:54+00:00\",\n          \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime\"\n        }\n      ],\n      \"http:\\\\/\\\\/schema.org\\\\/dateModified\": [\n        {\n          \"@value\": \"2019-03-01T19:43:12+00:00\",\n          \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime\"\n        }\n      ],\n      \"http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/extent\": [\n        {\n          \"@value\": \"1 item\",\n          \"@type\": \"http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#string\"\n        }\n      ],\n      \"http:\\\\/\\\\/schema.org\\\\/sameAs\": [\n        {\n          \"@value\": \"http:\\\\/\\\\/localhost:8000\\\\/node\\\\/1?_format=jsonld\"\n        }\n      ]\n    },\n    {\n      \"@id\": \"http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld\",\n      \"@type\": [\n        \"http:\\\\/\\\\/schema.org\\\\/Person\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"technical-documentation/rest-authorization/#cookie-authentication-cookie","title":"Cookie authentication (cookie)","text":"<p>This allows you to use a cookie stored in your web browser when you log in to Drupal to access these REST endpoint pages.</p> <p>This is what allows you to access the URIs like <code>http://localhost:8000/node/1?_format=json</code> with your web browser.</p>"},{"location":"technical-documentation/rest-create/","title":"POST/PUT","text":""},{"location":"technical-documentation/rest-create/#creating-resources-media-and-files-postput-requests","title":"Creating resources, media and files - POST/PUT Requests","text":"<ul> <li>Authorization</li> <li>Content</li> <li>Files and Media</li> </ul>"},{"location":"technical-documentation/rest-create/#authorization","title":"Authorization","text":"<p>You will need to use one of the configured authorization methods to create content, media and/or files.</p> <p>These are defined under Authorization on the overview.</p>"},{"location":"technical-documentation/rest-create/#content-nodes","title":"Content (Nodes)","text":"<p>The above setup shows a configuration where the JSON format is enabled for GET, PATCH, DELETE, and POST, with authentication types \"basic_auth\" and \"jwt_auth\" enabled for each method. Thus, with this configuration, you can perform a POST request against a node at the <code>/node</code> endpoint with a body in the JSON format.</p> <p>To create a node, you need to provide two elements in your message body: the node type and any required field values.</p> <p>For the Repository Item content type included in the Islandora Starter Site, these are:</p> <ol> <li>A type - this tells Drupal what content type we are creating</li> <li>A title - this is a required field of all nodes.</li> <li>A model - this is a required by Islandora to tell the type of object (i.e. Image, Audio, Collection)</li> </ol> <p>A good way to make your first POST request is to perform a GET request against an existing node and erase all the extra content.</p> <p>You can find more information about GET requests here.</p> <p>Again we are using the json format.</p> <p>\ud83c\udf4e For example <code>curl -X GET 'http://localhost:8000/node/3?_format=json</code></p> <p>Look for the type element</p> <pre><code>\"type\" : [\n  {\n    \"target_id\" : \"islandora_object\",\n    \"target_type\" : \"node_type\",\n    \"target_uuid\" : \"62189bec-3ef3-4196-b847-b17e5ce61fd5\"\n  }\n]\n</code></pre> <p>In our example \"islandora_object\" is the machine name of the content type \"Repository Item\". If you have created a new type you will have a different target_id.</p> <p>You will not need the <code>target_uuid</code>.</p> <p>Next look for the title element</p> <pre><code>\"title\" : [\n  {\n    \"value\" : \"An example Islandora object\"\n  }\n]\n</code></pre> <p>Lastly look for the field_model element</p> <pre><code>\"field_model\": [\n  {\n    \"target_id\": 24,\n    \"target_type\": \"taxonomy_term\",\n    \"target_uuid\": \"e7560b68-e95a-4e76-9671-2a3041cd9800\",\n    \"url\": \"\\\\/taxonomy\\\\/term\\\\/24\"\n  }\n]\n</code></pre> <p>You can find the models by browsing the taxonomy terms available at <code>http://localhost:8000/admin/structure/taxonomy/manage/islandora_models/overview</code></p> <p>In my example installation, term 24 is an \"Image\", but let's create a collection which is term 23.</p> <p>Note: Taxonomy terms may vary between instances and you should verify the correct number for your installation.</p> <p>So the body of the request will be: <pre><code>{\n  \"type\": [\n    {\n      \"target_id\": \"islandora_object\",\n      \"target_type\": \"node_type\"\n    }\n  ],\n  \"title\": [\n    {\n      \"value\": \"Created a collection with POST\"\n    }\n  ],\n  \"field_model\": [\n    {\n      \"target_id\": 23,\n      \"target_type\": \"taxonomy_term\"\n    }\n  ]\n}\n</code></pre></p> <p>Note: You must include an appropriate Content-type header for the format you're requesting</p> <p>Other Note: You must include some authentication credentials to say who you are and so Drupal can check if you are allowed to create this object. Otherwise you will receive a <code>401 Unauthorized</code> response.</p> <p>If you do provide credentials but don't have permission, you will receive a <code>403 Forbidden</code> response.</p> <p>You can find more information about Authorization here</p> <p>\ud83c\udf4e For example:</p> <pre><code>curl -i -X POST -u admin:islandora -H\"Content-type: application/json\" --data '{\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\"}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\"}]}' 'http://localhost:8000/node?_format=json'\n\nHTTP/1.1 201 Created\nDate: Tue, 05 Mar 2019 18:07:00 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nLocation: http://localhost:8000/node/3\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1564\nContent-Type: application/json\n\n{\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":3}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}\n</code></pre> <p>The parts of the above request are:</p> <ol> <li><code>-i</code> - return the response headers</li> <li><code>-X POST</code> - send a POST request</li> <li><code>-u admin:islandora</code> - use these basic authentication credentials</li> <li><code>-H\"Content-type: application/json\"</code> - send the content-type header</li> <li><code>--data '{...}'</code> - send the request body (seen above)</li> <li><code>'http://localhost:8000/node?_format=json'</code> - the endpoint of the request</li> </ol>"},{"location":"technical-documentation/rest-create/#files-and-media","title":"Files and Media","text":"<p>The Drupal REST UI is supposed to have a way to upload files, but this seems to require the use of an X-CSRF-Token, which can only be retrieved using Cookie authentication and even then does not allow you to upload.</p> <p>However there is a special REST endpoint created by Islandora, which is less configurable and is not part of the above-mentioned REST UI.</p> <p>This endpoint is available at <code>http://localhost:8000/node/{node id}/media/{media type}/{media use}</code></p> <p>It only accepts PUT requests. If the media and file don't exist they are created, if they exist the file is updated with the new body.</p> <p>The node id and taxonomy term id are used to search (via an entity query) for a matching media. If this media exists the body of the file is replaced with the new content, otherwise a new file and media are created to hold the content.</p> <p>The tokens to this URI are as follows:</p> <ol> <li>node id : The numeric ID of the node you wish to link this media/file to.</li> <li>media type : The media type name you wish to create (i.e. image, file, audio)</li> <li>media use : The numeric ID of the media use taxonomy term to set for this media</li> </ol> <p>You can find the media use taxonomy terms at <code>http://localhost:8000/admin/structure/taxonomy/manage/islandora_media_use/overview</code></p> <p>The body of the request is the actual binary file to upload.</p> <p>\ud83c\udf4e For example:</p> <p>With a local file called <code>my-image.png</code> that I wanted to link to a node with ID <code>3</code>.</p> <p>I am using the taxonomy term \"Original file\", which on my machine is <code>16</code></p> <pre><code>&gt; curl -i -X PUT -u admin:islandora -H\"Content-type: image/png\" --data-binary \"@my-image.png\" -H\"Content-Location: public://images/my-image.png\" 'http://localhost:8000/node/3/media/image/16'\n\nHTTP/1.1 100 Continue\n\nHTTP/1.1 201 Created\nDate: Tue, 05 Mar 2019 22:01:39 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLocation: http://localhost:8000/media/4\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 0\nContent-Type: text/html; charset=UTF-8\n</code></pre> <p>The parts of the above request are:</p> <ol> <li><code>-i</code> - return the response headers</li> <li><code>-X PUT</code> - send a PUT request</li> <li><code>-u admin:islandora</code> - use these basic authentication credentials</li> <li><code>-H\"Content-type: image/png\"</code> - send the content-type header</li> <li><code>--data-binary \"@my-image.png\"</code> - send the contents of the file located at my-image.png as binary</li> <li><code>-H\"Content-Location: public://images/my-image.png\"</code> - store the file in the public scheme (ie. in Drupal) at the path <code>images/my-image.png</code>, to store the file in Fedora use the <code>fedora//</code> scheme (ie. fedora://images/my-image.png)</li> <li><code>'http://localhost:8000/node/3/media/image/16'</code> - the endpoint of the request specifying the node, media type and taxonomy term.</li> </ol>"},{"location":"technical-documentation/rest-delete/","title":"Removing resources, media and files - DELETE Requests","text":"<p>Deleting is as easy as getting resources and more difficult than creating resources.</p> <p>If you can perform a GET request then you have the information required to perform a DELETE request.</p> <p>Check out the examples below.</p> <ul> <li>Authorization</li> <li>Content</li> <li>Media</li> <li>Files</li> </ul>"},{"location":"technical-documentation/rest-delete/#authorization","title":"Authorization","text":"<p>If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.</p> <p>These are defined under Authorization on the overview.</p>"},{"location":"technical-documentation/rest-delete/#content-nodes","title":"Content (Nodes)","text":"<p>You will need your node id, you can find more information in the GET documentation.</p> <p>A delete is simply the same request as a <code>GET</code> but sending a <code>DELETE</code> http verb.</p> <p>Our example node has a node id of 2</p> <pre><code>&gt; curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 15:02:00 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink: &lt;http://localhost:8000/node/2&gt;; rel=\"canonical\"\nLink: &lt;http://localhost:8000/node/2/delete&gt;; rel=\"https://drupal.org/link-relations/delete-form\"\nLink: &lt;http://localhost:8000/admin/content/node/delete?node=2&gt;; rel=\"https://drupal.org/link-relations/delete-multiple-form\"\nLink: &lt;http://localhost:8000/node/2/edit&gt;; rel=\"edit-form\"\nLink: &lt;http://localhost:8000/node/2/revisions&gt;; rel=\"version-history\"\nLink: &lt;http://localhost:8000/node/2&gt;; rel=\"https://drupal.org/link-relations/revision\"\nLink: &lt;http://localhost:8000/node?node=2&gt;; rel=\"https://drupal.org/link-relations/create\"\nLink: &lt;http://purl.org/dc/dcmitype/Collection&gt;; rel=\"tag\"; title=\"Collection\"\nLink: &lt;http://localhost:8000/node/2?_format=jsonld&gt;; rel=\"alternate\"; type=\"application/ld+json\"\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1564\nContent-Type: application/json\n\n{\"nid\":[{\"value\":2}],\"uuid\":[{\"value\":\"413135a6-0bd1-4d6b-8bcb-059cf7784d83\"}],\"vid\":[{\"value\":2}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Created a collection with POST\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-05T18:04:43+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}%\n</code></pre> <p>Then we switch <code>GET</code> to <code>DELETE</code></p> <pre><code>&gt; curl -i -u admin:islandora -X DELETE 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 15:02:30 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8\n</code></pre> <p>All subsequent requests to the above URI will return a <code>404 Not Found</code> status code.</p> <pre><code>&gt; curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 15:12:58 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 149\nContent-Type: application/json\n\n{\"message\":\"The \\u0022node\\u0022 parameter was not converted for the path \\u0022\\/node\\/{node}\\u0022 (route name: \\u0022rest.entity.node.GET\\u0022)\"}\n</code></pre>"},{"location":"technical-documentation/rest-delete/#media","title":"Media","text":"<p>You will need a media id as used in GET documentation.</p> <p>A delete is simply the same request as a <code>GET</code> but sending a <code>DELETE</code> http verb.</p> <p>With a media id of 1 for our example, I'll perform a <code>GET</code></p> <pre><code>&gt; curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json'\n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 14:53:54 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink: &lt;http://localhost:8000/media/add&gt;; rel=\"https://drupal.org/link-relations/add-page\"\nLink: &lt;http://localhost:8000/media/add/image&gt;; rel=\"https://drupal.org/link-relations/add-form\"\nLink: &lt;http://localhost:8000/media/1&gt;; rel=\"canonical\"\nLink: &lt;http://localhost:8000/admin/content/media&gt;; rel=\"collection\"\nLink: &lt;http://localhost:8000/media/1/delete&gt;; rel=\"https://drupal.org/link-relations/delete-form\"\nLink: &lt;http://localhost:8000/media/delete?media=1&gt;; rel=\"https://drupal.org/link-relations/delete-multiple-form\"\nLink: &lt;http://localhost:8000/media/1/edit&gt;; rel=\"edit-form\"\nLink: &lt;http://localhost:8000/media/1&gt;; rel=\"https://drupal.org/link-relations/revision\"\nLink: &lt;http://localhost:8000/node/1&gt;; rel=\"related\"; title=\"Media of\"\nLink: &lt;http://pcdm.org/use#OriginalFile&gt;; rel=\"tag\"; title=\"Original File\"\nLink: &lt;http://localhost:8000/media/1?_format=jsonld&gt;; rel=\"alternate\"; type=\"application/ld+json\"\nLink: &lt;http://localhost:8000/media/1/source&gt;; rel=\"edit-media\"\nLink: &lt;http://localhost:8000/_flysystem/fedora/2019-03/Louis_Riel.jpg&gt;; rel=\"describes\"; type=\"image/jpeg\"\nX-Drupal-Dynamic-Cache: HIT\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1937\nContent-Type: application/json\n\n{\"mid\":[{\"value\":1}],\"uuid\":[{\"value\":\"d8893926-ddb7-4125-b2da-30428af0fe3d\"}],\"vid\":[{\"value\":1}],\"langcode\":[{\"value\":\"en\"}],\"bundle\":[{\"target_id\":\"image\",\"target_type\":\"media_type\",\"target_uuid\":\"3860e653-201b-4509-89dd-628c446d81cb\"}],\"revision_created\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_user\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log_message\":[],\"status\":[{\"value\":true}],\"name\":[{\"value\":\"An image\"}],\"thumbnail\":[{\"target_id\":2,\"alt\":\"A portrait of Louis Riel\",\"title\":null,\"width\":800,\"height\":1333,\"target_type\":\"file\",\"target_uuid\":\"b0625129-c592-463a-93c3-3eff7cd3567e\",\"url\":\"http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-01T19:43:22+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_file_size\":[{\"value\":166613}],\"field_height\":[{\"value\":1333}],\"field_media_image\":[{\"target_id\":2,\"alt\":\"A portrait of Louis Riel\",\"title\":\"\",\"width\":800,\"height\":1333,\"target_type\":\"file\",\"target_uuid\":\"b0625129-c592-463a-93c3-3eff7cd3567e\",\"url\":\"http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"field_media_of\":[{\"target_id\":1,\"target_type\":\"node\",\"target_uuid\":\"8322e36e-f8ec-4fd9-919d-52aed7b17a52\",\"url\":\"\\/node\\/1\"}],\"field_media_use\":[{\"target_id\":16,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"08e01ff9-eb72-42f5-ae3a-8b21ba0c0bc3\",\"url\":\"\\/taxonomy\\/term\\/16\"}],\"field_mime_type\":[{\"value\":\"image\\/jpeg\"}],\"field_width\":[{\"value\":800}]}\n</code></pre> <p>Then we replace <code>GET</code> with <code>DELETE</code>.</p> <pre><code>&gt; curl -i -u admin:islandora -X DELETE 'http://localhost:8000/media/1?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 14:54:55 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8\n</code></pre> <p>Subsequent requests to the media return <code>404 Not Found</code> statuses.</p> <pre><code>&gt; curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 15:13:45 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 153\nContent-Type: application/json\n\n{\"message\":\"The \\u0022media\\u0022 parameter was not converted for the path \\u0022\\/media\\/{media}\\u0022 (route name: \\u0022rest.entity.media.GET\\u0022)\"}\n</code></pre>"},{"location":"technical-documentation/rest-delete/#files","title":"Files","text":"<p>You'll need the file id, there is more information at the top of the GET requests for files documentation.</p> <p>A delete is simply the same request as a <code>GET</code> but sending a <code>DELETE</code> http verb.</p> <p>With a file id of 2 for our example, I can perform a test <code>GET</code></p> <pre><code>&gt; curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 14:40:40 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 617\nContent-Type: application/json\n\n{\"fid\":[{\"value\":2}],\"uuid\":[{\"value\":\"b0625129-c592-463a-93c3-3eff7cd3567e\"}],\"langcode\":[{\"value\":\"en\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"filename\":[{\"value\":\"Louis_Riel.jpg\"}],\"uri\":[{\"value\":\"fedora:\\/\\/2019-03\\/Louis_Riel.jpg\",\"url\":\"\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\"}],\"filemime\":[{\"value\":\"image\\/jpeg\"}],\"filesize\":[{\"value\":166613}],\"status\":[{\"value\":true}],\"created\":[{\"value\":\"2019-03-01T19:43:35+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-01T19:43:46+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}]}\n</code></pre> <p>If this is the correct file, I can delete it.</p> <pre><code>&gt; curl -i -u admin:islandora -X DELETE 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 14:43:22 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8\n</code></pre> <p>Subsequent requests to the URI now return a <code>404 Not Found</code> status.</p> <pre><code>&gt; curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 14:43:33 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 157\nContent-Type: application/json\n\n{\"message\":\"The \\u0022file\\u0022 parameter was not converted for the path \\u0022\\/entity\\/file\\/{file}\\u0022 (route name: \\u0022rest.entity.file.GET\\u0022)\"}\n</code></pre>"},{"location":"technical-documentation/rest-get/","title":"Getting resources, media and files - GET Requests","text":"<ul> <li>Authorization</li> <li>Content</li> <li>Media</li> <li>Files</li> </ul>"},{"location":"technical-documentation/rest-get/#authorization","title":"Authorization","text":"<p>If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.</p> <p>These are defined under Authorization on the overview.</p>"},{"location":"technical-documentation/rest-get/#content-nodes","title":"Content (Nodes)","text":"<p>The above setup shows that you can perform a GET request against a node at the <code>/node/{id}</code> endpoint. This is the same as the URL when viewed through a web browser. For example <code>http://localhost:8000/node/2</code></p> <p>It also defines the formats you can access. In this example json and jsonld are available.</p> <p>To access a resource in a specific format use the <code>_format=</code> argument which is appended to the end of the URI after a <code>?</code>.</p> <p>To get the resource located at <code>http://localhost:8000/node/3</code> in JSON, you can go to <code>http://localhost:8000/node/3?_format=json</code>.</p> <p>\ud83c\udf4e For example:</p> <p>You can do this in your web browser or with a command line client like cURL. (Note: response body here has been formatted, yours will look different)</p> <pre><code>vagrant@claw:~$ curl -i http://localhost:8000/node/3?_format=json\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 21:53:50 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink: &lt;http://localhost:8000/node/3&gt;; rel=\"canonical\"\nLink: &lt;http://localhost:8000/node/3/delete&gt;; rel=\"https://drupal.org/link-relations/delete-form\"\nLink: &lt;http://localhost:8000/admin/content/node/delete?node=3&gt;; rel=\"https://drupal.org/link-relations/delete-multiple-form\"\nLink: &lt;http://localhost:8000/node/3/edit&gt;; rel=\"edit-form\"\nLink: &lt;http://localhost:8000/node/3/revisions&gt;; rel=\"version-history\"\nLink: &lt;http://localhost:8000/node/3&gt;; rel=\"https://drupal.org/link-relations/revision\"\nLink: &lt;http://localhost:8000/node?node=3&gt;; rel=\"https://drupal.org/link-relations/create\"\nLink: &lt;http://purl.org/coar/resource_type/c_c513&gt;; rel=\"tag\"; title=\"Image\"\nLink: &lt;http://localhost:8000/media/1&gt;; rel=\"related\"; title=\"Original File\"\nLink: &lt;http://localhost:8000/media/2&gt;; rel=\"related\"; title=\"Service File\"\nLink: &lt;http://localhost:8000/media/3&gt;; rel=\"related\"; title=\"Thumbnail Image\"\nLink: &lt;http://localhost:8000/node/3?_format=jsonld&gt;; rel=\"alternate\"; type=\"application/ld+json\"\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nX-Drupal-Cache: MISS\nContent-Length: 1521\nContent-Type: application/json\n\n{\n  \"nid\": [\n    {\n      \"value\": 1\n    }\n  ],\n  \"uuid\": [\n    {\n      \"value\": \"8322e36e-f8ec-4fd9-919d-52aed7b17a52\"\n    }\n  ],\n  \"vid\": [\n    {\n      \"value\": 1\n    }\n  ],\n  \"langcode\": [\n    {\n      \"value\": \"en\"\n    }\n  ],\n  \"type\": [\n    {\n      \"target_id\": \"islandora_object\",\n      \"target_type\": \"node_type\",\n      \"target_uuid\": \"62189bec-3ef3-4196-b847-b17e5ce61fd5\"\n    }\n  ],\n  \"revision_timestamp\": [\n    {\n      \"value\": \"2019-03-01T19:43:12+00:00\",\n      \"format\": \"Y-m-d\\\\TH:i:sP\"\n    }\n  ],\n  \"revision_uid\": [\n    {\n      \"target_id\": 1,\n      \"target_type\": \"user\",\n      \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\n      \"url\": \"\\\\/user\\\\/1\"\n    }\n  ],\n  \"revision_log\": [],\n  \"status\": [\n    {\n      \"value\": true\n    }\n  ],\n  \"title\": [\n    {\n      \"value\": \"Custom item\"\n    }\n  ],\n  \"uid\": [\n    {\n      \"target_id\": 1,\n      \"target_type\": \"user\",\n      \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\n      \"url\": \"\\\\/user\\\\/1\"\n    }\n  ],\n  \"created\": [\n    {\n      \"value\": \"2019-03-01T19:42:54+00:00\",\n      \"format\": \"Y-m-d\\\\TH:i:sP\"\n    }\n  ],\n  \"changed\": [\n    {\n      \"value\": \"2019-03-01T19:43:12+00:00\",\n      \"format\": \"Y-m-d\\\\TH:i:sP\"\n    }\n  ],\n  \"promote\": [\n    {\n      \"value\": true\n    }\n  ],\n  \"sticky\": [\n    {\n      \"value\": false\n    }\n  ],\n  \"default_langcode\": [\n    {\n      \"value\": true\n    }\n  ],\n  \"revision_translation_affected\": [\n    {\n      \"value\": true\n    }\n  ],\n  \"content_translation_source\": [\n    {\n      \"value\": \"und\"\n    }\n  ],\n  \"content_translation_outdated\": [\n    {\n      \"value\": false\n    }\n  ],\n  \"field_alternative_title\": [],\n  \"field_description\": [],\n  \"field_display_hints\": [],\n  \"field_edtf_date\": [],\n  \"field_edtf_date_created\": [],\n  \"field_edtf_date_issued\": [],\n  \"field_extent\": [\n    {\n      \"value\": \"1 item\"\n    }\n  ],\n  \"field_identifier\": [],\n  \"field_linked_agent\": [],\n  \"field_member_of\": [],\n  \"field_model\": [\n    {\n      \"target_id\": 24,\n      \"target_type\": \"taxonomy_term\",\n      \"target_uuid\": \"e7560b68-e95a-4e76-9671-2a3041cd9800\",\n      \"url\": \"\\\\/taxonomy\\\\/term\\\\/24\"\n    }\n  ],\n  \"field_pid\": [],\n  \"field_resource_type\": [],\n  \"field_rights\": [],\n  \"field_subject\": []\n}\n</code></pre>"},{"location":"technical-documentation/rest-get/#media","title":"Media","text":"<p>The above steps are the same for media, it is just the URI that has changed.</p> <p></p> <p>For media you use <code>/media/{id}</code></p> <p>\ud83c\udf4e For example:</p> <pre><code>curl -u admin:islandora http://localhost:8000/media/2?_format=json\n\n{\n  \"mid\": [\n    {\n      \"value\": 2\n    }\n  ],\n  \"uuid\": [\n    {\n      \"value\": \"e75e609d-510c-4764-9280-665bb7026161\"\n    }\n  ],\n  \"vid\": [\n    {\n      \"value\": 2\n    }\n  ],\n  \"langcode\": [\n    {\n      \"value\": \"en\"\n    }\n  ],\n  \"bundle\": [\n    {\n      \"target_id\": \"image\",\n      \"target_type\": \"media_type\",\n      \"target_uuid\": \"3860e653-201b-4509-89dd-628c446d81cb\"\n    }\n  ],\n  \"revision_created\": [\n    {\n      \"value\": \"2019-03-01T19:43:48+00:00\",\n      \"format\": \"Y-m-d\\\\TH:i:sP\"\n    }\n  ],\n  \"revision_user\": [],\n  \"revision_log_message\": [],\n  \"status\": [\n    {\n      \"value\": true\n    }\n  ],\n  \"name\": [\n    {\n      \"value\": \"1-Service File.jpg\"\n    }\n  ],\n  \"thumbnail\": [\n    {\n      \"target_id\": 3,\n      \"alt\": null,\n      \"title\": null,\n      \"width\": 800,\n      \"height\": 1333,\n      \"target_type\": \"file\",\n      \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\",\n      \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\"\n    }\n  ],\n  \"uid\": [\n    {\n      \"target_id\": 1,\n      \"target_type\": \"user\",\n      \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\n      \"url\": \"\\\\/user\\\\/1\"\n    }\n  ],\n  \"created\": [\n    {\n      \"value\": \"2019-03-01T19:43:48+00:00\",\n      \"format\": \"Y-m-d\\\\TH:i:sP\"\n    }\n  ],\n  \"changed\": [\n    {\n      \"value\": \"2019-03-01T19:43:48+00:00\",\n      \"format\": \"Y-m-d\\\\TH:i:sP\"\n    }\n  ],\n  \"default_langcode\": [\n    {\n      \"value\": true\n    }\n  ],\n  \"revision_translation_affected\": [\n    {\n      \"value\": true\n    }\n  ],\n  \"content_translation_source\": [\n    {\n      \"value\": \"und\"\n    }\n  ],\n  \"content_translation_outdated\": [\n    {\n      \"value\": false\n    }\n  ],\n  \"field_access_terms\": [],\n  \"field_file_size\": [\n    {\n      \"value\": 166608\n    }\n  ],\n  \"field_height\": [\n    {\n      \"value\": 1333\n    }\n  ],\n  \"field_media_image\": [\n    {\n      \"target_id\": 3,\n      \"alt\": null,\n      \"title\": null,\n      \"width\": 800,\n      \"height\": 1333,\n      \"target_type\": \"file\",\n      \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\",\n      \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\"\n    }\n  ],\n  \"field_media_of\": [\n    {\n      \"target_id\": 1,\n      \"target_type\": \"node\",\n      \"target_uuid\": \"8322e36e-f8ec-4fd9-919d-52aed7b17a52\",\n      \"url\": \"\\\\/node\\\\/1\"\n    }\n  ],\n  \"field_media_use\": [\n    {\n      \"target_id\": 18,\n      \"target_type\": \"taxonomy_term\",\n      \"target_uuid\": \"e8c698a7-8c15-47c4-8567-1c27f8f0c19e\",\n      \"url\": \"\\\\/taxonomy\\\\/term\\\\/18\"\n    }\n  ],\n  \"field_mime_type\": [\n    {\n      \"value\": \"image\\\\/jpeg\"\n    }\n  ],\n  \"field_width\": [\n    {\n      \"value\": 800\n    }\n  ]\n}\n</code></pre> <p><code>field_media_of</code> indicates which node(s) the media is associated with. The node can be referenced using the value of the <code>target_id</code> key (in this example, 1) or the <code>target_uuid</code> key (8322e36e-f8ec-4fd9-919d-52aed7b17a52).</p>"},{"location":"technical-documentation/rest-get/#files","title":"Files","text":"<p>Through the REST API you are accessing metadata about files, but not the actual binary object.</p> <p></p> <p>Based on the above configuration the path for a GET request is <code>/entity/file/{id}</code></p> <p>The file ID refers to the integer counter and not the UUID of a file.</p> <p>Through the UI you can go to the File listing at <code>http://localhost:8000/admin/content/files</code>.</p> <p>For the file you want to access, choose the USED IN link.</p> <p>That URI has the format <code>http://localhost:8000/admin/content/files/usage/{file id}</code></p> <p>Alternatively the file ID can be found by viewing the media metadata (above section). In the above example if you look through the response from a GET request to the <code>/media/{id}</code> you will find a section like:</p> <pre><code>  \"field_media_image\": [\n    {\n      \"target_id\": 3,\n      \"alt\": null,\n      \"title\": null,\n      \"width\": 800,\n      \"height\": 1333,\n      \"target_type\": \"file\",\n      \"target_uuid\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\",\n      \"url\": \"http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\"\n    }\n  ],\n</code></pre> <p>Note: Depending on the \"type\" of file (image, video, audio, file) this field will have a different name.</p> <p>This has both the <code>url</code> which is the URI to retrieve the binary content of the file as well as the <code>target_id</code> which is the file ID.</p> <p>So we can retrieve the file with a GET request to the URI <code>http://localhost:8000/sites/default/files/2019-03/1-Service%20File.jpg</code>.</p> <p>But more importantly we can retrieve the file metadata by making a request to <code>http://localhost:8000/entity/file/3</code> with one of the allowed formats</p> <p>\ud83c\udf4e For example:</p> <pre><code>&gt; curl -i -X GET \"http://localhost:8000/entity/file/3?_format=json\"\n\nHTTP/1.1 200 OK\nDate: Tue, 05 Mar 2019 16:52:06 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nX-Drupal-Cache: HIT\nContent-Length: 634\nContent-Type: application/json\n\n{\n  \"fid\": [\n    {\n      \"value\": 3\n    }\n  ],\n  \"uuid\": [\n    {\n      \"value\": \"e97ad038-dcb3-4d81-aa91-c945b2fe092c\"\n    }\n  ],\n  \"langcode\": [\n    {\n      \"value\": \"en\"\n    }\n  ],\n  \"uid\": [\n    {\n      \"target_id\": 1,\n      \"target_type\": \"user\",\n      \"target_uuid\": \"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\n      \"url\": \"\\\\/user\\\\/1\"\n    }\n  ],\n  \"filename\": [\n    {\n      \"value\": \"1-Service File.jpg\"\n    }\n  ],\n  \"uri\": [\n    {\n      \"value\": \"public:\\\\/\\\\/2019-03\\\\/1-Service File.jpg\",\n      \"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\"\n    }\n  ],\n  \"filemime\": [\n    {\n      \"value\": \"image\\\\/jpeg\"\n    }\n  ],\n  \"filesize\": [\n    {\n      \"value\": 166608\n    }\n  ],\n  \"status\": [\n    {\n      \"value\": true\n    }\n  ],\n  \"created\": [\n    {\n      \"value\": \"2019-03-01T19:43:48+00:00\",\n      \"format\": \"Y-m-d\\\\TH:i:sP\"\n    }\n  ],\n  \"changed\": [\n    {\n      \"value\": \"2019-03-01T19:43:48+00:00\",\n      \"format\": \"Y-m-d\\\\TH:i:sP\"\n    }\n  ]\n}\n</code></pre> <p>The <code>uri: url:</code> is the path to your file, so for the above example of <code>\"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\"</code>.</p> <p>I can perform a <code>GET</code> against <code>&lt;my hostname&gt;/sites/default/files/2019-03/1-Service%20File.jpg</code> and get the contents of this file.</p>"},{"location":"technical-documentation/rest-patch/","title":"Updating resources - PATCH request","text":"<p>PATCH requests allow you to update resources in place via a REST call. In this case you send a few required fields and then any changed fields. PATCH requests are available for nodes and media entities, but not for files. PATCH requests are very consistent between node and media entities so we will just show one set of examples here.</p> <p>Our example node is at <code>http://localhost:8000/node/3</code>.</p> <p>If you perform a GET against another node or media you can see all of the fields, some of these are calculated (change based on others, i.e. \"changed\"), some are references to other entities (nodes, media, files in Drupal. i.e. \"field_model\") and others are pure text fields (i.e. \"title\").</p> <p>The fields will be different between different node types and media types, but the syntax to update them is the same.</p> <ul> <li>Authorization</li> <li>Change a text field</li> <li>Change an entity reference</li> </ul>"},{"location":"technical-documentation/rest-patch/#authorization","title":"Authorization","text":"<p>If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.</p> <p>These are defined under Authorization on the overview.</p> <p>This with assume you have already created a node or media at some location.</p>"},{"location":"technical-documentation/rest-patch/#change-a-text-field","title":"Change a text field","text":"<p>To change the title of a node, you need to supply the new title and the node_type. The node_type is required as this defines what fields are available to the node.</p> <p>A successful PATCH request will return a 200 status code and the body will contain the newly updated body.</p> <pre><code>curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"title\": [{\"value\":\"Updated with a PATCH request\"}]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 17:01:23 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1562\nContent-Type: application/json\n\n{\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":3}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T17:01:23+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":23,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"6a3b293d-4617-417b-99d2-23d75b57f7c2\",\"url\":\"\\/taxonomy\\/term\\/23\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}\n</code></pre>"},{"location":"technical-documentation/rest-patch/#change-an-entity-reference-field","title":"Change an entity reference field","text":"<p>This example is how to change a field that references some other entity. For this example we will use the <code>field_model</code> field, this is a reference to the taxonomy term that holds the \"model\" of the resource (ie. Image, Collection, Audio, Video, etc)</p> <p>On our example installation taxonomy term 22 is \"Binary\", so to change a node from what it was to a Binary you would do.</p> <pre><code>&gt; curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"field_model\": [{\"target_id\": 22, \"target_type\": \"taxonomy_term\"}]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 17:51:47 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1562\nContent-Type: application/json\n\n{\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":4}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-11T17:36:10+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T17:51:47+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[],\"field_model\":[{\"target_id\":22,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"e1f167e1-124d-4db4-96ab-30641ca4e21b\",\"url\":\"\\/taxonomy\\/term\\/22\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}\n</code></pre> <p>To patch an object and make it part of a collection, you need the id number of the collection object. In this example node 2 will be our collection.</p> <p><code>target_type</code> can be a confusing one, if you are ever unsure have a look at the returned values for an existing object.</p> <pre><code>&gt; curl -i -u admin:islandora -H\"Content-type: application/json\" -X PATCH -d '{ \"type\": [{\"target_id\": \"islandora_object\"}], \"field_member_of\": [{\"target_id\": 2, \"target_type\": \"node_type\"}]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 18:01:40 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary:\nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1669\nContent-Type: application/json\n\n{\"nid\":[{\"value\":3}],\"uuid\":[{\"value\":\"3f618cdc-3f2a-4e77-b932-9ff1d461a57a\"}],\"vid\":[{\"value\":4}],\"langcode\":[{\"value\":\"en\"}],\"type\":[{\"target_id\":\"islandora_object\",\"target_type\":\"node_type\",\"target_uuid\":\"62189bec-3ef3-4196-b847-b17e5ce61fd5\"}],\"revision_timestamp\":[{\"value\":\"2019-03-11T17:36:10+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"revision_uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"revision_log\":[],\"status\":[{\"value\":true}],\"title\":[{\"value\":\"Updated with a PATCH request\"}],\"uid\":[{\"target_id\":1,\"target_type\":\"user\",\"target_uuid\":\"46a47057-de2d-4ce2-87ae-dbe4551209b8\",\"url\":\"\\/user\\/1\"}],\"created\":[{\"value\":\"2019-03-05T18:07:00+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"changed\":[{\"value\":\"2019-03-11T18:01:40+00:00\",\"format\":\"Y-m-d\\\\TH:i:sP\"}],\"promote\":[{\"value\":true}],\"sticky\":[{\"value\":false}],\"default_langcode\":[{\"value\":true}],\"revision_translation_affected\":[{\"value\":true}],\"content_translation_source\":[{\"value\":\"und\"}],\"content_translation_outdated\":[{\"value\":false}],\"field_access_terms\":[],\"field_alternative_title\":[],\"field_description\":[],\"field_display_hints\":[],\"field_edtf_date\":[],\"field_edtf_date_created\":[],\"field_edtf_date_issued\":[],\"field_extent\":[{\"value\":\"1 item\"}],\"field_identifier\":[],\"field_linked_agent\":[],\"field_member_of\":[{\"target_id\":2,\"target_type\":\"node\",\"target_uuid\":\"413135a6-0bd1-4d6b-8bcb-059cf7784d83\",\"url\":\"\\/node\\/2\"}],\"field_model\":[{\"target_id\":22,\"target_type\":\"taxonomy_term\",\"target_uuid\":\"e1f167e1-124d-4db4-96ab-30641ca4e21b\",\"url\":\"\\/taxonomy\\/term\\/22\"}],\"field_pid\":[],\"field_resource_type\":[],\"field_rights\":[],\"field_subject\":[]}\n</code></pre>"},{"location":"technical-documentation/rest-signposting/","title":"Signposting","text":"<p>Signposting is a technique used in RESTful APIs where other relevant resources are exposed to clients as <code>Link</code> headers in <code>GET</code> and <code>HEAD</code> requests.  These <code>Link</code> headers follow a standard format as specified in RFC8288.  Drupal already makes use of this technique for content entities, and Islandora takes it even further by providing additional <code>Link</code> headers that enable the client to navigate the repository and discover additional information about various resources.  Because the links are returned in response headers, they can be relied upon without having to parse the message body.  This makes them consistent across all serialization formats that can be returned in a message body (XML, JSON, JSONLD, etc...).</p> <p>As a general precaution, link headers for Drupal entities are not exposed to users that do not have the permissions to view the entity linked in the header.  So making GET and HEAD requests anonymously will yield a different set of headers than what an authenticated user would see.  For example, anonymous users don't have the <code>view media</code> permission, so they will not see the link headers for media associated with a node.</p>"},{"location":"technical-documentation/rest-signposting/#link-headers-provided-by-islandora","title":"Link Headers Provided by Islandora","text":""},{"location":"technical-documentation/rest-signposting/#alternate-representations","title":"Alternate Representations","text":"<p>Other representations generated by different serializers available through Drupal's REST API are exposed as link headers with <code>rel=\"alternate\"</code> and <code>type</code> equal to the mimetype that will be received when dereferencing the link.  For example, if an entity in Drupal has a JSONLD representation, then the link header returned in a GET or HEAD response would look like</p> <p><code>Link: &lt;http://example.org/node/1?_format=jsonld&gt;; rel=\"alternate\"; type=\"application/ld+json\"</code></p>"},{"location":"technical-documentation/rest-signposting/#referenced-entities","title":"Referenced Entities","text":"<p>Entity reference fields are exposed as link headers with <code>rel=\"related\"</code> and a title equal to the entity reference field's display label. For example, if <code>http://example.org/node/1</code> has an entity reference field name \"Associated Content\" that references <code>http://example.org/node/2</code>, then the link header returned in a GET or HEAD response would look like</p> <p><code>Link: &lt;http://example.org/node/2&gt;; rel=\"related\"; title=\"Associated Content\"</code></p>"},{"location":"technical-documentation/rest-signposting/#referenced-taxonomy-terms","title":"Referenced Taxonomy Terms","text":"<p>Entity reference fields for taxonomy terms get special handling.  The taxonomy terms used to tag content are exposed as link headers with <code>rel=\"tag\"</code> and a title equal to the taxonomy term's display label.  If the term has an external URI in a controlled vocabulary, then that URI is provided.  Otherwise, the local Drupal URI is provided.  For example, if a piece of content is tagged with <code>taxonomy/term/1</code>, which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like</p> <p><code>Link: &lt;http://example.org/taxonomy/term/1&gt;; rel=\"tag\"; title=\"Example Term\"</code></p> <p>If instead the term were to have the <code>field_external_uri</code> field with a value of <code>http://exampletwo.org/vocab#term</code> then the link header would look like</p> <p><code>Link: &lt;http://exampletwo.org/vocab#term&gt;; rel=\"tag\"; title=\"Example Term\"</code>.</p>"},{"location":"technical-documentation/rest-signposting/#associated-media","title":"Associated Media","text":"<p>Media entities belonging to nodes are exposed as link headers with <code>rel=\"related\"</code> and a title equal to the display label of their <code>field_media_use</code> taxonomy term.  For example, if a media is tagged as <code>Original File</code> indicating that it is the initial file uploaded, the link header returned in a GET or HEAD response for a node would look like</p> <p><code>Link: &lt;http://example.org/media/1&gt;; rel=\"related\"; title=\"Original File\"</code>.</p>"},{"location":"technical-documentation/rest-signposting/#source-files","title":"Source Files","text":"<p>Files that are the source for media entities are exposed as Link headers in the GET and HEAD responses with <code>rel=\"describes\"</code>. The endpoint to edit the contents of the source file is also exposed using <code>rel=\"edit-media\"</code>. For example, if <code>http://example.org/media/1</code> has the source file <code>http://example.org/file.txt</code>, then a GET or HEAD response would contain both</p> <ul> <li><code>Link: &lt;http://example.org/file.txt&gt;; rel=\"describes\"</code></li> <li><code>Link: &lt;http://example.org/media/1/source&gt;; rel=\"edit-media\"</code></li> </ul>"},{"location":"technical-documentation/rest-signposting/#examples","title":"Examples","text":""},{"location":"technical-documentation/rest-signposting/#requesting-a-node","title":"Requesting a Node","text":"<p>After creating a node, adding it to a Collection, uploading a file and kicking off derivatives, the link headers returned for said node would look like the following.  Note that non-Link headers have been removed for brevity:</p> <pre><code>vagrant@claw:~$ curl -I http://localhost:8000/node/1?_format=json\nHTTP/1.1 200 OK\n...\n# These are provided by Drupal core\nLink: &lt;http://localhost:8000/node/1&gt;; rel=\"canonical\"\nLink: &lt;http://localhost:8000/node/1/delete&gt;; rel=\"https://drupal.org/link-relations/delete-form\"\nLink: &lt;http://localhost:8000/admin/content/node/delete?node=1&gt;; rel=\"https://drupal.org/link-relations/delete-multiple-form\"\nLink: &lt;http://localhost:8000/node/1/edit&gt;; rel=\"edit-form\"\nLink: &lt;http://localhost:8000/node/1/revisions&gt;; rel=\"version-history\"\nLink: &lt;http://localhost:8000/node/1&gt;; rel=\"https://drupal.org/link-relations/revision\"\nLink: &lt;http://localhost:8000/node?node=1&gt;; rel=\"https://drupal.org/link-relations/create\"\n# These are provided by Islandora\nLink: &lt;http://localhost:8000/node/2&gt;; rel=\"related\"; title=\"Member of\"\nLink: &lt;http://purl.org/coar/resource_type/c_c513&gt;; rel=\"tag\"; title=\"Image\"\nLink: &lt;http://localhost:8000/media/1&gt;; rel=\"related\"; title=\"Original File\"\nLink: &lt;http://localhost:8000/media/2&gt;; rel=\"related\"; title=\"Service File\"\nLink: &lt;http://localhost:8000/media/3&gt;; rel=\"related\"; title=\"Thumbnail Image\"\nLink: &lt;http://localhost:8000/node/1?_format=jsonld&gt;; rel=\"alternate\"; type=\"application/ld+json\"\n</code></pre>"},{"location":"technical-documentation/rest-signposting/#requesting-a-media","title":"Requesting a Media","text":"<p>If we were to inspect one of the Media associated with this node (which we would've gotten in the response above), the results would look like:</p> <pre><code>vagrant@claw:~$ curl -I http://localhost:8000/media/1?_format=json\nHTTP/1.1 200 OK\n...\n\n# These are provided by Drupal core\nLink: &lt;http://localhost:8000/media/add&gt;; rel=\"https://drupal.org/link-relations/add-page\"\nLink: &lt;http://localhost:8000/media/add/image&gt;; rel=\"https://drupal.org/link-relations/add-form\"\nLink: &lt;http://localhost:8000/media/1&gt;; rel=\"canonical\"\nLink: &lt;http://localhost:8000/admin/content/media&gt;; rel=\"collection\"\nLink: &lt;http://localhost:8000/media/1/delete&gt;; rel=\"https://drupal.org/link-relations/delete-form\"\nLink: &lt;http://localhost:8000/media/delete?media=1&gt;; rel=\"https://drupal.org/link-relations/delete-multiple-form\"\nLink: &lt;http://localhost:8000/media/1/edit&gt;; rel=\"edit-form\"\nLink: &lt;http://localhost:8000/media/1&gt;; rel=\"https://drupal.org/link-relations/revision\"\n# These are provided by Islandora\nLink: &lt;http://localhost:8000/node/1&gt;; rel=\"related\"; title=\"Media of\"\nLink: &lt;http://pcdm.org/use#OriginalFile&gt;; rel=\"tag\"; title=\"Original File\"\nLink: &lt;http://localhost:8000/media/1?_format=jsonld&gt;; rel=\"alternate\"; type=\"application/ld+json\"\nLink: &lt;http://localhost:8000/media/1/source&gt;; rel=\"edit-media\"\nLink: &lt;http://localhost:8000/_flysystem/fedora/2019-03/IF-Org-Chart_0.jpg&gt;; rel=\"describes\"; type=\"image/jpeg\"\n</code></pre>"},{"location":"technical-documentation/running-automated-tests/","title":"Running Automated Tests","text":"<p>See the Drupal Documentation on PHPUnit in Drupal.</p>"},{"location":"technical-documentation/running-automated-tests/#setting-up-phpunit","title":"Setting up PhpUnit","text":"<p>Before you can use phpunit, you must first install the following: </p> <p><code>composer require --dev -W phpspec/prophecy-phpunit drupal/core-dev</code></p> <p>In ISLE, you need to make the database port available to PHPUnit. To do that, edit <code>docker-compose.yml</code> and find the section including <code>image: islandora/mariadb[version number]</code>. Shortly below is a <code>labels:</code> heading; set the value of the <code>traefik.enable:</code> to <code>\"true\"</code>. Apply the changes made to the <code>docker_compose.yml</code> using <code>docker compose up -d</code>.</p> <p>Follow the <code>Configure PHPUnit</code> and <code>Create a directory for HTML output</code> sections in Drupal Documentation on running phpunit tests to make a <code>phpunit.xml</code> file. Note that:</p> <ul> <li> <p>If you place the <code>phpunit.xml</code> file in any directory other than <code>[drupal root]/web/core</code>, you need to change the 'bootstrap' in the <code>&lt;phpunit&gt;</code> tag near the top of the file to point to the relative or absolute location of the <code>[drupal root]/web/core</code> folder.</p> </li> <li> <p>When setting the <code>SIMPLETEST_DB</code> database credentials in ISLE, </p> <ul> <li>the default username and db_name are <code>drupal_default</code></li> <li>your db_password can be found in <code>codebase/web/sites/default/settings.php</code></li> </ul> </li> <li> <p>Unless you changed the default values, just swap out [password] for your actual db password in the following:</p> </li> </ul> <pre><code>mysql://drupal_default:[password]@islandora.traefik.me:3306/drupal_default`.\n</code></pre>"},{"location":"technical-documentation/running-automated-tests/#running-phpunit","title":"Running PHPUnit","text":"<p>If you are in the Drupal root directory (<code>codebase</code> on ISLE; the one containing <code>web</code>) and your <code>phpunit.xml</code> file is also in the Drupal root directory, use the following command to run phpunit for a single test file (here, Islandora's DeleteNodeWithMediaAndFile.php):</p> <p><code>vendor/bin/phpunit web/modules/contrib/islandora/tests/src/Functional/DeleteNodeWithMediaAndFile.php</code></p> <p>If your phpunit.xml is in a different directory, such as web/core, then use the -c flag to specify the path to the directory containing phpunit.xml:</p> <p><code>vendor/bin/phpunit -c web/core web/modules/contrib/islandora/tests/src/Functional/DeleteNodeWithMediaAndFile.php</code></p>"},{"location":"technical-documentation/running-automated-tests/#setting-up-phpunit-in-phpstorm","title":"Setting up PHPUnit in PHPStorm","text":"<ul> <li>Drupal Documentation on running phpunit tests</li> </ul>"},{"location":"technical-documentation/testing-notes/","title":"Testing Notes","text":""},{"location":"technical-documentation/testing-notes/#how-to-find-things-in-fedora","title":"How to find things in Fedora?","text":"<p>For any Drupal URI, the corresponding Fedora URIs is computed by the Crayfish Commons library using the Drupal-assigned UUID. In Drupal, a \"pseudo-field\" is available that will display the corresponding Fedora URI on the page of a node, taxonomy term, or media object. The presence of this URI does NOT guarantee the existence of the corresponding entity in Fedora.</p>"},{"location":"technical-documentation/testing-notes/#enabling-the-fedora-uri-pseudo-field","title":"Enabling the Fedora URI Pseudo-field","text":"<p>To display the Fedora URI pseudo-field on a Drupal node, media, or taxonomy term, go to Manage &gt; Configuration &gt; Islandora and select all the bundles for which you would like the Fedora URI displayed. Once you have selected the bundles, and cleared the cache, the new pseudo-field will appear at the bottom of all display modes. You can alter where in the display the Fedora URI field appears, by going to the \"Manage Display\" page for the bundle. For example, for a Repository Item, you'd go to Manage &gt; Structure &gt; Content Types, and under the dropdown for \"Repository Item, select \"Manage Display\". In that list you should see <code>Fedora URI</code> which you can move around (or hide) as desired. This will need to be repeated in each Display mode (tab). Clearing cache may be necessary to refresh the node display.</p> <p>Note: This information used to be stored in a service called Gemini, which kept track of corresponding minted Fedora URIs and their minted equivalents. Gemini was removed for Islandora 2.0.0.</p>"},{"location":"technical-documentation/testing-notes/#how-do-i-search-for-a-object-in-the-solr","title":"How do I search for a object in the Solr?","text":"<ul> <li>Go to <code>http://localhost:8983/solr/#/islandora/query</code></li> <li>Issue a Solr query.</li> </ul> <p>Example <pre><code>ss_search_api_id:\"entity:node/4:en\"\n</code></pre></p>"},{"location":"technical-documentation/testing-notes/#sample-triplestore-queries","title":"Sample Triplestore queries","text":"<ul> <li>Go to <code>http://localhost:8080/bigdata/#query</code></li> <li>Under namespaces (<code>http://localhost:8080/bigdata/#namespaces</code>), make sure <code>islandora</code> is selected.</li> </ul>"},{"location":"technical-documentation/testing-notes/#find-all-triples-with-given-object-as-the-subject","title":"Find all triples with given object as the subject","text":"<pre><code>select ?p ?o  where { &lt;drupal_url&gt; ?p ?o }\n</code></pre> <p>Example:</p> <pre><code>select ?p ?o  where { &lt;http://localhost:8000/media/8?_format=jsonld&gt; ?p ?o }\n</code></pre>"},{"location":"technical-documentation/testing-notes/#getting-objects-in-a-collection","title":"Getting objects in a collection","text":"<pre><code>select ?s where { ?s &lt;http://pcdm.org/models#memberOf&gt; &lt;drual_url_of_the_collection?_format=jsonld&gt; }\n</code></pre> <p>Example:</p> <pre><code>select ?s where { ?s &lt;http://pcdm.org/models#memberOf&gt; &lt;http://localhost:8000/node/7?_format=jsonld&gt; }\n</code></pre>"},{"location":"technical-documentation/testing-notes/#find-all-mediafiles-belonging-to-a-node","title":"Find all media/files belonging to a node","text":"<pre><code>select ?s where { ?s &lt;http://pcdm.org/models#fileOf&gt; &lt;drupal_url_of_the_object?_format=jsonld&gt; }\n</code></pre> <p>Example:</p> <pre><code>select ?s where { ?s &lt;http://pcdm.org/models#fileOf&gt; &lt;http://localhost:8000/node/4?_format=jsonld&gt; }\n</code></pre>"},{"location":"technical-documentation/updating-drupal/","title":"Updating Drupal","text":""},{"location":"technical-documentation/updating-drupal/#introduction","title":"Introduction","text":"<p>This section describes how to update Drupal and its modules using Composer. If you installed Islandora using the Islandora Playbook or ISLE, then your Drupal was installed by Composer, so it is best practice to continue using Composer for updates. The method on this section is not specific to Islandora, and does not (yet) include how to update Islandora Features.</p> <p>How to upgrade Drupal in ISLE</p> <p>For specific instructions on how to upgrade Drupal core and the Drupal modules installed within ISLE, please refer to the documentation page: Maintaining Your Drupal Site</p>"},{"location":"technical-documentation/updating-drupal/#what-is-composer","title":"What is Composer","text":"<p>It is recommended by Drupal.org and the Islandora community to use Composer with Drupal for various tasks.</p> <p>\"Composer is a dependency manager for PHP. Drupal core uses Composer to manage core dependencies like Symfony components and Guzzle.\" [Source]</p>"},{"location":"technical-documentation/updating-drupal/#always-create-backs-ups-db-and-files-before-updating","title":"Always create backs ups (DB and files) before updating","text":"<p>Before updating either Drupal core or Drupal modules:</p> <ul> <li>Back up both your files and database. Having a complete backup makes it easy to revert to the prior version if the update fails.</li> <li>Optionally, if you made manual modifications to files like .htaccess, composer.json, or robots.txt, copy them somewhere easy to find. Because after you've installed the new Drupal core, you will need to re-apply the changes. For example, Acquia Dev Desktop places a .htaccess file in the top-level directory and without it, only the homepage on your site will work.</li> </ul> <p>Warning: Always revert to a backup if you get a fatal error in the update process.</p>"},{"location":"technical-documentation/updating-drupal/#updating-drupal-core","title":"Updating Drupal Core","text":"<p>Over time new versions of Drupal \u201ccore\u201d are released, and Islandora users are encouraged to install official Drupal core updates and security patches. On the other hand \u201calpha\u201d and \u201cbeta\" versions of Drupal core should only be installed by advanced users for testing purposes.</p> <p>The Islandora community STRONGLY recommends that the \"Composer\" method of upgrading Drupal core be used with Islandora as mentioned here.</p>"},{"location":"technical-documentation/updating-drupal/#here-is-an-overview-of-the-steps-for-updating-drupal-core-using-composer","title":"Here is an overview of the steps for updating Drupal core using Composer","text":"<p>Back Up</p> <p>First make sure you have made database and file back ups.</p> <p>1) First, verify that an update of Drupal core actually is available:</p> <p><code>composer outdated \"drupal/*\"</code></p> <p>If there is no line starting with drupal/core, Composer isn't aware of any update. If there is an update, continue with the commands below.</p> <p>2) Assuming you are used to updating Drupal and know all the precautions that you should take, the update is as simple as:</p> <p><code>composer update drupal/core --with-dependencies</code></p> <p>If you want to know all packages that will be updated by the update command, use the --dry-run option first.</p> <p>Alternate syntax for Islandora 8 needed</p> <p>If you are running the older Islandora 8 codebase that predates the Islandora 2 release, note that Islandora 8 is configured to use a fork of drupal-composer/drupal-project which requires this specific composer syntax compared to other Drupal 8+ sites: </p> <p><code>composer update drupal/core webflo/drupal-core-require-dev \"symfony/*\" --with-dependencies</code> </p> <p>In addition, if you are upgrading from 8.5 to 8.7, you need to replace \"~8.5.x\" with \"^8.7.0\" for drupal/core and webflo/drupal-core-require-dev in composer.json. [Source]</p> <p>3) Apply any required database updates using <code>drush updatedb</code>, or use the web admin user interface.</p> <p><code>drush updatedb</code></p> <p>4) Clear the cache using drush <code>cache:rebuild</code>, or use the web admin user interface.</p> <p><code>drush cache:rebuild</code></p> <p>For stepwise update instructions visit this page: https://www.drupal.org/docs/8/update/update-core-via-composer#s-stepwise-update-instructions</p>"},{"location":"technical-documentation/updating-drupal/#updating-drupal-modules","title":"Updating Drupal Modules","text":"<p>Islandora uses several general Drupal modules and some specialized Islandora Drupal modules, and over time new versions of these modules are released. There are two approaches to updating Drupal modules in Islandora: using Composer or updating modules individually. Islandora uses Composer to determine which Drupal module versions should be installed for each release of Islandora. Therefore if you update the Islandora specific Drupal modules using Composer you will also update any dependent general Drupal modules as well. The second method is to individually update Drupal modules.</p> <p>For more information about how to update Drupal modules visit:</p> <p>https://www.drupal.org/docs/8/extending-drupal-8/updating-modules</p> <p>Back Up</p> <p>First make sure you have made database and file back ups.</p>"},{"location":"technical-documentation/using-rest-endpoints/","title":"Islandora via REST","text":"<p>Each node, media and file in Drupal has its own URI and we can GET the resources, some in a variety of formats.</p> <p>We can also create nodes, media and files in Drupal by using PUT and/or POST requests.</p> <p>We can update the field content by using a PATCH request and lastly we can DELETE a node, media or file resource.</p> <p>To perform these actions, you will need the <code>RESTful Web Services</code> module enabled.</p> <p>To configure your setup via the UI, you also need the <code>RESTful UI</code> module enabled.</p> <p>Then you can configure your REST services at <code>https://&lt;yourmachine&gt;/admin/config/services/rest</code></p> <p>This screenshot shows the setup for resources, you can see the various HTTP methods and what formats they will respond in and what authentication methods they support.</p> <p></p> <ol> <li>Authorization</li> <li>Getting resources - GET</li> <li>Creating resources - POST/PUT</li> <li>Updating resources - PATCH</li> <li>Deleting resources - DELETE</li> </ol>"},{"location":"technical-documentation/using-rest-endpoints/#further-reading","title":"Further Reading","text":"<ul> <li>RESTful Web Services API overview</li> </ul>"},{"location":"technical-documentation/versioning/","title":"Versioning Policy","text":"<p>Islandora uses semantic versioning for all non-Legacy code in the github.com/Islandora organization. This allows us to be compatible with Composer and with Drupal's release naming conventions for contributed modules.</p>"},{"location":"technical-documentation/versioning/#semantic-versioning","title":"Semantic Versioning","text":"<p>Semantic Versioning is a common versioning standard. Versions have the form: Major version, Minor version, or Patch.</p> <ul> <li>Major version: Major changes, and breaks the API.</li> <li>Minor version: New features, and does not break the API.</li> <li>Patch: Bug fixes, and never breaks backward compatibility.</li> </ul>"},{"location":"technical-documentation/versioning/#examples","title":"Examples","text":"<ul> <li><code>1.2.3 =&gt; 1.2.4</code> - Just a bug fix, should be a drop-in replacement.</li> <li><code>1.2.3 =&gt; 1.3.0</code> - Adds in new features, should be a drop-in replacement to get new functionality.</li> <li><code>1.2.3 =&gt; 2.0.0</code> - Major changes, may require a migration or changes to your set-up.</li> </ul>"},{"location":"technical-documentation/versioning/#repositories-under-semantic-versioning","title":"Repositories under semantic versioning","text":"<p>The following Islandora components use semantic versioning:</p> <ul> <li>Alpaca</li> <li>Chullo</li> <li>Crayfish</li> <li>Crayfish Commons</li> <li>Syn</li> <li>controlled_access_terms (Drupal module)</li> <li>islandora (Drupal module)</li> <li>jsonld (Drupal module)</li> <li>openseadragon (Drupal module)</li> <li>islandora_mirador (Drupal module)</li> </ul> <p>Drupal submodules, which are included in several of the above modules, share versions with their parents. </p> <p>Drupal module versions switched from 8.x-1.x to 2.x</p> <p>In October 2021, Islandora switched from the \"core compatibility\" based numbering scheme (8.x-1.x) to a pure semantic versioning scheme for its Drupal modules. In accordance with Drupal's requirements, this transition required us to bump the major version, from 1.x to 2.x, despite there not being any major API-breaking changes to the code itself.</p>"},{"location":"technical-documentation/versioning/#implications-for-release-process","title":"Implications for Release Process","text":"<p>Committers should now create (i.e. \"tag\") new versions of components when new bug fixes, features, or API changes are successfully added. This means that \"releases\" (new versions) will be happening individually, continually, and far more frequently than before. See Releasing Islandora.</p>"},{"location":"technical-documentation/versioning/#module-interdependencies","title":"Module Interdependencies","text":"<p>When Islandora components require other Islandora components in their <code>composer.json</code> files, we prefer the version specification syntax <code>^2</code> to point to the latest-released compatible version within the specified major version.</p>"},{"location":"tutorials/blocks/","title":"Using Blocks","text":"<p>In Drupal, blocks are snippets of content that can be placed on pages within your website's layout. Some examples of blocks are your site's menu, breadcrumbs, search block, etc...  You have a lot of control over when and where you see blocks using Drupal's administrative interface.   You can create and delete blocks, as well as move them around in different locations on the page (called 'regions' in Drupal theme terminology).  You can also control on which pages the blocks are visible, allowing you to conditionally show/hide them as appropriate.  Blocks are made available to place by enabling the Drupal modules that provide them, and there's lots out there to choose from.  Placing blocks is an essential skill for any site administrator, so let's jump right in and get our hands dirty. There are two methods discussed here: the \"Block Layout\" interface, and using \"Contexts\". There is a third option, \"Display Suite,\" that is not discussed here.</p>"},{"location":"tutorials/blocks/#using-block-layout","title":"Using Block Layout","text":"<p>Using the admin toolbar, navigate to Admin &gt; Structure &gt; Block layout (admin/structure/block).  You will see a table listing all of the available regions provided by the current theme for block placement.  You can switch between available themes using the tabs above the table.  For each region, enabled blocks are listed and can be re-arranged.  Take a look at the \"Main Content\" region for example.</p> <p></p> <p>If you wanted to move the content above its tabs, you could drag the \"Main page content\" block above the \"Tabs\" block. If you scroll all the way down to the bottom and click the \"Save blocks\" button, now when you go to view content you should see something like this</p> <p></p> <p>If you want to add a new block to a region, hit the \"Place block\" button for that region and you'll be brought to a modal that will let you select which block to place.</p> <p></p> <p>After selecting your block, you will be brought to its configuration form.</p> <p></p> <p>Here you can give the block a different title, change its region using a dropdown, and control its visibility settings by configuring various conditions. In our case, we're adding the \"Development\" block to the \"Footer\" region. And since we want to see this block everywhere, we'll leave the visibility settings alone for now.  Click the \"Save block\" button, and now if we go view some content we should see the \"Development\" menu in the footer of our site.</p> <p></p> <p>If we want to limit this eyesore to only the front page of our site, we can revisit the visibility settings of the block. Navigate to the block we just placed on the block placement page, and click its \"Configure\" button.  Here you can limit the block to show only for certain roles or content types.  You can also explicitly set a white or black list of pages, which is what we'll do.</p> <p></p> <p>Click the Pages tab and you'll have a text area you can list pages in.  We're going to enter <code>&lt;front&gt;</code>, which is a special value that means \"The front page of your site\".  Underneath the text area, you can select whether you are showing or hiding the block for this list of pages.  We want to show this only on the front page, so we'll leave it set at \"Show for the listed pages\".  Click \"Save block\" and go back to a piece of content.  You shouldn't see the development menu.</p> <p></p> <p>But go to the frontpage and...</p> <p></p>"},{"location":"tutorials/blocks/#using-context","title":"Using Context","text":"<p>The visibility conditions in the block placement user interface are simple and effective.  They cover the majority of use cases, however, there are times when you need even more control.  This is where the Context module really shines. Any condition available to the Context module can be used to control block visibility.  And you can even combine conditions using Boolean (AND/OR) logic.</p> <p>For example, in the Islandora Starter Site, we provide a context specifically for showing a list of members of a collection. All of our content is the same content type (Repository Item), and Collections are distinguished by being tagged with the \"Collection\" taxonomy term.  Using the admin toolbar, if you navigate to Admin &gt; Structure &gt; Context (admin/structure/context), you should see a list of all contexts available to the site.</p> <p></p> <p>Click the \"Configure\" button on the \"Collection\" context.</p> <p></p> <p>You can see in its \"Condition\" section, we have the \"Node has term\" condition, which checks for content tagged with the term provided by the user.  In this case, it's set to look for the \"Collection\" tag.  Underneath, in the \"Reaction\" section, you can see that the \"Block\" reaction has been selected, and its configuration looks a lot like the core block placement UI. The only difference here is that when the \"Include blocks from block layout\" box is checked, you are only placing the blocks you want to add in addition to an already existing block layout.  If you uncheck the box, you are creating an entirely new block layout from scratch, and will have to replace basic things like breadcrumbs and menus.</p> <p></p> <p>Here you can see we've added only the members block to this block layout.  If we go and navigate to a collection, you'll see its list of members underneath its content.</p> <p></p> <p>If we edit the collection and change its model tag from \"Collection\" to anything else, you'll see the block disappears!</p> <p></p> <p>As you can see, block placement can be very flexible, and allow you to customize your site in a very granular fashion. Between using core block placement and the context module, there's no block you can't get into the right place on your site.</p>"},{"location":"tutorials/blocks/#video-walkthrough-blocks","title":"Video Walkthrough: Blocks","text":"<p>Click the image below to open the Blocks video tutorial on the Islandora Youtube channel.</p> <p></p> <p>See more videos from the Drupal 101 series here.</p> <p>Islandora Quick Lessons (2020)</p> <p>Learn more with this video on Creating a Custom Block.</p>"},{"location":"tutorials/create-a-resource-node/","title":"Create a Resource Node","text":""},{"location":"tutorials/create-a-resource-node/#overview","title":"Overview","text":"<p>This tutorial will walk you through adding a piece of digital content (an image and some metadata) into an Islandora repository, creating an Islandora Resource Node. At the end, you will have metadata in a Drupal node, a file stored in Fedora, and derivatives automatically created.</p> <p>Video version available</p> <p>The material in this tutorial is presented in our video, Adding Content.</p>"},{"location":"tutorials/create-a-resource-node/#tools","title":"Tools","text":"<p>For this tutorial you will need an instance of Islandora Starter Site. You can also use the online sandbox or one of the sandbox VMs.</p> <p>Online Sandbox</p> <p>login credentials for online sandbox</p>"},{"location":"tutorials/create-a-resource-node/#step-1-create-an-islandora-node","title":"Step 1: Create an Islandora Node","text":"<p>To add content to Islandora, start by creating a node. When logged in to Drupal as an administrator, navigate with the top menu bar to Manage &gt;&gt; Content &gt;&gt; Add content or click on Add content under the Tools menu.</p> <p></p> <p>Next, select a content type that is configured with Islandora behaviours. In the Islandora Starter Site, there is an Islandora content type. It is called Repository Item.</p> <p></p> <p>At the top of the form, the Model field is a mandatory Islandora field. Select Image from the Model drop box. This will enable image display behaviours, and cause image derivatives to be generated once we upload a file.</p> <p></p> <p>The rest of the form contains a large number of metadata fields, grouped into collapsible sections. Fill out the Title (mandatory) and whichever other fields are applicable to you.</p> <p>Keep it simple</p> <p>For this tutorial, do not attempt to fill out any fields with an autocomplete symbol - a small circle at the right-hand-side of the text box. </p> <p>Then, click Save. You have now created a node, and since it is of an Islandora content type, we call it a \"resource node.\"</p> <p></p> <p>The new node page displays, with the title, any metadata that we entered, and a Fedora URI which you can click on to see if this new node has been synced into Fedora (this only works if you have permission to access Fedora). Congratulations, you have created a resource node!</p>"},{"location":"tutorials/create-a-resource-node/#step-2-upload-an-original-file","title":"Step 2: Upload an Original File","text":"<p>Alas, your node has no files. To upload a file, click on the node's Media tab.</p> <p></p> <p>Concept: Media tab</p> <p>The \"Media\" tab shows Media that we say \"belong to\" or are \"media of\" that node. The idea of media \"belonging to\" nodes, and the \"Media\" tab, are part of Islandora but not part of standard Drupal.</p> <p>The Media tab shows nothing listed, because this node has no files. So click on Add Media. You will be taken to a list of media types to choose from.</p> <p></p> <p>We want to add a jpg image, so click on Image. You are now presented with a form to create a media.</p> <p>Images vs TIFFs</p> <p>Drupal considers any type of image that can be viewed natively in the browser as an Image. For other image types that require special viewers, such as TIFFs, you would have to choose File. Learn more about Media in Islandora.</p> <p></p> <p>This form contains fields for metadata about the file, including \"technical metadata\". There are three important parts of the form:</p> <ol> <li>Name, which identifies this media.</li> <li>Image, the file to upload, and its alternative text.</li> <li>Media Use, describing what this file is in the context of its resource node. To trigger derivative generation, select the checkbox for Original File.</li> </ol> <p>With the mandatory fields filled out (do not edit the \"Media of\" field), click Save, and a new Media will be created attached to your resource node. You will land on the administrator's list of Media (i.e. all media on your site, not just those attached to the resource node), and the new media object you created is at the top of the list.</p> <p></p> <p>Select the Media you just created, and you will see a page containing that Media's information and a rendering of the image that you uploaded.</p>"},{"location":"tutorials/create-a-resource-node/#step-3-verify-derivatives-were-created","title":"Step 3: Verify derivatives were created","text":"<p>Now return to the node you created, and you will see the image along with its (minimal) descriptive metadata. The image you are viewing is not the one you uploaded, but a lower-resolution service file that was created and stored in the Drupal public filesystem.</p> <p></p> <p>If you open the node's Media tab, you should see new Media have been added - these are derivatives have been created automatically, including a service file, a thumbnail, and a FITS technical metadata file.</p> <p></p> <p>You now have an Islandora resource node, which is a special case of a Drupal node, and it has Media attached to it including an Original File, Thumbnail, Service File, and FITS Technical Metadata file.</p>"},{"location":"tutorials/create-a-resource-node/#learn-more","title":"Learn More","text":"<ul> <li>Drupal documentation on Nodes</li> <li>Drupal documentation on Media.</li> </ul>"},{"location":"tutorials/create-update-views/","title":"Create or Update a View","text":""},{"location":"tutorials/create-update-views/#overview","title":"Overview","text":"<p>Views are powerful content filters that enable you to present Islandora (and other) content in interesting and exciting ways. For more documentation on views:</p> <ul> <li>Drupal.org documentation on Views</li> </ul>"},{"location":"tutorials/create-update-views/#before-you-start","title":"Before you start","text":"<ul> <li>The following How-To assumes that you are using the (optional) Islandora Starter Site configuration. This configuration is deployed automatically if you build your Islandora site using the Ansible Playbook, ISLE, or are using the sandbox or a Virtual Machine Image</li> <li>This How-To assumes familiarity with Drupal terms such as Node, Content Type, and Media.</li> </ul>"},{"location":"tutorials/create-update-views/#how-to-modify-an-existing-view","title":"How to modify an existing view","text":"<p>Islandora Starter Site ships with some views already created and turned on. The Islandora home page displays content items that have been added to Islandora. This view is named Frontpage, and it lists items that meet the following filter criteria:</p> <ul> <li>The item is in the published state.</li> <li>The checkbox Promoted to front page is selected.</li> </ul> <p>This view will display all content items added to Islandora, as the checkbox Promoted to front page is on by default.</p> <p>As you develop your Islandora Website it is likely that you will need to change the default behaviour of the Frontpage View. As an example, the following describes how to edit the Frontpage page view to only show content items and not collections.</p> <p>For this example, we added six collection items to Islandora. In total there are eight items in the repository. In addition to the six collection items, there is one audio item and one image item.</p> <ol> <li>Using your Web browser, open the Islandora front page.</li> <li> <p>To edit the front page view, hover over the view (Frontpage view) and select Edit view when displayed.</p> <p></p> </li> <li> <p>Select Add under the filter criteria section.</p> <p></p> </li> <li> <p>We do not want to display collections, so we need to add a filter criteria that does not filter for the Islandora model type 'Collection'.</p> <ol> <li> <p>Select Model from the list and then Apply (all displays).</p> <p></p> </li> <li> <p>Select Islandora Model to select filters on Islandora model types and select Apply and continue.</p> <p></p> </li> <li> <p>Select the operator Is none of and the Collection model (autocomplete should work here to help you). To finish click Apply (all displays).</p> <p></p> </li> <li> <p>Save the view. Now the 'Frontpage' View does not display collections.</p> <p></p> </li> </ol> </li> </ol>"},{"location":"tutorials/create-update-views/#how-to-create-a-new-view","title":"How to create a new view","text":"<p>For this example, we create a new view that only shows collections. It will be created as a Block (also see the tutorial on Configuring Blocks) that will only display on the front page. We will add the new collection list block below the existing frontpage view that lists items.</p> <ol> <li>Using your Web browser, open the Islandora front page</li> <li>Navigate to Administration &gt;&gt; Structure &gt;&gt; Views</li> <li>Create a new view by selecting Add view</li> <li> <p>Name the view and select Create a block. Give the block a title and decide how you want it to display (Grid, Table, List, Paging). To progress, select Save and edit.</p> <p> 5.  Customize the view format and sorting as required. 6.  Add a filter criteria to only show the Islandora model type of 'Collection' and Save the view.</p> <p> 7.  To place the view on front page, the new block must be added to the 'Main page content' area (using 'Block layout') and set to display on the front page. 1. Navigate to Administration &gt;&gt; Structure &gt;&gt; Block layout (/admin/structure/block). Under Main content select Place block</p> <pre><code>![Frontpage view collection list place block](../assets/frontpage_view_collection_list_place_block.png)\n</code></pre> <ol> <li>Find the new block, 'Collection List' and select Place block.</li> <li> <p>Restrict the block to only display on the frontpage by adding the text '' to the Page vertical tab. Then select Save block. <p>     4.  Review the block placement and move if required.</p> <p> 8. The 'Collection list' now only displays on the front page. It displays below the Main page content.</p> <p></p> <p>Islandora Quick Lessons</p> <p>Learn more with videos on Basic Views and Advanced Views.</p>"},{"location":"tutorials/how-to-create-collection/","title":"How to create and add to a Collection","text":"<p>This how-to demonstrates creating a collection and adding items to it in the Islandora Starter Site. For more about collections, see Concept: Collection.</p>"},{"location":"tutorials/how-to-create-collection/#introduction","title":"Introduction","text":"<p>In the Islandora Starter Site, nodes that have \"Collection\" in their Model field will show a view of their member (\"child\") objects. A member is any object that is \"Member of\" that object, and can be added via the \"Children\" tab. This is the mechanism in the Islandora Starter Site, and your individual instances may vary.</p> <p>Collections and Deleting</p> <p>Collections and their members are independent of each other, and removing something from a collection does not delete it. Similarly, deleting a collection does not delete its members.</p>"},{"location":"tutorials/how-to-create-collection/#creating-a-collection","title":"Creating a Collection","text":"<p>When logged in, click Manage &gt; Content on the admin toolbar. Then, click on Add content.</p> <p></p> <p>Then click on 'Repository Item' to give your collection the default metadata profile for Islandora.</p> <p></p> <p>Fill out the form.</p> <p>At the top of the form, select \"Collection\" from the Model dropdown list.</p> <p></p> <p>When done filling out the form, click Save.</p> <p></p> <p>The collection has been created. Now let's add some members to this collection.</p>"},{"location":"tutorials/how-to-create-collection/#add-existing-items-to-a-collection","title":"Add Existing Items to a Collection","text":"<p>To populate a collection with existing items, return to any existing content and click on its Edit tab. This brings up the form for this item.</p> <p></p> <p>Scroll down to the bottom of the form to find the System section. In the Member of field, start typing in the name of the collection this item should belong to. Select the name of the collection you want from the autocomplete. It is important that you select it from the dropdown, not just type in the correct title, because selecting it causes the node id to appear beside the title and allows Drupal to create a relationship.</p> <p></p> <p>The correct collection is now selected.  Click Save when ready.</p> <p></p> <p>To confirm, return to the collection and verify the new item appears in the collection's list of members.</p> <p></p>"},{"location":"tutorials/how-to-create-collection/#add-a-new-item-as-a-member-of-a-collection","title":"Add a New Item as a Member of a Collection","text":"<p>To create an item and add it as a member to a collection in one step, visit a collection and click on its Children tab. From the Children tab, you can manage the members of a collection and perform actions on them.</p> <p></p> <p>Click on the +Add Child button, and then select Repository Item as your new item's Content Type.  Only content types that have the <code>field_member_of</code> field will be available from this list.</p> <p></p> <p>You are taken to the creation form for a Repository Item, but if you scroll down to the \"System\" section, you should see the widget for \"Member Of\" is already filled out for you with the appropriate collection.</p> <p></p> <p>Click 'Save' at the end of the form to create the new item and add it as a member of the collection.</p> <p>Islandora Quick Lessons</p> <p>Learn more with this video on Making a Collection.</p>"},{"location":"tutorials/switch-homepage-to-twig/","title":"Format Homepage with TWIG","text":""},{"location":"tutorials/switch-homepage-to-twig/#twig-debugging","title":"TWIG Debugging","text":"<p>It's helpful to identify which TWIGs are available to use and where they're stored but not required use TWIGs to format the homepage.</p> <p></p> <p><pre><code># Copy the default service.\n$ cp web/sites/default/default.services.yml web/sites/default/services.yml\n\n# fix permissions (just in case)\n$ chown nginx:nginx web/sites/default/services.yml\n\n# I use nano to edit but you can pick whichever editor you want.\n# For this example we'll install the editor\n$ apk add nano\n\n# Now open the newly created service file and set these 3 values under the TWIG config section.\n$ nano web/sites/default/services.yml\n\n...yml\ntwig.config:\n  debug: true\nauto_reload: true\ncache: true\n# Now save and exit (in NANO it's CTRL + x)\n</code></pre> For a video tutorial on this, see Enabling Twig Debugging in Drupal 8/9</p>"},{"location":"tutorials/switch-homepage-to-twig/#copying-templates","title":"Copying Templates","text":"<p>Copy the default TWIG into your theme's template directory.</p> <p><pre><code>$ cp web/themes/contrib/bootstrap/templates/node/node.html.twig web/themes/contrib/solid/templates/node--6--full.html.twig\n\n# Clear cache\n$ drush cr\n</code></pre> And now if you view the home page's source code you should now see the <code>X</code> next to the loaded TWIG file. Please note that the file name corresponds to the node number. To use the URL alias instead of the node ID requires additional work. Here's a tutorial on this topic. <pre><code>&lt;!-- FILE NAME SUGGESTIONS:\n   x node--6--full.html.twig\n   * node--6.html.twig\n   * node--page--full.html.twig\n   * node--page.html.twig\n   * node--full.html.twig\n   * node.html.twig\n--&gt;\n</code></pre></p> <p>Now edit the TWIG file (web/themes/contrib/solid/templates/node--6--full.html.twig) to say whatever you want, and it should show up immediately without needing to clear cache.</p>"},{"location":"tutorials/switch-homepage-to-twig/#clean-up","title":"Clean up","text":"<p>Don't forget to turn off TWIG debugging in config file (web/sites/default/services.yml). This will likely have unexpected consequences on production system performance.</p> <pre><code>twig.config:\n  debug: false\n  auto_reload: false\n</code></pre>"},{"location":"user-documentation/access-control/","title":"Access control in Islandora","text":"<p>This page is about controlling who can view or edit your Islandora content (metadata and binaries).</p> <p>Islandora recommends using Drupal's access control features. Contributed modules such as those described below, can provide additional flexibility and configurability. However, these only apply when content is accessed through Drupal, and are not applied to data in Fedora, the Triplestore, or Solr.</p> <p>Known strategies for implementing access control in Drupal include:</p> <ul> <li>Core Drupal</li> <li>Group</li> <li>Permissions by Term</li> <li>Field Permissions</li> </ul> <p>Exposed Endpoints</p> <p>If access control is a concern, you will want to lock down access to the following services that are part of the Islandora Suite:</p> <ul> <li>Fedora (REST API and admin client)</li> <li>Solr (API and admin client)</li> <li>Blazegraph (API and admin client)</li> </ul> <p>as anyone accessing data through those services are bypassing Drupal's access control. In all out-of-the-box sandboxes and demo instances, these services are wide open.</p>"},{"location":"user-documentation/access-control/#access-control-in-core-drupal","title":"Access control in Core Drupal","text":"<p>Summary: Core Drupal's access control features include the \"published\"/\"unpublished\" states and some basic permissions that can be granted globally or at the bundle level.</p> <p>Drupal's concepts of \"published\" and \"unpublished\" for nodes and media apply to Islandora just as they do in Drupal. Usually, published content is visible to the entire world (without any authentication), while unpublished content can only be accessed by selected users - usually administrators, other privileged roles, and the user who created the content. This is configurable through the Drupal Permissions interface.</p> <p>All Drupal permissions are granted to roles, not individual users. Read more documentation on Users, roles, and permissions.</p> <p>The extent of the configurability of Drupal Core's access control (excluding revisions) is provided by the following permissions:</p> View permissions (apply to all content or all media regardless of bundle) - View all published content - View own unpublished content - View (published) media - View own unpublished media \"Editing\" permissions (can be granted for a specific bundle, or for all nodes or media): - Create new content - Edit (your) own content - Edit any(one's) content - Delete (your) own content - Delete any(one's) content Administrative permission (includes all the above and more, give to trusted users only): - Administer content <p>These are the basic access control options built into Drupal Core. There are many contributed modules that do access control, some are described below. Before using access control modules, please see Comparison and Overview of Access Control modules on drupal.org.</p> <p>Contributed modules are required for the following cases:</p> <ul> <li>individual nodes or media having their own access policies (in Core Drupal, access can only be configured at the content type or media type level)</li> <li>access policies that grant privileges to users (in Core Drupal, access can be granted only to roles, and/or to that content's author)</li> <li>contents of specific \"management\" fields being reserved so that only privileged users can view or edit.</li> </ul>"},{"location":"user-documentation/access-control/#islandora-resources","title":"Islandora resources","text":"<p>Given the [Collection] \u2192 Node \u2192 Media \u2192 File structure of Islandora resources, it is reasonable to wonder if access to a Node, Media, or File is influenced by the permissions on its \"parent\" resource.</p> <p>There is not yet a mechanism for Drupal's access control to be \"inherited\" from parent resources to child resources. An exception is non-public files, as described below.</p>"},{"location":"user-documentation/access-control/#sidebar-access-to-files-in-drupal","title":"Sidebar: Access to files in Drupal","text":"<p>Drupal's access control applies to files except those stored in Drupal's public filesystem.</p> <p>If you upload a file to Drupal, it's usually stored in a field on an entity. In Islandora, that entity is a Media. Drupal's access checks mean that a user must have permission to view the Media, and (if configured) the file field on that media, to see the file. However, file fields can be configured with various forms of file storage, and the file storage determines whether access control checks are applied at all. Files stored in Drupal's public filesystem are always public, viewable by anyone in the world.</p> <p>Drupal's access control applies to files accessed through Drupal where the file storage is:</p> <ul> <li>on Fedora using Flysystem</li> <li>on a Drupal private filesystem</li> <li>on another location such as S3 or Dropbox, through flysystem.</li> </ul> <p>Direct access to file storage</p> <p>Files stored using Flysystem are actually located on a separate service. It is the administrator's responsibility to implement appropriate access control on the target storage system, as there is a way to link directly to files in Fedora, S3, or Dropbox. These direct links bypass Drupal and therefore Drupal's access control.</p> <p>The filesystem used by a field is usually configured through \"Manage Fields\" on the appropriate entity. However, it is possible for a field to be configured to use a certain filesystem, but for actual files created through back-end processes to use a different one. For example, derivatives generated by Islandora as configured in the Islandora Starter Site are written to the public filesystem, despite the field configuration which points to Fedora.</p> <p>To determine the actual location of a file, right-click the existing file in the Media Edit page and select \"copy location\". A file that is saved in flysystem will include <code>/_flysystem/</code> in the URL. These links (you can test it!) only work if you have permission to view the media. A file with <code>/sites/default/files/</code> is probably publicly accessible (this is the public filesystem on most Drupal instances).</p> <p>In the Islandora Starter Site, All Derivatives Are Public</p> <p>Out of the box using the Islandora Starter Site, derivatives are created for all Islandora media (as long as the conditions of the contexts are met), and they are stored in the public Drupal filesystem. This happens even if the media and/or node are not published.</p>"},{"location":"user-documentation/access-control/#access-control-in-solr","title":"Access control in Solr","text":"<p>The Search API Module, which connects Drupal to Solr, provides configuration so that access considerations are respected by the Drupal solr results display. The \"Processors\" configuration (e.g. at admin/config/search/search-api/index/default_solr_index/processors) provides checkboxes for the following options:</p> <ul> <li>\"Content access\": Adds content access checks for nodes and comments</li> <li>\"Entity status\": Exclude inactive users and unpublished entities (which have a \"Published\" state) from being indexed.</li> </ul> <p>Both are enabled out of the box in the Islandora Starter Site. This will ensure that queries through Drupal never show content that the active user shouldn't see, as well as preventing information about unpublished entities from ever being entered into Solr.</p> <p>Solr Admin Client</p> <p>Anyone with access to the Solr Admin Client may see the full contents of the index, regardless of permissions. If this is not desired, you should restrict access to the Solr endpoint and GUI. By default, the Islandora Playbook exposes Solr at <code>http://localhost:8983/solr/</code>. ISLE-DC on the other hand can expose or not expose individual services, including Solr. Since December 2021 this has been available as an option in the <code>.env</code> file and since that time, Solr (and some other services) are not exposed by default.</p>"},{"location":"user-documentation/access-control/#group-contributed-module","title":"Group (contributed module)","text":"<p>\"The Group module allows you to create arbitrary collections of your content and users on your site and grant access control permissions on those collections.\"</p> <p>Opinion</p> <p>Group is one of the more hefty modules, and is difficult to learn. It is good if you have static or semi-static groups of users who need access to a static or semi-static group of content, but sharing an item with an arbitrary group of users is cumbersome.</p>"},{"location":"user-documentation/access-control/#permissions-by-term-contributed-module","title":"Permissions By Term (contributed module)","text":"<p>\"The Permissions by Term module extends Drupal by functionality for restricting view and edit access to single nodes  via taxonomy terms. [...] Taxonomy term permissions can be coupled to specific user accounts and/or user roles.\" By default, this module only affects nodes. To enable Permissions by Term for Media and other entities, enable the \"Permissions by Entity\" submodule.</p> <p>The Islandora Starter Site includes an empty vocabulary called \"Islandora Access\", which is intended to hold such taxonomy terms. However, permissions_by_term or a similar mechanism to control access must be installed and configured on your own.</p> <p>This module is known to work, and appears to be supported well by the Drupal community.</p> <p>Warning</p> <p>This module is known in the Islandora community to cause performance degradation when large numbers of nodes are involved. Seth Shaw describes this in a blog post, Content Access Control Solutions Investigation.</p> <p>Examples Wanted</p> <p>Do you have experience setting up Permissions By Term? We'd love some illustrative examples here.</p>"},{"location":"user-documentation/access-control/#field-permissions-contributed-module","title":"Field Permissions (contributed module)","text":"<p>\"The Field Permissions module allows site administrators to set field-level permissions to edit, view and create fields on any entity.\"</p>"},{"location":"user-documentation/access-control/#other-contributed-modules","title":"Other contributed modules","text":"<p>Workflow Participants allows for granting permissions on individual nodes or media to individual users, as an extension to the Workflow suite of modules. However, it is not well-supported and the \"manage workflow participants\" permission should not be given to untrusted users as it may grant users the ability to add participants even to content they are otherwise not able to see or edit.</p>"},{"location":"user-documentation/access-control/#access-control-in-fedora","title":"Access control in Fedora","text":"<p>In Fedora, it is possible to control access to resources using Access Control Lists (ACLs) per the Fedora API Specification. ACLs are inherited through Fedora's LDP Containment relationships.</p> <p>Islandora does not create customized ACLs when syncing content into Fedora.</p> <p>Islandora does not create Fedora resources in hierarchies that use LDP containment relationships.</p> <p>At this time, access control in Fedora is NOT reflective of access control in Drupal. In the sandboxes and demo installations, all resources in Fedora are open for the world to view. This includes unpublished nodes and media, as well as the files uploaded into Fedora. Access controls configured in Drupal are not synced in any way to Fedora.</p> <p>Sites concerned with access control  wish to \"lock down\" their Fedora to only be accessible through Drupal.</p>"},{"location":"user-documentation/access-control/#access-control-in-the-triplestore","title":"Access control in the Triplestore","text":"<p>Anyone with access to Blazegraph can access all the repository information within Blazegraph. If this is not desired, you should restrict access to the Blazegraph endpoint and GUI. By default, the Islandora Playbook exposes Blazegraph at <code>http://localhost:8080/bigdata/</code>. ISLE-DC on the other hand can expose or not expose individual services, including Blazegraph. Since December 2021 this has been available as an option in the <code>.env</code> file and since that time, Blazegraph (and some other services) are not exposed by default.</p>"},{"location":"user-documentation/access-control/#see-also","title":"See Also","text":"<p>Meta-Issue: Access Restrictions and Embargoes</p>"},{"location":"user-documentation/accessibility/","title":"Accessibility","text":"<p>Accessibility is the ability of a site to be used fully by all users, including those using screen reader technologies or keyboard navigation. </p>"},{"location":"user-documentation/accessibility/#drupal-documentation","title":"Drupal documentation","text":"<p>Islandora's accessibility features are currently provided by Drupal and contributed Drupal modules. These pages within the Accessibility section of the Drupal documentation can provide guidance:</p> <ul> <li>Drupal Accessibility Features (included in core Drupal)</li> <li>Contributed Modules for Extending Accessibility in Drupal</li> <li>Hiding Content Properly (for all users including users with screen readers)</li> <li>How to do an accessibility review?</li> <li>List of External Accessibility Resources</li> </ul>"},{"location":"user-documentation/accessibility/#accessible-themes","title":"Accessible themes","text":"<p>Much of the accessibility of a website is dependent on how specific HTML tags and  attributes are used, thus falls largely into the realm of Drupal Themes. The  Olivero theme and the Claro  admin theme were designed by the Drupal community with accessibility  as a guiding principle. </p>"},{"location":"user-documentation/accessibility/#automatic-alt-text","title":"Automatic alt-text","text":"<p>When creating image media, alt-text is a required attribute. An Islandora function  currently automatically populates the alt-text, if that media is the \"media of\" a node, with the respective node's title.</p> <p>This is not considered good accessibility as the node's title will likely be already on the page, and it doesn't add anything to describing the image itself. Please fill  out the alt text with something meaningful when adding image content to Islandora.</p>"},{"location":"user-documentation/advanced-search/","title":"Islandora advanced search","text":"<ul> <li>Introduction</li> <li>Requirements</li> <li>Installation</li> <li>Configuration</li> <li>Configuring Solr</li> <li>Configure Collection Search</li> <li>Configure Views</li> <li>Collection Search</li> <li>Paging</li> <li>Sorting</li> <li>Configure Facets</li> <li>Include / Exclude Facets</li> <li>Configure Blocks</li> <li>Advanced Search Block</li> </ul>"},{"location":"user-documentation/advanced-search/#introduction","title":"Introduction","text":"<p>Advanced Search adds additional functionality beyond the basic Solr search. It enables the use of Ajax with search blocks, facets, and search results.</p> <p></p>"},{"location":"user-documentation/advanced-search/#requirements","title":"Requirements","text":"<p>Use composer to download the required libraries and modules.</p> <pre><code>composer require drupal/facets \"^1.3\"\ncomposer require drupal/search_api_solr \"^4.1\"\ncomposer require drupal/search_api \"^1.5\"\n</code></pre> <p>However, for reference, <code>islandora_advanced_search</code> requires the following drupal modules:</p> <ul> <li>facets</li> <li>search_api_solr</li> </ul>"},{"location":"user-documentation/advanced-search/#installation","title":"Installation","text":"<p>To download/enable just this module, use the following from the command line:</p> <pre><code>composer require drupal/advanced_search\ndrush en advanced_search\n</code></pre>"},{"location":"user-documentation/advanced-search/#configuration","title":"Configuration","text":"<p>You can set the following configuration at Administration &gt;&gt; Configuration &gt;&gt; Advanced Search Settings (admin/config/search/advanced):</p> <p></p>"},{"location":"user-documentation/advanced-search/#configuring-solr","title":"Configuring Solr","text":"<p>Please review Configure Search before continuing. The following assumes you already have a working Solr and the Drupal Search API setup.</p>"},{"location":"user-documentation/advanced-search/#configure-collection-search","title":"Configure collection search","text":"<p>To support collection based searches you need to index the <code>field_member_of</code> for every repository item as well define a new field that captures the full hierarchy of <code>field_member_of</code> for each repository item.</p> <p>Add a new <code>Content</code> solr field <code>field_descendant_of</code> to the solr index at <code>admin/config/search/search-api/index/default_solr_index/fields</code>.</p> <p></p> <p>Then under <code>admin/config/search/search-api/index/default_solr_index/processors</code> enable <code>Index hierarchy</code> and set up the new field to index the hierarchy.</p> <p></p> <p></p> <p>The field can now be used limit a search to all the descendants of a given object.</p> <p>Re-Indexing</p> <p>You may have to re-index to make sure the field is populated.</p>"},{"location":"user-documentation/advanced-search/#configure-views","title":"Configure views","text":"<p>The configuration of views is outside the scope of this document, please read the Drupal Documentation, as well as the Search API Documentation.</p>"},{"location":"user-documentation/advanced-search/#collection-search","title":"Collection search","text":"<p>It will be typical that you require the following Relationships and Contextual Filters when setting up a search view to enable Collection Search searches.</p> <p></p> <p>Here a relationship is set up with <code>Member Of</code> field and we have two contextual filters:</p> <ol> <li><code>field_member_of</code> (Direct descendants of the Entity)</li> <li><code>field_descendant_of</code> (All descendants of the Entity)</li> </ol> <p>Both of these filters are configured the exact same way.</p> <p></p> <p>These filters are toggled by the Advanced Search block to allow the search to include all descendants or just direct descendants (documented below).</p>"},{"location":"user-documentation/advanced-search/#paging","title":"Paging","text":"<p>The paging options specified here can have an effect on the pager block (documented below).</p> <p></p>"},{"location":"user-documentation/advanced-search/#sorting","title":"Sorting","text":"<p>Additionally, the fields listed as Sort Criteria as Exposed will be made available in the pager block (documented below).</p> <p></p>"},{"location":"user-documentation/advanced-search/#configure-facets","title":"Configure facets","text":"<p>The facets can be configured at <code>admin/config/search/facets</code>. Facets are linked to a Source which is a Search API View Display so it will be typically to have to duplicate your configuration for a given facet across each of the displays where you want it to show up.</p>"},{"location":"user-documentation/advanced-search/#include-exclude-facets","title":"Include / exclude facets","text":"<p>To be able to display exclude facet links as well as include links in the facets block we have to duplicate the configuration for the facet like so.</p> <p></p> <p>Both the include / exclude facets must use the widget <code>List of links that allow the user to include / exclude facets</code></p> <p></p> <p>The excluded facet also needs the following settings to appear and function correctly.</p> <p>The URL alias must match the same value as the included facet except it must be prefixed with <code>~</code> character that is what links to the two facets to each other.</p> <p></p> <p>And it must also explicitly be set to exclude:</p> <p></p> <p>You may also want to enable Hide active items and Hide non-narrowing results for a cleaner presentation of facets.</p>"},{"location":"user-documentation/advanced-search/#configure-blocks","title":"Configure blocks","text":"<p>For each block type:</p> <ul> <li>Facet</li> <li>Pager</li> <li>Advanced Search</li> </ul> <p>There will be one block per View Display. The block should be limited to only appear when the view it was derived from is also being displayed on the same page.</p> <p>This requires configuring the <code>visibility</code> of the block as appropriate. For collection based searches be sure to limit the display of the Facets block to the models you want to display the search on, e.g:</p> <p></p>"},{"location":"user-documentation/advanced-search/#advanced-search-block","title":"Advanced search block","text":"<p>For any valid search field, you can drag / drop and reorder the fields to display in the advanced search form on. The configuration resides on the block so this can differ across views / displays if need be. Additionally, if the View the block was derived from has multiple contextual filters you can choose which one corresponds to direct children, this will enable the recursive search checkbox.</p> <p></p>"},{"location":"user-documentation/breadcrumbs/","title":"Breadcrumbs","text":"<p>Breadcrumbs are a Drupal concept. They provide a hierarchical path of links to \"ancestors\" of the current content item.</p> <p></p>"},{"location":"user-documentation/breadcrumbs/#islandora-breadcrumbs","title":"Islandora Breadcrumbs","text":"<p>Islandora provides a module, \"Islandora Breadcrumbs\" (a submodule of the Islandora module) that creates breadcrumbs based on the value of configured reference fields (by default, <code>field_member_of</code>).  To use Islandora Breadcrumbs, simply enable the module. Islandora breadcrumbs will apply to nodes that have the configured Entity Reference fields.</p> <p>There are a few configuration options for this module, accessible at Manage &gt; Configuration &gt; Islandora &gt; Breadcrumbs  Settings (<code>/admin/config/islandora/breadcrumbs</code>). These include:</p> <ul> <li>Maximum number of ancestor breadcrumbs - an optional feature to  stop adding \"ancestor\" links after a certain number</li> <li>Include the current node in the breadcrumbs?</li> <li>Entity Reference fields to follow - if you're using other fields to refer to parents, you can add them here.</li> </ul> <p></p>"},{"location":"user-documentation/breadcrumbs/#troubleshooting-breadcrumbs","title":"Troubleshooting Breadcrumbs","text":"<p>Breadcrumbs are cached, so if you aren't seeing the results that  you expect, try clearing the Drupal cache.</p>"},{"location":"user-documentation/content-models/","title":"Content models in Islandora","text":""},{"location":"user-documentation/content-models/#resource-nodes","title":"Resource Nodes","text":"<p>This section describes the Islandora concept of a Resource Node. For a step-by-step demonstration, see the tutorial Create a resource node.</p> <p>A resource node holds the descriptive metadata for an Islandora object, as well as groups together the various files that are part of the object for preservation or display, such as the original file  and various derivative files generated from it.</p> <p>The model for exactly what constitutes an object in Islandora is flexible and can be adapted to the needs of specific users. For example, the Islandora Starter Site configuration considers an object as a resource node of the type \"Repository Item\"  which contains descriptive metadata about the object. Attached to that Node are one or more Media, each representing a file that is part of this object, such as \"Original File\", \"Thumbnail\", \"Preservation Master\", etc. With this model, every original file uploaded into Islandora has its own resource node.</p> <p>Multi-file Media configurations also attach Media to a parent node, but allow for that node to be represented by multiple \"Original File\"s. In this model, a Media contains the original file as well as any derivative files created from it (thumbnail, service file, etc.).</p> <p>For an example of where these two different approaches could apply, the basic configuration might make sense for a book that has rich page-level metadata, so that each page would be its own Node with its own metadata record; the multi-file media configuration might be a better fit for a book that does not have page-level metadata (except an ordering or page numbers), so that each Media would represent one page, and all pages (Media) would be attached to a single parent Node/metadata record for the entire book.</p> <p>As we learned in the introduction, objects in an Islandora repository are represented as a combination of resource nodes, media, and files in Drupal. Because of this, their metadata profile, display, form (and much more) are configurable through the Drupal UI.  This gives repository administrators a huge degree of control over their repository without any need for coding. Much more so than ever before. And since we're using a core Drupal solution for modeling our resource nodes and media, compatibility with third-party modules is virtually guaranteed. This opens up a plethora of solutions from the Drupal community that will save you untold time and effort when implementing your repository with Islandora.</p>"},{"location":"user-documentation/content-models/#properties","title":"Properties","text":"<p>Resource nodes, as Drupal nodes, have some common basic properties regardless of content type. These properties are not fields.  This means that they cannot be removed and have limited configurability. Their name, what type of data they hold, etc... are all baked in. Here's an example of the basic properties on nodes:</p> <pre><code>nid: 1\nuid: 1\ntitle: \"I am an Islandora object\"\ncreated: 1550703004\nchanged: 1550703512\nuuid: 02932f2c-e4c2-4b7e-95e1-4aceab78c638\ntype: islandora_object\nstatus: 1\n</code></pre> <p>As you can see, it's all system data used at the Drupal level to track the basics.</p> Property Value nid The local ID for the node uid The ID of the Drupal user who created the node uuid The global ID for any entity title The title for the node created Timestamp of when the node was created changed Timestamp of when the node was last updated type Content type (e.g. which group of fields are present on the node) status Published, unpublished, etc... <p>Compared to Islandora Legacy</p> <p>These node properties are analogous to following Islandora Legacy object properties:</p> Islandora Legacy Islandora owner uid dc.title title PID uuid status status <p>The small amount of configurability available for these properties is found on the content type editing form where a user can choose to change the label of the title field, whether to display author information on the node's page, etcetera. These settings will only apply to nodes of that particular content type.</p> <p></p> <p>To view all of a node's property and field values administrators can use the 'Devel' tab's 'Load' section:</p> <p></p>"},{"location":"user-documentation/content-models/#fields","title":"Fields","text":"<p>In addition to the basic node properties identified above, resource nodes (like all Drupal nodes) can have fields. Most of what we would think of as descriptive metadata is stored as fields. Resource nodes use 'content types' to define a specific set of required and optional fields it has; we can think of content types as metadata profiles for our objects. For example, you might have a content type for a set of repository objects that have very specialized metadata requirements but another content type for generic repository objects that share a more general set of metadata fields. A resource node's content type is set on its creation and is immutable. The section on metadata describes in more detail how fields on Islandora objects work.</p> <p>Configuring fields (adding, editing, removing) is usually done through the Manage &gt; Content types interface, as is described in the tutorial, Create/Update a Content Type.</p> <p>Islandora has a notion of a content model, which is used to identify what type of content is being represented by a node (e.g. an image, a video, a collection of other items, etc...). This is done using a special field, Model, which accepts taxonomy terms from the Islandora Models vocabulary. By applying a term from the Islandora Models vocabulary to a node, Islandora will become aware of how to handle the node in response to certain events, like choosing a viewer or generating derivatives.</p> <p></p> <p>Compared to Islandora Legacy</p> <p>Content models in Islandora Legacy were immutable and contained restrictions as to what types of datastreams could be associated with an object.  Islandora imposes no such restrictions. Content models can be changed at any time, and they in no way dictate what types of media can be associated with a node.</p>"},{"location":"user-documentation/content-models/#media","title":"Media","text":"<p>All resource nodes can be linked to any number of media.  The media associated with a resource node can be managed using the \"Media\" tab when viewing a node.  Much like the \"Members\" tab, Actions can be performed in bulk using the checkboxes and Actions dropdown.</p> <p></p> <p>See the media section for more details.</p>"},{"location":"user-documentation/content-models/#display-modes","title":"Display modes","text":"<p>Drupal uses \"display modes\" (also called \"view modes\") as alternative ways to present content to users. You may be familiar with the \"full\" and \"teaser\" versions of nodes, which are rendered using two corresponding display modes. Islandora makes use of display modes to control how media content is displayed. Islandora Starter Site provides two display modes for Media, one which renders the OpenSeadragon viewer and the other which renders the pdf.js viewer. These two display modes can be enabled by using \"Display hints\" in the node edit form, or you can configure Islandora to use a specific display mode for all media based on the file's Mime type. Both methods make use of Contexts.</p> <p>To set the display mode on the resource node's edit form, select the display mode you want to use for that node in the Display hints field:</p> <p></p> <p>Due to the associated Context configurations (\"OpenSeadragon\" and \"PDFjs Viewer\") that are shipped with the Islandora Starter Site, the selected display mode will then be used when the resource node's page is rendered.</p> <p>At a global level, there are a couple of ways to tell Drupal to use the PDFjs viewer to render the content of the media field whenever the media has a Mime type of <code>application/pdf</code>.</p> <p>The first way is to edit the \"PDFjs Viewer\" Context. By default, this Context tells Drupal to use the PDFjs viewer if the node has the term \"PDFjs\" (yes, that's a taxonomy term):</p> <p></p> <p>If you add the Condition \"Node has Media with Mime type\" and configure it to use <code>application/pdf</code> as the Mime type, like this:</p> <p></p> <p>Context will use whichever Condition applies (as long as you don't check \"Require all conditions\"). That is, if the \"PDFjs\" display hint option in the node edit form is checked, or if the node's media has a Mime type of <code>application/pdf</code>, the media content will be rendered using the PDFjs viewer.</p> <p>The second way to use the media's Mime type to render its content with the PDFjs viewer is to create a separate Context that will detect the media's Mime type and use the configured display mode automatically. To do this, create a new Context. Add a \"Node has Media with Mime type\" condition and specify the Mime type, and then add a \"Change View mode\" Reaction that selects the desired display mode:</p> <p></p> <p>Finally, save your Context. From that point on, whenever the media for a node has the configured Mime type, Drupal will render the media using the corresponding display mode.</p> <p>The node-level and global approaches are not exclusive to one another. One Context can override another depending on the order of execution. Contexts are applied in the order they are displayed on the Contexts page, which is editable through a drag-and-drop interface. Whichever Condition appears last in the list of Contexts between the node-level Condition (which in this case is the \"Node has term\" condition) the global Condition (which is \"Node has Media with Mime type\"), that one will override the other. An example of having the display mode specified in the node edit form intentionally override the display mode based on Mime type is to have media with the <code>image/jp2</code> mime-type configured to use the OpenSeadragon viewer, but to manually select the OpenSeadragon display mode for nodes with JPEG media (for example, a very large JPEG image of a map, where the OpenSeadragon's pan and zoom features would be useful).</p>"},{"location":"user-documentation/content-models/#members","title":"Members","text":"<p>Islandora has a notion of membership, which is used to create a parent/child relationship between nodes. Membership is denoted using another special field, \"Member Of\". This is used to create the link between members and their parent collection, pages and their book (\"paged content\"), or members of a compound object and the compound object itself.</p> <p>Any two nodes can be related in this way, though typically, the parent node has a content model of Collection or Paged Content (see their respective pages for more details). The \"Member Of\" field can hold multiple references, so it is possible for a single child to belong to multiple parents, but may also complicate the creation of breadcrumbs.</p> <p>Compared to Islandora Legacy</p> <p>In Islandora Legacy, there was a distinction between belonging to a collection and belonging to a compound object.  In Islandora, this distinction is not present. Since all nodes can have members , essentially every node has the potential to be a compound object or collection.</p> <p>Child v. Member</p> <p>Islandora uses the \"child\" and \"member\" descriptor for resource nodes that store a reference to another resource node in the \"Member Of\" field interchangeably. Administrators will more often see the \"member\" terminology more often while front-end users will usually see \"child\" terminology.</p> <p>For any node, its Children tab can be used to see all its members.  You can also perform Actions in bulk on members using the checkboxes and the Actions dropdown as well as clicking on the Reorder Children tab to adjust the order in which they display.</p> <p></p>"},{"location":"user-documentation/content-models/#more-information","title":"More information","text":"<p>The following pages expand on the concepts discussed above:</p> <ul> <li>Media</li> <li>Content Types: Metadata -- Create / Update a Content Type</li> </ul>"},{"location":"user-documentation/content-models/#copyright-and-usage","title":"Copyright and Usage","text":"<p>This document was originally developed by Alex Kent and has been adapted for general use by the Islandora community.</p> <p></p> <p>[^1] In the Islandora Starter Site, this is the <code>field_model</code> field, which is populated by taxonomy terms in the <code>islandora_models</code> taxonomy vocabulary provided by the <code>islandora_core_feature</code> submodule of <code>Islandora/islandora</code></p> <p>[^2] In the Islandora Starter Site, this is the <code>field_member_of</code> field.</p>"},{"location":"user-documentation/content-models/#islandora-legacy-objects-versus-islandora-resource-nodes","title":"Islandora Legacy Objects versus Islandora Resource Nodes","text":"<p>The conventional Islandora Legacy definition of an object is a file loaded in the repository with associated derivatives. In Islandora Legacy, objects (video files, audio files, PDFs, etc.) are loaded through the user interface, and Datastreams are generated automatically. These consist of access and display copies, the metadata, OCH/HOCR, technical metadata, and more. All of these Datastreams are directly connected to the object and accessed through the admin interface.</p> <p>In Islandora, the traditional Islandora Legacy objects (video files, audio files, etc. that were represented in different content models) are now Drupal nodes. Islandora object nodes are a special kind of Drupal node, distinct from nodes that exist for other content types such as a blog post, an article, a page (like the About page on a site), and others. These Islandora objects are still loaded through the interface and described with the data entry form, and derivatives are still generated. However, the Datastreams are no longer connected to the original object in the same immutable way. Each of these Datastreams can be manipulated through Drupal by non-developers. You can create a variety of ways to view this metadata and information related to the objects. Doing so requires knowledge of Drupal 8, but this essentially means that there are many ways to view the metadata and access the related objects in Islandora.</p> <p>In Islandora it is therefore helpful to think of objects as resource nodes. The term reflects the new nature of objects in Islandora. A resource node does not just refer to the individual object file, but encompasses multiple elements that all relate to each other, even if they are no longer directly connected like objects in Islandora Legacy.</p> <p>The typical elements of a resource node:</p> <ul> <li>A content type defining metadata fields defined for the node. A content type may include any number of custom fields defined to store descriptive metadata about the object represented by the node. To function as an Islandora resource node, a content type must define two further fields:<ul> <li>A field denoting the 'type' of thing represented by the node (image, book, newspaper, etc.). The value of this field is used by Islandora to control views, derivative processing, and other behavior.[^1]</li> <li>A field in which to record the node's membership in another node. If populated, this field creates a hierarchical relationship between parent (the node recorded in the field) and child (the node in which the parent is recorded). This may be left empty, but is required for building hierarchies for collections, subcollections, and members of collections, as well as objects (books, \"compound objects\", etc.) consisting of paged content.[^2]</li> </ul> </li> <li>Media files (the actual files of JPEGs, MP3s, .zip, etc.) that get loaded through the form</li> <li>Derivative files (thumbnails, web-friendly service files, technical metadata, and more)</li> </ul> <p>These resource nodes are what the librarian, student, archivist, technician, or general non-developer creates through the data entry form. It is possible to configure all elements of a resource node in Islandora through Drupal. This fact allows control over how one accesses the node and how nodes are displayed and discovered online by non-developers. It also allows a repository to take full advantage of all third-party Drupal modules, themes, and distributions available.</p>"},{"location":"user-documentation/content-types/","title":"Creating and updating content types","text":""},{"location":"user-documentation/content-types/#overview","title":"Overview","text":"<p>Since metadata in Islandora is stored as fields in Nodes, the standard Drupal Content Types system provides our 'ingest forms'. For more information about Content Types in general, please see Content Types in Drupal. If you are already familiar with Drupal Field UI, you\u2019re already well-equipped to create and modify your own ingest forms in Islandora.</p> <p>This page will address how to create and modify ingest forms by editing fields and form display settings on Content Types via the graphical user interface (GUI). This page will also cover editing the RDF mapping to accommodate changes to fields.</p> <p>Islandora forms are Drupal forms, and for help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation.</p>"},{"location":"user-documentation/content-types/#before-you-start","title":"Before you start","text":"<ul> <li>The following How-To assumes that you are using the (optional) Islandora Starter Site configuration. This configuration is deployed automatically if you build your Islandora site using the Ansible Playbook, ISLE with Docker-Compose, or are using the sandbox or a Virtual Machine Image</li> <li>This How-To assumes familiarity with Drupal terms such as Node, Content Type, and Media.</li> </ul>"},{"location":"user-documentation/content-types/#how-to-modify-a-content-type","title":"How to modify a Content Type","text":"<p>If you have deployed your Islandora with the Islandora Starter Site configuration, you will already have a Repository Item content type available, with pre-configured fields and repository behaviours.</p> <ol> <li>In the Admin menu, go to Structure &gt;&gt; Content Types and find the Repository Item content type.</li> <li>Select Manage Fields.</li> </ol> <p></p> <p>There are multiple tabs with different options to configure your Content Type:</p> <p></p> <ul> <li>Manage Fields: A list of the fields available in this form. This is where you can add new fields and make adjustments to existing fields, such as whether the field has access restrictions or is required.</li> <li>Manage form display: Set the order in which fields appear in a form, including nesting; set how the user will enter data into a field (i.e., text field, drop-down list, radio buttons, etc.); set fields to be hidden in the form.</li> <li>Manage display: Set how the data stored in the fields will be displayed on the Node. Custom display settings can be set for different \"view modes.\" For instance, a different view mode is applied for items using the OpenSeadragon viewer, which includes a field that displays the Media in OpenSeadragon instead of the standard Drupal image viewer.</li> </ul> <p>Changes not displaying?</p> <p>If you make changes under Manage display and don't see them reflected in your Node, double check that you have edited the right view mode</p> <ul> <li>Devel: This tab is generated by an optional module that is useful for development and troubleshooting; it can be ignored in this How-To. For more information, see Devel.</li> </ul>"},{"location":"user-documentation/content-types/#add-a-field","title":"Add a field","text":"<p>This example adds a new field where a user can indicate if the repository item needs to be reviewed:</p> <ol> <li>Click Add Field</li> <li>In some cases an existing field may be available to use instead of creating a new one. The dropdown box labeled Re-use an existing field has a list of available fields. For this example we will create a brand-new field. Since the example field is a \u201cyes/no\u201d decision (whether the item needs review or not), choose \"Boolean\" from the dropdown menu and give the Label field a name. See the list of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters for descriptions of the different types available by default. Additional modules, such as the controlled_access_terms module, can provide their own Field types to choose from as well.</li> <li>Click Save and continue.</li> <li>Next, configure how the field is stored in the Drupal database. For this field type you can select how many values will be allowed. The default settings, \"Limited\" in the dropdown box and \"1\" for the allowed number of values works for our example.</li> <li>Click Save field settings.</li> <li>Configure how the field is described (including its display label and the help text for when it appears on a form) and constraints on its use. In this screenshot, the field will be required for this Content Type, and will be set to \u201con\u201d by default. In the Default Value section, click the checkbox next to Needs Review to indicate all new repository items need review by default.</li> <li>Click Save settings.</li> </ol> <p></p> <p>The new field has been added:</p> <p></p> <p>It appears in the ingest form when creating a new repository object. To test this, go to Content &gt;&gt; Add content &gt;&gt; Repository item:</p> <p></p> <p>RDF Mappings</p> <p>New fields, except for Typed Relation fields, are not automatically indexed in Fedora and the triple-store. Update the    Content Type's RDF Mapping to enable indexing the field (see below).</p> <p>Search</p> <p>New fields will not automatically be searchable. They need to be added to the Solr index configuration. See the 'Setup and Configure Search' page for more information.</p> <p>Context</p> <p>To add new behavior based on the results of this new field, check out Context.</p>"},{"location":"user-documentation/content-types/#change-the-form-display","title":"Change the form display","text":"<p>To change where in the form a field is displayed, go to the Admin menu, return to Structure &gt;&gt; Content Types, and find the Repository Item content type again. Select Manage form display from the dropdown menu or select the Manage form display tab.</p> <ol> <li>All the fields in this content type are available, in a list, with a simple drag-and-place UI. Drag the new field to the top of the form. You can also change the way the Boolean options are displayed, with radio buttons as opposed to a single checkbox. Different display options will be available from the dropdown menu depending on field type. For more information, please check out List of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters</li> <li>Click Save.</li> </ol> <p>When creating a new Repository Item, the new field appears at the top, as a set of radio buttons.</p>"},{"location":"user-documentation/content-types/#change-the-content-display","title":"Change the content display","text":"<p>Finally, change how the results of this example field are displayed. Initially the new field shows up at the bottom of repository object pages:</p> <p></p> <p>In the Admin menu, return to Structure &gt;&gt; Content Types and find the Repository Item content type again. Select Manage display from the dropdown menu or select the Manage display tab.</p> <ol> <li>Find the new field. You can change how the field title or label is displayed.</li> <li>Click the dropdown menu to choose from inline/above/hidden/visually hidden.<ul> <li>You can also replace the options displayed with variations on a binary choice. Click the gear to choose from the following: On/Off, Yes/No, Enabled/Disabled, 1/0, checkmark/X, or hide the field completely.</li> <li>You can also drag the field into the Disabled section so that neither its label nor its contents appear in the display, although the field is saved on the Node.</li> </ul> </li> <li>Drag the field to \"Disabled\" and save.</li> <li>The contents of the field are no longer displayed on the Node, but it is available when editing the node.</li> </ol>"},{"location":"user-documentation/content-types/#create-a-content-type","title":"Create a Content Type","text":"<p>To create your own custom content type from scratch, please refer to this guide on Drupal.org.</p> <p>Your custom content types can contain whatever fields you like, but there are two mandatory fields that all Islandora content types should contain:</p> <ol> <li> <p>In order for a custom content type to be considered an Islandora Object, it needs to have the field \"Member of\" ('field_member_of'). This allows it to be included in contexts that have the \"Node is an Islandora node\" condition. Nodes that have this field will automatically be synced to Fedora and indexed by the triple store if you are using the context provided by the Islandora Starter Site. Having this field present in your content type also gives you tabs for adding children and media when viewing an item of that content type.</p> </li> <li> <p>The other mandatory field is \"Model\" ('field_model'). This is used in several of the contexts that the Islandora Starter Site provides. This field determines how Islandora objects are displayed, and how media derivatives are created.</p> </li> </ol>"},{"location":"user-documentation/content-types/#updating-and-creating-an-rdf-mapping","title":"Updating and creating an RDF Mapping","text":"<p>RDF mapping aligns Drupal fields with RDF ontology properties. For example, the title field of a content model can be mapped to <code>dcterms:title</code> and/or <code>schema:title</code>. In Islandora, triples expressed by these mappings get synced to Fedora and indexed in the Blazegraph triplestore. RDF mappings are defined/stored in Drupal as a YAML file (to learn more about YAML, there are several tutorials on the web. Currently, Drupal 8 does not have a UI to create/update RDF mappings to ontologies other than Schema.org. This requires repository managers to update the configuration files themselves. Consider using the RDF mappings included in the Islandora Starter Site as templates by copying and modifying one to meet your needs.</p> <p>The Drupal 8 Configuration Synchronization export (e.g. <code>http://localhost:8000/admin/config/development/configuration/single/export</code>) and import (e.g. <code>http://localhost:8000/admin/config/development/configuration/single/import</code>) can be used to get a copy of the mappings for editing in a text editor before being uploaded again. Alternatively, a repository manager can update the configuration on the server and use Features to import the edits.</p> <p>An RDF mapping configuration file has two main areas: the mapping's metadata and the mapping itself. Most of the mapping's metadata should be left alone unless you are creating a brand-new mapping for a new Content Type or Taxonomy Vocabulary. A partial example from islandora_default's islandora_object (Repository Item) is included below:</p> <pre><code>langcode: en\nstatus: true\ndependencies:\n  config:\n    - node.type.islandora_object\n  enforced:\n    module:\n      - islandora_demo\n  module:\n    - node\nid: node.islandora_object\ntargetEntityType: node\nbundle: islandora_object\ntypes:\n  - 'pcdm:Object'\nfieldMappings:\n  title:\n    properties:\n      - 'dc:title'\n  field_alternative_title:\n    properties:\n      - 'dc:alternative'\n  field_edtf_date:\n    properties:\n      - 'dc:date'\n    datatype_callback:\n      callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value'\n  field_description:\n    properties:\n      - 'dc:description'\n</code></pre> <p>The required mapping metadata fields when creating a brand-new mapping include the <code>id</code>, <code>status</code>, <code>targetEntityType</code>, and <code>bundle</code>. (<code>uuid</code> and <code>_core</code>, not seen in the example above but may be present in exported copies,  will be added by Drupal automatically.) <code>bundle</code> is the machine name for the Content Type or Taxonomy Vocabulary you are creating the mapping for. <code>targetEntityType</code> is <code>node</code> for Content Types or <code>taxonomy_term</code> for Taxonomy Vocabularies. The <code>id</code> configuration is a concatenation of target entity type and bundle ('node' and 'islandora_object' in the example above). The <code>id</code> is also used to name the configuration file: e.g. <code>rdf.mapping.node.islandora_object.yml</code> is <code>rdf.mapping.</code> plus the id (<code>node.islandora_object</code>) and then <code>.yml</code>.</p> <p>The mapping itself consists of the <code>types</code>' and <code>fieldMappings</code> configurations.</p> <p>All the mappings use RDF namespaces instead of fully-qualified URIs. For example, the type for islandora_object is entered in the RDF config as <code>pcdm:Object</code> instead of <code>http://pcdm.org/models#Object</code>. The available namespaces are defined in module hooks (hook_rdf_namespaces) but can also be entered manually in a configuration interface. Repository managers wanting to add additional namespaces need to go to Configuration &gt; Search and Metadata &gt; JSONLD and enter their desired namespaces in the \"Additional RDF Namespaces\" box.</p> <p>Namespaces currently supported (ordered by the module that supplies them) include:</p> <ul> <li>rdf<ul> <li>content: http://purl.org/rss/1.0/modules/content/</li> <li>dc: http://purl.org/dc/terms/</li> <li>foaf: http://xmlns.com/foaf/0.1/</li> <li>og: http://ogp.me/ns#</li> <li>rdfs: http://www.w3.org/2000/01/rdf-schema#</li> <li>schema: http://schema.org/</li> <li>sioc: http://rdfs.org/sioc/ns#</li> <li>sioct: http://rdfs.org/sioc/types#</li> <li>skos: http://www.w3.org/2004/02/skos/core#</li> <li>xsd: http://www.w3.org/2001/XMLSchema#</li> </ul> </li> <li>islandora<ul> <li>ldp: http://www.w3.org/ns/ldp#</li> <li>dc11: http://purl.org/dc/elements/1.1/</li> <li>nfo: http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.1/</li> <li>ebucore: http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#</li> <li>fedora: http://fedora.info/definitions/v4/repository#</li> <li>owl: http://www.w3.org/2002/07/owl#</li> <li>ore: http://www.openarchives.org/ore/terms/</li> <li>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#</li> <li>islandora: http://islandora.ca</li> <li>pcdm: http://pcdm.org/models#</li> <li>use: http://pcdm.org/use#</li> <li>iana: http://www.iana.org/assignments/relation/</li> </ul> </li> <li>islandora-starter-site<ul> <li>relators: http://id.loc.gov/vocabulary/relators/</li> </ul> </li> <li>controlled_access_terms<ul> <li>wgs84_pos: http://www.w3.org/2003/01/geo/wgs84_pos#</li> <li>org: https://www.w3.org/TR/vocab-org/#org:</li> <li>xs: http://www.w3.org/2001/XMLSchema#</li> </ul> </li> </ul> <p>The <code>types</code> corresponds to the <code>rdf:type</code> predicate (which corresponds to JSON-LD's <code>@type</code>) and can have multiple values. This type value will be applied to every node or taxonomy term using the mapped content type or vocabulary.</p> <p>In some cases a repository may want a node or taxonomy term's <code>rdf:type</code> to be configurable. For example, the Corporate Body Vocabulary (provided by the Controlled Access Terms Default Configuration module) has <code>schema:Organization</code> set as the default type in the RDF mapping. However, more granular types may apply to one organization and not another, such as <code>schema:GovernmentOrganization</code> or <code>schema:Corporation</code>. The <code>alter_jsonld_type</code> Context reaction allows Content Types and Taxonomy Vocabularies to add a field's values as <code>rdf:types</code> to its JSON-LD serialization (the format used to index a node or taxonomy term in Fedora and the triple-store).</p> <p><code>fieldMappings</code> specifies the fields to be included, their RDF property mappings, and any necessary data converters (the <code>datatype_callback</code>). One field can be mapped to more than one RDF property by adding them to the field's properties list. The <code>datatype_callback</code> is defined by the 'callable' key and the fully qualified static method used to convert it to the desired data format. For example, fields of the Drupal datetime type need to be converted to ISO 8601 values, so we use the <code>Drupal\\rdf\\CommonDataConverter::dateIso8601Value</code> function to perform the conversion.</p> <p>Islandora Quick Lessons</p> <p>Learn more with this video on Customizing a Form.</p>"},{"location":"user-documentation/context/","title":"Context","text":""},{"location":"user-documentation/context/#context-in-islandora","title":"Context in Islandora","text":"<p>Context is a Drupal contrib module that allows configuration of \"if this, then that\" logic using an administrative user interface. Context defines \"conditions\" and \"reactions\" to enact the \"if this [condition], then that [reaction]\" logic. Some Islandora Legacy repositories use the community-contributed Islandora Context module to apply this sort of logic to Islandora objects. An example Context from Islandora Legacy is</p> <p>If an object's namespace is 'customnamespace', render the block containing the right's statement \"Please contact Special Collections before reusing this item\".</p> <p>The Context project page on drupal.org says \"You can think of each context as representing a 'section' of your site\", but that doesn't tell the whole story, since it gives the impression that Context is all about defining subsites. Context in Drupal 8 (and above) is much more powerful than in Drupal 7 due to how it interacts with the rest of Drupal (specifically, through Drupal 8's new plugin API). Because of this increased flexibility and power, and because Context provides a ready-made user interface for site administrators to combine conditions and reactions, Islandora uses Context to drive the logic underlying many important aspects of Islandora, including which derivatives get generated and how objects are displayed. In Islandora Legacy, many of these things are managed (and often hard-coded) within solution packs and utility modules.</p>"},{"location":"user-documentation/context/#an-example","title":"An example","text":"<p>Let's look at the example of how Context can determine how an object is displayed. Drupal 8 has the idea of \"view modes\", which allow site builders to choose what happens when an object is viewed by the user (it has nothing to do with Drupal Views). In the node edit form for Islandora objects, there is a checkbox that, if checked, tells Drupal to render the image using the OpenSeadragon viewer:</p> <p></p> <p>This  functionality is accomplished via the \"OpenSeadragon\" Context, which, as its configuration suggests, checks as its condition whether the node as the \"OpenSeadragon\" tag and if so, reacts by using the view mode \"OpenSeadragon\":</p> <p></p>"},{"location":"user-documentation/context/#context-and-actions","title":"Context and actions","text":"<p>Context in Drupal 8 uses Drupal Actions to execute the \"then that\" part of their logic. An implication of this is some configuration options relevant to the outcome of the \"then that\" reaction are configured in the Action admin interface (located at <code>admin/config/system/actions</code>), not within the Context admin interface (located at <code>admin/structure/context</code>). While this makes for a clunky admin experience, the advantage is that it allows the reuse of a single piece of Drupal code in multiple Contexts.</p> <p>One important group of functionality in Islandora repositories that admins might want to control is what types of media get persisted to Fedora. Islandora allows administrators to choose what types of media get persisted to Fedora and what types of media get persisted to the Drupal public file system. For example, you may want to persist your thumbnails to Fedora along with your \"Preservation Master\" and \"Original File\" files. This can be accomplished using Context.</p> <p>By default, Islandora stores thumbnails in Drupal's public file system, not in Fedora. Thumbnails are automatically generated by a Context (the \"Image Service File\" Context to be specific), but if you want to change the file system where your thumbnails are stored to the Fedora file system, you need to change that setting in the \"Image - Generate a thumbnail from a service file\" Action, not in the Context that uses that action:</p> <p></p> <p>This configuration should be done as part of your initial Islandora setup, since there is currently no way to move thumbnails that were persisted to Drupal's public file system to Fedora, or vice versa. But, at least site admins can choose one or the other using this Action.</p> <p>You can create custom Actions and then use them in Contexts. For example, if you want to present a message to the user every time they upload a media tagged as \"Preservation Master File\", create an Action of type \"Display a message to the user\" and enter your message:</p> <p></p> <p>Then, create a Context that uses this Action as its Reaction, and as its Condition, uses \"Media has term\" with a value of \"Preservation Master File\":</p> <p></p> <p>Now, when a user creates a Media and tags it as a \"Preservation Master File\", they will be shown the message you created in your Action:</p> <p></p>"},{"location":"user-documentation/context/#tips-on-using-islandora-specific-contexts","title":"Tips on using Islandora-specific contexts","text":"<p>Islandora provides some Conditions and Reactions that aren't available on other Drupal sites. When using them, you may find the following tips useful:</p> <ul> <li>When using the \"Node has term with URI\", \"Media has term with URI\", and \"Parent node for media has term with URI\" Islandora-specific Conditions, you may want to enter multiple terms to take advantage of the AND/OR logic they provide. To do so, add a comma (<code>,</code>) after the first term in the autocomplete field and continue typing.</li> <li>These three Conditions limit taxonomy terms that show up in their autocomplete Term field to terms that have URIs associated with them, for example from the Islandora Media Use or Islandora Models vocabularies (although any term that has a URI will appear). If you want to configure Conditions using terms that do not have a URI, you can use the contrib Term Condition module.</li> <li>Be as specific as possible in configuring your Conditions. If your Conditions seem to apply too broadly or in unexpected ways, try adding a \"Content Entity Type\" Condition to limit the Context to pages that render Islandora objects or media.</li> </ul>"},{"location":"user-documentation/context/#increased-flexibility","title":"Increased flexibility","text":"<p>Most Islandora repository administrators will not need to alter or configure any Contexts. But since much of Islandora's underlying functionality is governed by this powerful Drupal contrib module, administrators should become comfortable using it, and Actions, to customize and refine their repositories. Also, since Islandora objects are ordinary Drupal nodes, Islandora objects can take advantage of standard Drupal 8 Context functionality out of the box.</p>"},{"location":"user-documentation/extending/","title":"Extending Islandora: The Islandora Cookbook","text":"<p>Because newer Islandora is very tightly integrated with Drupal, many use cases that required custom Islandora modules in Islandora Legacy and earlier can now be solved with a combination of configuration and modules from the Drupal community. Other use cases may still require custom code, but are not common enough, or complete enough, for that custom code to be a part of the core software.</p> <p>Both scenarios are covered by the Islandora Cookbook below, which contains an annotated list of custom Islandora tools and modules developed by our community, a list of Drupal contributed modules that may be useful in an Islandora context, and a set of recipes which each provide a detailed outline for solving a particular use case.</p> <p>Islandora is also compatible with most Drupal themes.</p>"},{"location":"user-documentation/extending/#introduction","title":"Introduction","text":"<p>In the spirit of Islandora Awesome, Islandora Cookbook is a curated list of great modules and other tools for Islandora. Because Islandora is more tightly integrated with Drupal, most of these 'recipes' require only Drupal modules as ingredients.</p> <p>We offer this list for discovery, but do not officially provide support for any of these modules.</p>"},{"location":"user-documentation/extending/#recipes","title":"Recipes","text":"<ul> <li>Amazon Alexa - This recipe explains how to access Islandora with Amazon Alexa.</li> <li>Collection Searching - This recipe provides instructions how to configure a shallow or deep search in a specific collection.</li> <li>Date Range Slider Facet - This recipe explains how to include a facet for date field(s) that presents itself as a range slider.</li> <li>Exhibitions and TimeLine JS - This recipe outlines how to build exhibits in Islandora, including the deployment of TimeLineJS.</li> <li>Digital Preservation - A detailed overview of how to approach digital preservation in Islandora. Includes features that are currently available, both within Islandora and by using compatible tools.</li> </ul>"},{"location":"user-documentation/extending/#ingredients","title":"Ingredients","text":"<p>Below are modules and tools that might be useful to solve common use cases, presented without specific recipes.</p>"},{"location":"user-documentation/extending/#islandora-contributed-modules","title":"Islandora contributed modules","text":"<p>Warning! - All modules are under development.</p> <ul> <li>Basic Ingest - Basic repository item ingest improvements.</li> <li>Islandora RipRap - Fixity auditing</li> <li>Islandora Repository Reports - Graphical reports on various aspects of an Islandora repository.</li> <li>Islandora Bagger - Utility to generate Bags for objects using Islandora's REST interface using either a command-line tool or via a batch-oriented queue.</li> <li>Islandora Citations - An alternative to Citation Select (bundled with Starter Site). It uses CSL to render citations, allows you to set a default (which is rendered on page load), and lets you set the field mappings as a third party setting when editing each field itself. It works with Typed Relation fields (using the relation to set the CSL parameter such as author, editor, or contributor), and also works with Paragraphs.</li> <li>Islandora RDM - An entire suite of tools and documentation to turn Islandora into a fully functional Research Data Management platform.</li> <li>Islandora Whole Object - Islandora module that provides some Drupal blocks containing various representations of an Islandora object.</li> <li>IP Range Access - A context condition to check the user's IP address against a range, and provide 403 if not accepted.</li> <li>Typed Relation with Display Name - A field type that's a Typed Relation field plus a display name that is unique to the instantiation. Allows you to transcribe what's on the object, while still linking to a controlled form of a name.</li> <li>Linked Data Lookup Field - allows you to autocomplete from external authorities. It creates a two-part field and stores the label and the URI. It is extensible and can be made to work with more APIs. Currently it supports Library of Congress Subject Headings, Global Research Identifier Database (GRID) entries, and Australian and New Zealand Standard Research Classification Fields of Research.</li> </ul>"},{"location":"user-documentation/extending/#access-control","title":"Access Control","text":""},{"location":"user-documentation/extending/#access-control-by-taxonomy-tags","title":"Access control by taxonomy tags","text":"<p>Permissions by Term</p> <p>By default, Drupal allows you only to restrict access to Drupal nodes by coupling node content types to user roles. The Permissions by Term module extends Drupal by functionality for restricting view and edit access to single nodes via taxonomy terms. Since Islandora objects can have taxonomy terms, this can be used to control access at the node and collection level. The submodule Permissions by Entity extends this control to the media level.</p>"},{"location":"user-documentation/extending/#setting-a-date-and-time-for-publication","title":"Setting a date and time for publication","text":"<p>Moderation Scheduler</p> <p>Moderation Scheduler gives content editors the ability to schedule Islandora nodes to be published at specified dates and times in the future. Can be combined with Views Bulk Edit to set the same scheduled publication date/time on multiple nodes at once.</p>"},{"location":"user-documentation/extending/#tombstoning","title":"Tombstoning","text":"<p>Tombstones</p> <p>A module that informs users who attempt to view deleted content that the resource has been removed instead of showing a generic 404 page. Fielded so that the date, reason, and alternative links can be given, along with a citation for the deleted object.</p>"},{"location":"user-documentation/extending/#displays","title":"Displays","text":""},{"location":"user-documentation/extending/#image-slideshow","title":"Image slideshow","text":"<p>Views Slideshow</p> <p>Views Slideshow can be used to create a slideshow of any content (not just images) that can appear in a View. Powered by jQuery, it is heavily customizable: you may choose slideshow settings for each View you create. It can be used to create an easy, adjustable slideshow of images from an Islandora repository.</p>"},{"location":"user-documentation/extending/#csv-file-formatter","title":"CSV File Formatter","text":"<p>CSV File Formatter</p> <p>This module provides a formatter that displays CSV files in the browser.</p>"},{"location":"user-documentation/extending/#timelines","title":"Timelines","text":"<p>TimelineJS</p> <p>Integration with TimelineJS to create timeline displays.</p>"},{"location":"user-documentation/extending/#sort-titles-without-initial-articles-the-a-etc","title":"Sort titles without initial articles (The, A, etc)","text":"<p>Views Natural Sort</p> <p>This module adds a new sort option to Content views that sorts while skipping a configurable list of initial articles like \"The\", \"A\", \"An\", \"L'\", etc. Note that it works only with Content views and not with Search API (solr) views.</p>"},{"location":"user-documentation/extending/#ingest","title":"Ingest","text":""},{"location":"user-documentation/extending/#batch-uploading-via-csv","title":"Batch uploading via CSV","text":"<p>Migrate Islandora CSV</p> <p>This repository is a tutorial that will introduce you to using the Drupal 8 Migrate tools to create Islandora content. Whether you will eventually use CSVs or other sources (such as XML or directly from a 7.x Islandora) this tutorial should be useful as it covers the basics and mechanics of migration.</p> <p>This repository is also a Drupal Feature that, when enabled as a module, will create three example migrations ready for you to use with the Migrate API.</p>"},{"location":"user-documentation/extending/#alternative-way-to-batch-upload-via-csv","title":"Alternative way to batch upload via CSV","text":"<p>Islandora Workbench</p> <p>Command-line tool for ingesting (and updating) nodes and media from anywhere - you don't need to access to the Drupal server's command line. Provides robust data validation, flexible organization of your input data (can use CSV, Google Sheets, or Excel files) plus creation of taxonomy terms on the fly.</p>"},{"location":"user-documentation/extending/#content-management","title":"Content Management","text":""},{"location":"user-documentation/extending/#batch-editing","title":"Batch editing","text":"<p>Views Bulk Edit</p> <p>A powerful tool that turns Views into a means of batch editing nodes, including Islandora repository objects. Once installed, create a view, add the fields that you would like to edit, add a <code>Views bulk operations (Edit)</code> field to the view, and select which actions you would like to have available. The <code>Modify field values</code> action will allow you to batch edit the value for the same field across multiple objects. A demonstration of a simple bulk-editing view with a few fields and actions can be found here</p>"},{"location":"user-documentation/extending/#clone-a-content-type","title":"Clone a content type","text":"<p>Content Type Clone</p> <p>A tool that allows you to clone an existing content type. Can be used to copy and easily make your own version of the Repository Item Content Type with fewer or edited fields, without starting over. Has options to also copy all nodes from the old type to the new, and to delete from the old type when copying.</p>"},{"location":"user-documentation/extending/#prevent-orphaned-entity-relationships","title":"Prevent orphaned entity relationships","text":"<ul> <li>Entity Reference Integrity</li> <li>Entity Reference Integrity Extras</li> <li>Entity Reference Purger</li> </ul> <p>Normally when deleting content (nodes, taxonomy terms, etc), any content that references the deleted entity isn't altered so you end up with orphan/zombie references, which are visible in the JSON representation but invisible otherwise. With Entity Reference Integrity's submodule (<code>entity_reference_integrity_enforce</code>), you won't be able to delete content that's referenced from elsewhere, preserving your database integrity.</p> <p>Because the Drupal module doesn't play with Typed Relation fields, DGI's <code>entity_reference_integrity_extras</code> module is useful. </p> <p>Alternatively, Entity Reference Purger takes care of deleting the references on entity delete. Warning: it is unknown whether Entity Reference Purger respects whether the user has permission to edit the referencing entity/field. There are open issues that it does not work well with Workflow (see Content Mangagement Workflows below) or translation. The module is not covered by the security badge.</p>"},{"location":"user-documentation/extending/#content-management-workflows","title":"Content Management Workflows","text":"<p>Content moderation</p> <p>This module lets you set up workflows that \"transition\" content between \"states\", which may be published or unpublished. It also allows you to set revisions as mandatory (normally an editor can decide to make an edit without creating a revision, making it very hard to track for auditing).</p>"},{"location":"user-documentation/extending/#shared-content-between-sites","title":"Shared content between sites","text":"<p>Entity Share</p> <p>Share entities between different Drupal instances. Works with nodes, taxonomy terms, media, etc.</p>"},{"location":"user-documentation/extending/#external-content","title":"External content","text":"<p>External Entities</p> <p>Lets you use sources of content external to Drupal as though they were internal.</p>"},{"location":"user-documentation/extending/#paragraphs-for-structuredhierarchical-content","title":"Paragraphs for structured/hierarchical content","text":"<p>Paragraphs</p> <p>Paragraphs is based on Entity Reference Revisions and allows you to create an on-the-fly entity with structured fields. Paragraphs could be used for complex titles with title type, subtitle, part name, etc. They can be used for grouping fields together that are, as a block, repeatable. </p>"},{"location":"user-documentation/extending/#richer-content","title":"Richer Content","text":""},{"location":"user-documentation/extending/#displaying-equations-and-formulae","title":"Displaying equations and formulae","text":"<p>MathJax</p> <p>This module is a plug-and-play solution for rendering LaTeX. It uses a CDN so no library has to be installed on your system, and the processing is done in the user's browser. In terms of Drupal, it provides a text filter that must be enabled in at least one text format (such as Full HTML). With this you can enter mathematical formulae in abstracts! Need to recognize unfamiliar symbols? Try this LaTeX symbol reference thanks to the On-Line Encyclopedia of Integer Sequences.</p>"},{"location":"user-documentation/extending/#search","title":"Search","text":""},{"location":"user-documentation/extending/#custom-search-weighting","title":"Custom search weighting","text":"<p>Search Overrides</p> <p>This module provides a method for users with the necessary permissions to manually override the results being returned by Search API Solr. They will be able to choose a specific search term, and pick which nodes should be at the top, and also choose to exclude nodes so they will not be shown in the results. Currently, only nodes are supported.</p>"},{"location":"user-documentation/extending/#render-field-as-link-to-faceted-search","title":"Render field as link to faceted search","text":"<p>Entity Reference Facet Link</p> <p>Provides a field formatter that points an entity reference field to a facet search for that value. Could be used in search result displays with taxonomy terms (for example) to stay within the \"search ecosystem\". Does not work with Typed Relation fields.</p>"},{"location":"user-documentation/extending/#auditing","title":"Auditing","text":""},{"location":"user-documentation/extending/#logging-administrative-events","title":"Logging administrative \"events\"","text":"<p>Events Logging</p> <p>This module provides a separate log to record \"events\" such as the creation, editing, and deletion of content (actually any entities you configure it to, including config entities). This can provide a log of who did what, when. The log is not mixed in with the \"Watchdog\"/\"Recent log entries\" log, but still uses the database (unless you have another log method enabled). </p> <p>When content is updated, the log only says that it was updated but does not say how or provide a diff. It does not seem to have the ability to link log messages to the revisions that may have been created during edits. </p>"},{"location":"user-documentation/extending/#other","title":"Other","text":""},{"location":"user-documentation/extending/#gather-user-feedback","title":"Gather user feedback","text":"<p>Content Feedback</p> <p>The Content Feedback module allows users and visitors to quickly send feedback messages about the currently displayed content, and can be applied to Islandora nodes. All content feedback messages are listed and grouped by status in an administrative feedback list.</p>"},{"location":"user-documentation/extending/#sending-your-content-to-archiveorg","title":"Sending your content to Archive.org","text":"<p>Wayback Submit to Archive.org</p> <p>A tool for automatically submitting the contents of your site to Archive.org. The Wayback Submit module will submit all node types on schedule, according to criteria set by the site admin (only certain node types, only certain views, etc).</p>"},{"location":"user-documentation/extending/#adding-anti-bot-protection-to-your-site","title":"Adding anti-bot protection to your site","text":"<p>Turnstile</p> <p>Turnstile provides an alternative to Captchas for filtering out bot traffic.</p> <p>For sites using ISLE Docker, a traefik plugin -- captcha-protect -- can be added to your drupal service. The plugin supports adding turnstile, recaptcha, or hcaptcha to your site to filter out bad bot traffic.</p> <p>If you're not using Docker/traefik, Turnstile can be added for anti-bot protection via a Drupal module drupal/turnstile_protect</p>"},{"location":"user-documentation/extending/#other-resources","title":"Other resources","text":"<ul> <li>Drupal Contributed Modules</li> <li>Drupal Contributed Themes</li> </ul>"},{"location":"user-documentation/faceting/","title":"Faceting in Islandora","text":""},{"location":"user-documentation/faceting/#overview","title":"Overview","text":"<p>This tutorial contains are step-by-step instructions for adding a facet on a vocabulary reference field. After a search, a block containing the configured facets appears letting the user filter their search.</p> <p>This is a walk-through. For a more in-depth discussion of creating facets, see Configure Advanced Search</p> <p>This tutorial currently works best with the \"standard\" install of the Islandora and Islandora Default modules which can be obtained from the playbook (as opposed to the install profile, which handles facet blocks differently).</p>"},{"location":"user-documentation/faceting/#step-1-add-vocabulary-bundles","title":"Step 1: Add vocabulary bundles","text":"<p>Steps 1 and 2 add the field to the Solr index.</p> <ol> <li>Go to Admin  &gt;&gt; Configuration &gt;&gt; Search and Metadata &gt;&gt; Search API (or, /admin/config/search/search-api)</li> <li>Edit the Default Solr content index</li> <li>Open the Configure the Taxonomy term datasource field-set, choose the vocabulary bundles you want to add to be indexed</li> <li>Click Save</li> </ol> <p></p>"},{"location":"user-documentation/faceting/#step-2-add-fields","title":"Step 2: Add fields","text":"<ol> <li>Back at the edit Default Solr content index, choose Fields from the tabs across the top</li> <li>Click on the Add fields button</li> <li>Scroll down to Content</li> <li>Click on the + next to the field you want to add.</li> <li>Click on the + next to \"Taxonomy term\". A bunch of subfields will appear.</li> <li>Look for the field that contains \"YOUR_FIELD:entity:name\" and click on the \"Add\" button at the end of the bulleted point.</li> <li>Click \u201cDone.\u201d</li> <li>IMPORTANT: Find your newly added fields In the list, and ensure the \"Type\" of the new field is \"string\" so it can be compatible with Facets.</li> <li>If the \"Machine name\" of the new field is generic, like \"name_1\", change it to be the same as the part of the \"Property path\" up to the first : (this will be the same as the field's machine name).</li> <li>Click on the Save changes button.</li> </ol>"},{"location":"user-documentation/faceting/#step-3-rebuild-solr-index","title":"Step 3: Rebuild Solr index","text":"<p>Now that you've added the field, you need to rebuild your Solr index.</p> <ol> <li>Go back to Default Solr content index (admin/config/search/search-api/index/default_solr_index)</li> <li>Click on the Index now button.</li> </ol>"},{"location":"user-documentation/faceting/#step-4-add-and-configure-facet","title":"Step 4: Add and configure facet","text":"<p>Step 4 adds and configures the facet itself.</p> <ol> <li>Go to Admin  &gt;&gt; Configuration &gt;&gt; Search and Metadata &gt;&gt; Facets** (admin/config/search/facets)</li> <li>Click on the Add facet button</li> <li>Select the View Solr search content source</li> <li>In the Field list, select the field you added above</li> <li>You can adjust the admin Name of the facet</li> <li>Click **Save\".</li> <li>Choose your configuration options (for example, \"List item label\")</li> <li>Click Save.</li> </ol>"},{"location":"user-documentation/faceting/#step-5-add-facet-as-a-block","title":"Step 5: Add facet as a block","text":"<p>This step adds the facets in a single block.</p> <ol> <li>To place a Facets block for the facets you have created, go to Admin &gt;&gt; Structure &gt;&gt; Blocks layout (admin/structure/block).</li> <li>Click Place block in the desired block region, for example, Sidebar second.</li> <li>Start typing the facets block in the Filter and click Place block</li> <li>Choose the facets to include</li> <li>Choose other configuration options for the block, for example change the title that displays and restrict by content type, etc.</li> <li>Click Save.</li> </ol> <p>At this point, searching for content that has facet values should cause the block to appear. For more in-depth overview of search, see Configure Advanced Search</p> <p>Facets aren't necessarily searchable</p> <p>While this will create facets, the values that appear won't work (won't necessarily bring back any content) if you type them in the search box. This is because the fulltext search box uses only fulltext fields, and facets, as mentioned above, requires string fields.</p> <p>If you want to be able to search for taxonomy term values and bring up the related nodes, you could either include the full rendered item for your content type, or you may wish to repeat step 2 for each entity reference field, and set the new fields to fulltext so that searching for term values brings back node results.</p>"},{"location":"user-documentation/file-viewers/","title":"File Viewers","text":""},{"location":"user-documentation/file-viewers/#what-are-viewers","title":"What are viewers?","text":"<p>Viewers allow site builders to display files in interactive JavaScript-based widgets, that provide functionality like zooming in/out, turning pages, playing/pausing, viewing in full screen, etc.</p> <p>In Drupal, a common way to implement a viewer is through a module that provides a Drupal field formatter that interfaces with the appropriate JavaScript library. The field formatter will work with specific types of Drupal fields (e.g. file fields or image fields, some may even provide their own fields). Some viewer modules in Islandora also provide a block, that can display appropriate files based on the context.</p> <p>Viewers that are known to work with Islandora include:</p> <ul> <li>OpenSeadragon, via the Drupal module OpenSeadragon (maintained by the Islandora community).</li> <li>Mirador, via the Drupal module Islandora Mirador (maintained by the Islandora community).</li> <li>pdf.js, via the Drupal contrib module PDF</li> <li>Islandora Image, via the Islandora module</li> <li>Audio with captions, via the Islandora module</li> <li>Video with captions, via the Islandora module</li> </ul>"},{"location":"user-documentation/file-viewers/#configuring-field-formatters-as-viewers","title":"Configuring Field Formatters as Viewers","text":"<p>The simplest Drupal-y way of making a viewer appear is to configure a Media to render. You can do this by configuring a View Mode that shows the desired file field, displayed in a field formatter that invokes the desired viewer.</p> <p>In the Starter Site:</p> <ol> <li>On all Media Types, there is a \"Source\" view mode which is configured to show only the main (\"source\") file of that Media in a reasonable default viewer.</li> <li>By default, on a node's page, a Block is configured to appear that shows an attached \"Service File\" Media, or an \"Original File\" if no Service File is present. This block displays the media in the \"Source\" view mode, i.e. in its default viewer. This block placement is done using a Context. The block itself is a rendering of a View.</li> <li>On a node-by-node-basis, you can override the viewer used by setting the \"Viewer Override\" field to a different viewer (such as PDF.js). This will cause a different Context to be activated instead, which will render the Service File or Original File media in a different view mode, where a different viewer is used.</li> </ol> <p>Note</p> <p>Formerly, this field was called \"Display Hints\". That field name has been retired in order to reduce confusion, since this uses a different mechanism. This mechanism no longer relies on Node View Modes, or EVA views. However, the basic EVA view still persists in the starter site as it is part of the Islandora Core Feature. Again, it will first look for a Service File, then fall back to the Original File.</p>"},{"location":"user-documentation/file-viewers/#changing-a-viewer-for-all-media-of-a-media-type","title":"Changing a Viewer for all media of a media type","text":"<p>With the above configuration:</p> <ul> <li>Navigate to the \"Manage Display\" page for that media type</li> <li>Select the \"Source\" view mode (the secondary tabs along the top)</li> <li>Make sure that only the appropriate fields are being rendered</li> <li>For the \"main\" file field (it's named different things in different media types: <code>field_media_file</code>, <code>field_media_image</code>... as appropriate), select a different field formatter and configure it how you like it. </li> </ul>"},{"location":"user-documentation/file-viewers/#configuring-an-optional-viewer","title":"Configuring an \"optional\" viewer","text":"<p>Suppose you have a new viewer available, for example, for zip files. You could either:</p> <ul> <li>create a new media type specially for zip files, and configure this viewer in the \"Source\" view mode, or,</li> <li>configure an alternative viewer for the File media type.</li> </ul> <p>Either would work! The choice is yours to make. They're honestly both good.</p> <p>Should you choose the latter:</p> <ul> <li>create a new Display mode for media at Structure &gt; Display Modes &gt; View modes. Make sure you select a \"Media\" view mode.</li> <li>Configure the relevant (File) Media Type to display your file in your viewer.  In the File media type, go to Manage Display, and on the Default tab, enable this view mode for \"Custom Display Settings\" (it's all the way at the bottom). A tab for new display mode should have appeared. Go there and set up your field so that only the file field displays, and it displays using your viewer.</li> <li>in the \"Media Display\" view, create a new Block (or pair of Blocks) that (just for this Block) render the Media in your new view mode. If desired, create a pair with one selecting a Service File and one selecting a Original File, and use \"No results behaviour\" to place a fallback.</li> <li>in the Islandora Display taxonomy, add a new term, with an external URI.</li> <li>create a Context that finds Islandora Nodes that have a term with that URI.  In that context, place the block you created in the Media Display view. </li> <li>Finally, edit the Default Media display Context to not be in effect if the node has a term with the URI that you set.</li> </ul>"},{"location":"user-documentation/file-viewers/#configuring-viewers-that-use-blocks","title":"Configuring Viewers that use Blocks","text":"<p>Both OpenSeadragon and Mirador provide blocks that act as multi-page viewers. To configure one of these viewers:</p> <ul> <li>Place the block on relevant pages. Usually this is a node page. In the Starter Site this is done by a Context (\"Openseadragon Block - Multipaged items\"). Other methods of placing blocks include the standard Block interface, and Layout Builder.</li> <li>While placing the block, it will ask you to configure the \"IIIF manifest URL\". In the Starter Site, we have a IIIF Manifest view configured to create a manifest based on the \"original file\" media attached to the pages (children) of a given node. In the view, it is configured with path <code>node/%node/book-manifest-original</code>; in the block, we enter this as node/[node:nid]/book-manifest-original. When the block is rendered on a node page, such as <code>node/18</code>, then the nid (18) will be passed into the view.</li> <li>If placing a block using Contexts, make sure that \"Include blocks from block layout\" is selected. (If you find yourself missing normal page elements, this may be why). </li> </ul>"},{"location":"user-documentation/flysystem/","title":"Flysystem","text":"<p>Islandora uses Flysystem and the associated Drupal module to persist binary files to Fedora instead of keeping a copy in both Drupal and Fedora.</p>"},{"location":"user-documentation/flysystem/#background","title":"Background","text":"<p>\"Flysystem is a filesystem abstraction library for PHP\" which allows applications to read from and write to a variety of data source beyond the local file system, such as an SFTP server, Amazon S3, and Zip files provided an Adapter is available to support it. Flysystem Adapters extend a single class implementing <code>League\\Flysystem\\FilesystemInterface</code> although some separate adapter traits for common actions and properties, such as the StreamedCopyTrait, are available.</p> <p>The Drupal Flysystem module extends Flysystem to work within the Drupal filesystem structure. Drupal flysystem plugins include a Flysystem adapter (if not provided by default or in another library) and a class implementing <code>Drupal\\flysystem\\Plugin\\FlysystemPluginInterface</code> which instantiates the Flysystem adapter based on the Drupal site's configuration.</p> <p>The Drupal Flysystem module uses flysystem stream wrappers to define filesystem descriptors which are configured in the site's <code>settings.php</code> file. The configurations including the filesystem prefix, adapter (driver), and any adapter-specific configurations such as API endpoints and authorization information.</p>"},{"location":"user-documentation/flysystem/#islandoras-implementation","title":"Islandora's Implementation","text":""},{"location":"user-documentation/flysystem/#the-plugin-and-adapter","title":"The Plugin and Adapter","text":"<p>Islandora implements a Flysystem adapter and a Drupal Flysystem plugin. The Flysystem adapter acts as an intermediary between the Flysystem filesystem API and Fedora, translating requests and responses between them. The adapter interacts with Fedora using an instance of the Chullo Fedora API it receives from the Drupal Flysystem plugin. The Drupal Flysystem plugin's main responsibility is to instantiate the Chullo Fedora API object with the proper authentication and pass it to the Flysystem adapter. To authenticate with Fedora the plugin adds a handler to the Chullo's Guzzle client which adds a JWT authentication header to each request. </p> <p>The Fedora Flysystem adapter does not use Gemini to map the relationship between Drupal URIs and Fedora URIs, so they are indexed separately using the \"files_in_fedora\" Context which triggers the \"Index Fedora File in Gemini\" and \"Delete Fedora File in Gemini\" actions as appropriate.</p>"},{"location":"user-documentation/flysystem/#configuration","title":"Configuration","text":"<p>The fedora file system is configured in the site's <code>settings.php</code> file. An example configuration can be seen in the islandora-playbook web server role's drupal tasks: <pre><code>$settings['flysystem'] = [\n  'fedora' =&gt; [\n    'driver' =&gt; 'fedora',\n    'config' =&gt; [\n      'root' =&gt; 'http://localhost:8080/fcrepo/rest/',\n    ],\n  ],\n];\n</code></pre> The configuration array's top-level key is the name of the Drupal stream wrapper, which also serves as the filesystem prefix. Any Drupal file path using \"fedora://\" will use this Flysystem adapter. Drupal will translate this prefix to the site's domain plus \"_flystem/fedora/\". For example, using the default configuration provided by the islandora-playbook, a file stored at \"fedora://test.tif\" will persist to Fedora with the URI <code>http://localhost:8080/fcrepo/rest/test.tif</code> and will be accessible from the Drupal URL <code>http://localhost:8000/_flysystem/fedora/test.tif</code>. The <code>driver</code> value <code>fedora</code> corresponds to the plugin's machine name. The <code>config</code> section contains all the adapter-specific configurations. In this case, the only thing configured for the site is the Fedora REST end-point. (Change this value to match your own Fedora's location, if needed.) The JWT is configured separately.</p> <p>Other examples of Drupal Flysystem configurations can be seen in the module's README.</p> <p>Islandora is configured to have all Media use the Fedora file system by default in the islandora_core_feature. For example, the field storage uri_scheme setting for field_media_image (and the other media types) is \"fedora\". This can also be viewed in the UI on the field's \"Field settings\" page; e.g. <code>http://localhost:8000/admin/structure/media/manage/image/fields/media.image.field_media_image/storage</code>, look for \"Upload destination\" and see that \"Flysystem: fedora\" is selected.</p> <p>However, there are methods for saving files that can explicitly set a different filesystem than the default. Migrations can explicitly set which file system a file is saved to and Islandora can emit events that also specify which file system a derivative should be saved to.</p>"},{"location":"user-documentation/flysystem/#derivatives","title":"Derivatives","text":"<p>As hinted in the previous section, Islandora, by default saves derivatives to the Drupal public file system.</p> <p>For example, if I upload a TIFF to a repository item as a File Media with the term \"Original File\", the \"Image Original File\" (image_original_file) Context is triggered. This fires the 'image_generate_a_service_file_from_an_original_file' action which emits an event using the 'public' scheme (file system).</p> <p>To make Islandora save future derivatives to Fedora instead of to Drupal, change the corresponding action's \"File system\" setting ('scheme' in the corresponding config file) to 'fedora' instead of 'public'.</p> <p></p>"},{"location":"user-documentation/glossary/","title":"Glossary","text":"<p>The following glossary of terms addresses an Islandora context. When comparing new Islandora and Fedora to older versions it may also be helpful to reference the Islandora 7 Glossary.</p>"},{"location":"user-documentation/glossary/#alpaca","title":"Alpaca","text":"<p>Islandora's event-driven middleware based on Apache Camel that handles communication between various components of Islandora, for instance synchronizing Drupal data with a Fedora repository and the Blazegraph triple store.</p>"},{"location":"user-documentation/glossary/#ansible","title":"Ansible","text":"<p>Open source software for provisioning, configuration management and application deployment. In the context of Islandora, Ansible can be used to install and maintain the Islandora software stack more conveniently and efficiently on a server or group of servers. The configuration and installation instructions are captured in a human-readable list of tasks, called 'Playbook'. The Islandora Playbook for Ansible is one of the installation methods currently supported by the Islandora community.</p>"},{"location":"user-documentation/glossary/#apache","title":"Apache","text":"<p>Refers to the Apache Software Foundation, a not-for-profit organization supporting various open source software development projects. The Islandora software stack consists of different components that are developed under the umbrella of the Apache Software Foundation, for instance Apache ActiveMQ, Apache Camel, the Apache HTTP server (webserver), Apache Karaf, Apache Solr, and Apache Tomcat.</p> <p>Can in a narrower sense refer to the Apache HTTP server.</p>"},{"location":"user-documentation/glossary/#api","title":"API","text":"<p>See Application Programming Interface</p>"},{"location":"user-documentation/glossary/#application-programming-interface","title":"Application Programming Interface","text":"<p>Also API; a connection between computers or between computer programs. It is a type of software interface, offering a service to other pieces of software.</p>"},{"location":"user-documentation/glossary/#blazegraph","title":"Blazegraph","text":"<p>Blazegraph is an open source triplestore and graph database. Islandora ships Blazegraph as part of the software stack. Metadata about Resource nodes is synchronized between the Drupal database and Blazegraph. Data in the Blazegraph triple store can be queried using SPARQL.</p>"},{"location":"user-documentation/glossary/#bundle","title":"Bundle","text":"<p>A bundle is the generic name for a sub-type of a Content Entity type in Drupal. To illustrate: Node and Taxonomy Term are both names of Content Entity types, and both have sub-types (\"bundles\"). The bundles of Node are called \"Content Types\" and the bundles of Taxonomy Term are called \"Vocabularies\". Each bundle includes its own configurations of what fields are present on the bundle and how they are entered and displayed. A bundle is thus part of the configuration of your site. Some fieldable Content Entity Types, such as User, do not have bundles.</p>"},{"location":"user-documentation/glossary/#cantaloupe","title":"Cantaloupe","text":"<p>Cantaloupe is an image server written in Java. It implements the IIIF Image API, which means it handles deep zooming of large images and other image manipulations. It is required to serve images to some viewers such as Mirador and OpenSeadragon.</p>"},{"location":"user-documentation/glossary/#checksum","title":"Checksum","text":"<p>Checksums are a sequence of numbers and letters to check data for errors. If you know the checksum of an original file, you can use a checksum utility to confirm your copy is identical. Checksums can be used to check the Fixity of a file.</p>"},{"location":"user-documentation/glossary/#claw","title":"CLAW","text":"<p>CLAW (CLAW Linked Asset WebDataFrameWork) was the development code name for the software released in June 2019 as Islandora 8, now called Islandora.</p>"},{"location":"user-documentation/glossary/#collection","title":"Collection","text":"<p>A collection is a way of grouping related resources together, much like a directory on a computer. Collections can contain any number of related resource Nodes and sub-collections.</p>"},{"location":"user-documentation/glossary/#configuration","title":"Configuration","text":"<p>See also: Configuration entity</p> <p>Contrast: Content</p> <p>In Drupal, your configuration is the total set of configuration entities that are live in your site. Configuration is usually managed through the Drupal GUI, and it can also be exported and imported. When it is active in your site, configuration lives in the Drupal database. When it is exported or serialized, configuration appears as a set of YAML (.yml) files, one file per configuration entity. Configuration can be overridden in the settings.php file.</p>"},{"location":"user-documentation/glossary/#configuration-entity","title":"Configuration entity","text":"<p>See also: Configuration</p> <p>Contrast: Content entity</p> <p>A Drupal configuration entity (or \"config entity\") is an individual piece that makes up your site's configuration. It is usually represented as a single YAML (.yml) file, though the actual (\"live\") configuration lives in the database. A config entity usually represents the results of saving a single form in the administration interface, and may contain multiple (usually related) individual settings. Each configuration entity can be exported or imported as a \"single item\" through the Configuration Synchronization GUI, or with the Devel module's \"config editor\" can be edited individually. However, config entities are often interrelated and manual editing is usually not recommended.</p>"},{"location":"user-documentation/glossary/#content","title":"Content","text":"<p>See also: Content Entity</p> <p>Contrast: Configuration</p> <p>In Drupal, your content is the total set of things that have been created or uploaded \"as content\" in your website. This includes all content entities - the actual nodes, media, files, taxonomy terms, etc, but does not include anything that is configuration. Content can be exported and imported, but only between sites with exactly the same configuration.</p> <p>Sometimes, \"Content\" is used to refer to Nodes but not other content entities. This is the case when creating a new View and one of the options is to make a view of \"Content\".</p>"},{"location":"user-documentation/glossary/#content-entity","title":"Content entity","text":"<p>See also: Content</p> <p>Contrast: Configuration entity</p> <p>In Drupal, content entities are the actual nodes, media, taxonomy terms, users, comments, and files that you've created on your site. For example, you may have 223 nodes, 534 media, 1000 taxonomy terms, 14 users, and 535 files in your site - those counts represent the numbers of content entities present in your site. \"Node\", \"Media\", \"Taxonomy term\" etc. are the high-level \"types\" of content entities. Some of these types have sub-types which are called bundles.</p> <p>Content entities should not be confused with content types, which are bundles of nodes, and are part of a site's configuration.</p>"},{"location":"user-documentation/glossary/#content-model","title":"Content model","text":"<p>Deprecated concept used in Islandora Legacy; see Islandora Model.</p>"},{"location":"user-documentation/glossary/#content-type","title":"Content type","text":"<p>A type of Node. Content types are the \"bundles\" of Nodes, which are a type of Content Entity in Drupal. A content type importantly defines a set of fields and how they are displayed. While a content type describes a type of content entity, the information that makes up the content type itself is all part of your site's configuration.</p> <p>The standard Drupal Content types are 'Article' and 'Basic page'. Islandora Starter Site adds 'Repository Item' as a Content type, defining metadata fields typically used to describe digital resources. You can easily create your own content types.</p>"},{"location":"user-documentation/glossary/#context","title":"Context","text":"<p>An \"if-this-then-that\" configuration created using the Drupal Context contrib module. Islandora extends the capabilities of Context by adding custom Conditions, custom Reactions, and by evaluating context at specific times to allow Contexts to be used for derivatives, indexing, and display.</p>"},{"location":"user-documentation/glossary/#crayfish","title":"Crayfish","text":"<p>A collection of Islandora microservices. Some microservices are built specifically for use with a Fedora repository, while others are just for general use within Islandora.</p>"},{"location":"user-documentation/glossary/#datastream","title":"Datastream","text":"<p>Deprecated terminology, refers to how Fedora 3/Islandora Legacy stored files as part of a resource ('object') in the Fedora repository. Replaced by Drupal Media entities, which 'wraps' Files in an intermediate structure. This allows Fields to be attached to files, for instance for storing technical metadata.</p>"},{"location":"user-documentation/glossary/#derivative","title":"Derivative","text":"<p>A version of a file which is derived from an uploaded file. For example, a thumbnail generated from an uploaded image. Islandora uses microservices to generate derivatives. See the concept page for Derivatives.</p>"},{"location":"user-documentation/glossary/#docker","title":"Docker","text":"<p>Docker is a platform that use OS-level virtualization to deliver software in packages called containers. Islandora uses Docker as part of ISLE, a suite of Docker containers that run the various components of Islandora.</p>"},{"location":"user-documentation/glossary/#drupal","title":"Drupal","text":"<p>Drupal is an open source web content management system (CMS) written in PHP. Known for being extremely flexible and extensible, Drupal is supported by a community of over 630,000 users and developers. Drupal sites can be customized and themed in a wide variety of ways. Drupal sites must include Drupal Core and usually involve additional, Contributed code.</p>"},{"location":"user-documentation/glossary/#drupal-core","title":"Drupal Core","text":"<p>The files, themes, profile, and modules included with the standard project software download.</p>"},{"location":"user-documentation/glossary/#drupal-roles","title":"Drupal Roles","text":"<p>Roles are a way of assigning specific permissions to a group of users. Any user assigned to a role will have the same permissions as all other users assigned to that role. This allows you to control which users have permission to view, edit, or delete content in Drupal. Islandora provides a special role called fedoraAdmin that is required to have actions in Drupal reflected in Fedora.</p>"},{"location":"user-documentation/glossary/#entity","title":"Entity","text":"<p>A Drupal term for an item of either content or configuration data. Examples include Nodes (content items), Blocks, Taxonomy terms, and definitions of content types; the first three are content entities, and the last is a configuration entity. In common usage, the term often refers to Drupal content entities like Nodes or Taxonomy terms.</p>"},{"location":"user-documentation/glossary/#fedora-repository-software","title":"Fedora (Repository Software)","text":"<p>Fedora is a digital asset management architecture upon which institutional repositories, digital archives, and digital library systems might be built. Fedora is the underlying architecture for a digital repository, and is not a complete management, indexing, discovery, and delivery application.</p> <p>The Fedora repository functions as the standard smart storage for Islandora.</p>"},{"location":"user-documentation/glossary/#ffmpeg","title":"FFmpeg","text":"<p>FFmpeg is a cross-platform audio and video processing software. In Islandora, FFmpeg is provided by the Crayfish microservice, Homarus.</p>"},{"location":"user-documentation/glossary/#field","title":"Field","text":"<p>Data of a certain type that is attached to a content entity. A field is made up of field storage which inclues some low-level configuration that is shared across all field instances, and a field instance, which configures how that field appears on a bundle. Fields also have field widgets that govern data entry, and field formatters which control how the field is displayed to site visitors.</p>"},{"location":"user-documentation/glossary/#field-instance","title":"Field instance","text":"<p>A field, configured to show up on a bundle. It is possible to reuse fields on different bundles, and they share the same field storage but are different field instances and can have different configurations (such as field name, description, cardinality, required, etc).</p> <p>For example, the Repository Item Content type has a field instance for Alternative Title, with the following configuration:</p> <ul> <li>Display name: Alternative Title</li> <li>Help text: (blank)</li> <li>Required: no</li> <li>Translatable: yes</li> <li>Field visibility and permissions: not set</li> <li>Default value: none</li> </ul>"},{"location":"user-documentation/glossary/#field-formatter","title":"Field formatter","text":"<p>A field formatter configures how a field instance is displayed to site visitors. The formatters available depend on the field type. For example, an EDTF-type field can use the \"Default EDTF Formatter\", which can be configured (per field instance) to be big- or little-endian, and to show year, month, and day info in a variety of ways. Field Formatters are configured on the \"Manage Display\" tab of a bundle.</p>"},{"location":"user-documentation/glossary/#field-type","title":"Field type","text":"<p>The type of a field instance or field_storage. Drupal Core defines several field types and modules can define additional field types. The field type determines what widgets and field formatters are available, as well as what configuration options are available in the field instance. Some commonly used field types in Islandora include:</p> <ul> <li>Text (plain, long)<ul> <li>Allows long text values</li> <li>Displays the input text</li> </ul> </li> <li>Text (formatted, long)<ul> <li>Allows long text values</li> <li>If a format like \u201cfull_html\u201d is set on the field, <p> will  be displayed as a paragraph break rather than <p> <li>Entity reference<ul> <li>Populated by a link to another Drupal/Islandora entity</li> <li>Configurable behaviors include: what kind of entity can be linked to, how the data entry interface words (drop down menu or autocomplete), general patterns of how these references get displayed (show the referenced thing, show a link to the referenced thing, show unlinked name of the referenced thing). </li> </ul> </li> <li>Typed relation<ul> <li>An extended variation on Entity reference field type</li> <li>List of available relationship types (labeled \u201cAvailable Relations\u201d) can be configured per field instance. A code and a display value are recorded for each type (for example: relators:aut|Author). \u2018relators\u2019 acts as a linked data namespace. \u2018aut\u2019 is the code that, combined with the base namespace URI configured elsewhere, will create the linked data expression of what is recorded in this field ( this node hasAuthor taxonomyTermID )</li> </ul> </li> <li>EDTF<ul> <li>Holds a string formatted according to the EDTF standard</li> <li>What kinds of EDTF features are allowed can be configured in the widget and how the date is presented to site visitors can be configured in the field formatter</li> </ul> </li>"},{"location":"user-documentation/glossary/#field-storage","title":"Field Storage","text":"<p>Low-level configuration that determines how the field data is stored in the database. This often includes the maximum length of the data, and whether the field is single-valued or repeatable (though that can often be overridden at the field instance level). Compare: field instance</p>"},{"location":"user-documentation/glossary/#fits","title":"FITS","text":"<p>File Information Tool Set, a set of software components for identifying, validating and extracting of technical metadata for a wide range of file formats.</p>"},{"location":"user-documentation/glossary/#fixity","title":"Fixity","text":"<p>Also file fixity; digital preservation term meaning that a digital file remains unchanged ('fixed') over time. Fixity checking verifies that a file has not been corrupted or manipulated during a transfer process or while being stored. Typically, a fixity checking process computes checksums or cryptographic hashes for a file and compares the result to a reference value stored earlier. The Riprap microservice and the contributed Riprap Islandora module support fixity checking and error reporting in Islandora.</p>"},{"location":"user-documentation/glossary/#flysystem","title":"Flysystem","text":"<p>Flysystem is a filesystem abstraction library for PHP. Islandora uses Flysystem to swap about different backend filesystem applications. Islandora provides a custom Flysystem adapter for Fedora.</p>"},{"location":"user-documentation/glossary/#glam","title":"GLAM","text":"<p>Acronym for \"galleries, libraries, archives, and museums\".</p>"},{"location":"user-documentation/glossary/#gui","title":"GUI","text":"<p>Acronym for \"Graphical User Interface\". Often refers to taking actions through Drupal's administrative interface in a web browser as opposed to effecting the same changes through Drush or programmatically. </p>"},{"location":"user-documentation/glossary/#greenfield","title":"Greenfield","text":"<p>An installation without legacy constraints. Usually refers to a brand new system where users load new content, as opposed to migrating content from a previous system.</p>"},{"location":"user-documentation/glossary/#imagemagick","title":"Imagemagick","text":"<p>Imagemagick is an open-source image processing library. In Islandora, Imagemagick is provided by the Crayfish Microservice, Houdini.</p>"},{"location":"user-documentation/glossary/#hocr","title":"hOCR","text":"<p>hOCR is an open standard for representing OCR (Optical Character Recognition) results, including text positioning, as HTML. hOCR can be produced by Tesseract, and can be displayed as an overlay on an image by Mirador.</p>"},{"location":"user-documentation/glossary/#homarus","title":"Homarus","text":"<p>Homarus is a microservice wrapper for FFMpeg. It is part of Crayfish.</p>"},{"location":"user-documentation/glossary/#houdini","title":"Houdini","text":"<p>Houdini is a microservice wrapper for Imagemagick. It is part of Crayfish.</p>"},{"location":"user-documentation/glossary/#hypercube","title":"Hypercube","text":"<p>Hypercube is a microservice wrapper for Tesseract. It is part of Crayfish.</p>"},{"location":"user-documentation/glossary/#iiif","title":"IIIF","text":"<p>The International Image Interoperability Framework. Generally pronounced \"triple-eye-eff.\" A set of open standards and APIs that help archives, libraries, and museums make the most of their digitized collections with deep zoom, annotation capabilities, and more, and also the community of users and developers that support the framework.</p>"},{"location":"user-documentation/glossary/#iiif-manifest","title":"IIIF Manifest","text":"<p>Defined in the IIIF Presentation API, it is a document that includes \"The overall description of the structure and properties of the digital representation of an object.\" In Islandora, it lists one or more files, in order, that can be displayed in a viewer such as Mirador or OpenSeadragon.</p>"},{"location":"user-documentation/glossary/#ingest","title":"Ingest","text":"<p>To ingest an object is to add an entry for it in Islandora. This can be done through the Drupal graphical user interface or one of the Drupal APIs (REST, Migrate API). The third-party contributed software Islandora Workbench uses the Drupal REST API for convenient bulk ingest.</p> <p>In the context of digital repositories, ingest refers to the process by which the repository software imports and subsequently processes an object, creating derivatives automatically, and running any other processing that is configured to occur when an object is added. This would be distinguished by software which simply stores objects after import (with or without associated files) and performs no processing. The Islandora GUI and the documentation sometimes use other terms such as 'import' or 'add resource node'. In such contexts, these terms generally refer to the ingest process.</p>"},{"location":"user-documentation/glossary/#islandora-8-8x-20","title":"Islandora 8 (8.x, 2.0)","text":"<p>Islandora 8, 8.x, 2.0, and CLAW are all deprecated names for the current version of Islandora. They referred to Islandora's use of Drupal 8, and being a major shift away from Islandora Legacy (formerly known as Islandora 7 or 7.x as it runs on Drupal 7).</p>"},{"location":"user-documentation/glossary/#islandora-install-profile","title":"Islandora Install Profile","text":"<p>The Islandora Install Profile (in GitHub as Islandora Install Profile Demo, is a Drupal install profile that was developed by Born Digital, an Islandora vendor. It defines an Islandora with additional modules, themes, and configurations that were not defined in the Islandora Starter Site (formerly Islandora Defaults). The Install Profile and the Starter Site share the same function (though they approach it differently) and it is not possible to use both.</p>"},{"location":"user-documentation/glossary/#islandora-starter-site","title":"Islandora Starter Site","text":"<p>The Islandora Starter Site is a way to install Drupal that provides a functional Islandora \"out of the box.\" It was created from Islandora Defaults [now defunct] by discoverygarden inc, an Islandora vendor. The Islandora Install Profile and the Starter Site share the same function (though they approach it differently) and it is not possible to use both.</p>"},{"location":"user-documentation/glossary/#islandora-model","title":"Islandora model","text":"<p>\"Islandora Models\" is a taxonomy vocabulary that comes by default with Islandora. As of 2024-08-12, it includes the following terms:</p> <ul> <li>Audio</li> <li>Binary</li> <li>Collection</li> <li>Compound Object</li> <li>Digital Document</li> <li>Image</li> <li>Newspaper</li> <li>Page</li> <li>Paged Content</li> <li>Publication Issue</li> <li>Video</li> </ul> <p>The Repository Item Content type (part of the Islandora Starter Site) has a \u201cModel\u201d field instance which is an Entity reference field configured to be populated by references to terms in this vocabulary. The \u201cModel\u201d field is one of only two required fields on the Repository Item in the default settings. </p> <p>Contexts and other system code (such as themes) may use this field to control the display and behavior of different Repository Item types. </p>"},{"location":"user-documentation/glossary/#islandora-playbook","title":"Islandora playbook","text":"<p>A set of human-readable YAML files, containing instructions for automatically configuring a server environment and installing the different components of the Islandora software stack. The instructions recorded in Playbook are executed by Ansible. The Islandora Playbook for Ansible is one of the installation methods currently supported by the Islandora community.</p>"},{"location":"user-documentation/glossary/#isle","title":"ISLE","text":"<p>ISLE, or ISLandora Enterprise, is a community initiative to ease the installation and maintenance of Islandora by using Docker. ISLE is one of the installation methods currently supported by the Islandora community.</p>"},{"location":"user-documentation/glossary/#json-ld","title":"JSON-LD","text":"<p>JSON-LD (JavaScript Object Notation for Linked Data) is a method of encoding linked data using JSON.</p>"},{"location":"user-documentation/glossary/#linked-data","title":"Linked data","text":"<p>In computing, linked data is structured data which is interlinked with other data so it becomes more useful through semantic queries. Linked data typically employs the Resource Description Framework for data modelling.</p>"},{"location":"user-documentation/glossary/#manifest","title":"Manifest","text":"<p>See IIIF Manifest.</p>"},{"location":"user-documentation/glossary/#matomo","title":"Matomo","text":"<p>Matomo, formerly called Piwik, is a software for tracking visits to websites. It is an open source alternative to Google Analytics and allows the generation of website usage reports.</p>"},{"location":"user-documentation/glossary/#media","title":"Media","text":"<p>Media are a Drupal Content entity type, which allows to manage Media items (Files) like images, documents, slideshows, YouTube videos, tweets, Instagram photos, etc. The Media module provides a unified User Interface where editors and administrators can upload, manage, and reuse files and multimedia assets. In the context of Islandora, Media entities 'wrap' files and provide a place to store file-specific metadata.</p> <p>See https://www.drupal.org/docs/8/core/modules/media/overview for more information on the Drupal foundations, and refer to https://islandora.github.io/documentation/user-documentation/media/ for how Islandora uses Media.</p>"},{"location":"user-documentation/glossary/#memento","title":"Memento","text":"<p>Protocol specification that allows a web client to request an earlier/historic state web resource (if available). Fedora implements the Memento protocol to store and serve versions of content in a Fedora repository.</p>"},{"location":"user-documentation/glossary/#mirador","title":"Mirador","text":"<p>Mirador is a javascript-based zoomable image Viewer. It is related to (and more fully-featured than) OpenSeadragon. It has the ability to do zooming, display multiple pages, and display positioned text (e.g. hOCR or attributions). To render an image through Mirador, it must be provided a IIIF Manifest and the images must be served through a IIIF-friendly image server such as Cantaloupe.</p>"},{"location":"user-documentation/glossary/#microservice","title":"Microservice","text":"<p>A software development technique \u2014 a variant of the service-oriented architecture (SOA) structural style \u2014 that arranges an application as a collection of loosely coupled services. In a microservices' architecture, services are fine-grained and the protocols are lightweight.</p>"},{"location":"user-documentation/glossary/#module","title":"Module","text":"<p>Software (usually PHP, JavaScript, and/or CSS) that extends site features and adds functionality. Drupal modules conform to a specific structure allowing them to integrate with the Drupal architecture.</p>"},{"location":"user-documentation/glossary/#node","title":"Node","text":"<p>Usually refers to a piece of Drupal Content of the type 'Node'. This includes actual pages, articles, and Resource nodes. Nodes must belong to a specific node bundle, called a \"Content Type\".</p>"},{"location":"user-documentation/glossary/#oai-pmh","title":"OAI-PMH","text":"<p>The Open Archives Initiative Protocol for Metadata Harvesting (OAI-PMH) is a protocol developed for harvesting metadata descriptions of records in an archive so that services can be built using (aggregated) metadata from many archives. Islandora allows to publish metadata in a way conformant to OAI-PMH, acting as a so-called OAI-PMH endpoint.</p>"},{"location":"user-documentation/glossary/#ontology","title":"Ontology","text":"<p>In computer science and information science, an ontology encompasses a representation, formal naming and definition of the categories, properties and relations between concepts, data and entities. In the narrower context of the Resource Description Framework (RDF), an ontology is a formal, machine-readable description of the 'vocabulary' that can be used in a knowledge graph. An RDF ontology for instance specifies classes of things or concepts (e.g. the class of all book authors) and properties of classes/class instances (e.g. an author's name, birthdate, shoe size; also the fact that an author has written something that is in the class of books).</p>"},{"location":"user-documentation/glossary/#open-source","title":"Open Source","text":"<p>Open source describes a method of software development that promotes access to the end product's source code. Islandora is an open source product with an active development community, operating under the GPL license (2.0) for Drupal components and the MIT license for non-Drupal components.</p>"},{"location":"user-documentation/glossary/#openseadragon","title":"OpenSeadragon","text":"<p>OpenSeadragon is javascript-based zoomable image Viewer. It has the ability to do zooming and display multiple pages. To render an image through OpenSeadragon, it must be provided in a IIIF Manifest.</p>"},{"location":"user-documentation/glossary/#pr","title":"PR","text":"<p>See Pull request</p>"},{"location":"user-documentation/glossary/#pull-request","title":"Pull request","text":"<p>Also PR; sometimes also known as merge requests; technical term from distributed version control systems for software code like Git. Code contributors can request that the maintainer of a code repository 'pulls' the code change into the repository after approval.</p>"},{"location":"user-documentation/glossary/#rdf","title":"RDF","text":"<p>See Resource Description Framework</p>"},{"location":"user-documentation/glossary/#repository-item","title":"Repository Item","text":"<p>A type of content entity that comes \"out of the box\" with the Islandora Starter Site. See also: Resource Node</p>"},{"location":"user-documentation/glossary/#resource-description-framework","title":"Resource Description Framework","text":"<p>Also RDF; family of World Wide Web Consortium (W3C) specifications originally designed as a data model for metadata. It has come to be used as a general method for conceptual description or modeling of information that is implemented in web resources. The data is modelled as a set of statements, also known as triples. A collection of RDF statements intrinsically represents a directed graph. Data represented according to the RDF specifications can be serialized in different ways, for instance using JSON-LD.</p>"},{"location":"user-documentation/glossary/#resource-node","title":"Resource Node","text":"<p>A Resource node is a generic Islandora term for a Drupal Node that represents a single conceptual item or object stored in an Islandora repository. It acts as a stand-in for all files and metadata associated with that item, and is the place where the item 'lives' as a visitable URI.</p> <p>The term 'Resource node' is specific to Islandora. Typically, Resource nodes in an Islandora installation will use a specific Content type for the digital assets stored in the repository.</p> <p>For example, a video stored in Islandora will have a Resource node, with metadata stored in Fields. Attached to the Resource node is a Media entity, which encapsulates the preservation-grade file. The Resource node may be linked to further Media, for instance for a thumbnail, web-friendly derivative, and technical metadata associated with the resource node. The Resource node may also belong to one or more collections.</p>"},{"location":"user-documentation/glossary/#source-field","title":"Source Field","text":"<p>A Drupal term for the main file-type field on a Media. The names of these fields differ across Media Types, such as \"Image\" (<code>field_media_image</code>) on Image media, and \"Video File\" (<code>field_media_video_file</code>) on Video media. While it is possible to add other fields, including file fields, to a Media, the source field is the one configured during the creation of a Media Type. Islandora provides utility functions to get the source field from a Media (MediaSourceService.php).</p>"},{"location":"user-documentation/glossary/#taxonomy-term","title":"Taxonomy term","text":"<p>A Drupal Content Entity of the type 'taxonomy term'. Taxonomy terms belong to vocabularies which define what fields are available and how they behave. Drupal generally uses terms contained in taxonomies or vocabularies to classify content (tag or category). Taxonomy terms are used in Islandora to establish locally controlled vocabularies for describing resources, for instance for standardised spellings of names or subject terms.</p>"},{"location":"user-documentation/glossary/#tesseract","title":"Tesseract","text":"<p>Tesseract is an open-source OCR (Optical Character Recognition) software. It can perform OCR in multiple languages. It can produce OCR (plain text) and hOCR (HTML, which includes positional data). In Islandora, Tesseract is provided by the Crayfish Microservice, Hypercube.</p>"},{"location":"user-documentation/glossary/#theme","title":"Theme","text":"<p>Software and asset files (images, CSS, PHP code, and/or templates) that determine the style and layout of the site. The Drupal project distinguishes between core and contributed themes.</p>"},{"location":"user-documentation/glossary/#vagrant","title":"Vagrant","text":"<p>Vagrant is an open-source software product for building and maintaining portable virtual software development environments (virtual machines). The Islandora Playbook includes a 'vagrantfile', a set of instructions that allows users to create a local virtual machine environment which will subsequently run Ansible to execute the configuration and installation steps recorded in the Islandora Playbook.</p>"},{"location":"user-documentation/glossary/#vbo","title":"VBO","text":"<p>See Views Bulk Operations.</p>"},{"location":"user-documentation/glossary/#view","title":"View","text":"<p>Drupal Views let you query the database to generate lists of content, and format them as lists, tables, slideshows, maps, blocks, and many more. The Views UI module, part of Drupal Core, provides a powerful administrator interface for creating and editing views without any code. There is a large ecosystem of extension modules for Views.</p> <p>Views power many of the Islandora features, including viewers, IIIF Manifests, and search.</p>"},{"location":"user-documentation/glossary/#view-mode","title":"View Mode","text":"<p>A View Mode is a way that a piece of Drupal content can be rendered. View modes let you create alternate configurations for what fields get displayed, in what order, and rendered in what field formatters. View modes are created under Manage &gt; Display Modes &gt; View Modes, but are configured at the bundle level (after first enabling that view mode to have its own configuration). If the requested view mode does not have a custom configuration, then the \"Default\" view mode will be used.</p> <p>In Views, you can choose to show \"Rendered entities\" (usually as opposed to \"Fields\"). Here, you can select which view mode to use to render the results.</p>"},{"location":"user-documentation/glossary/#viewer","title":"Viewer","text":"<p>A Viewer is any tool that allows Drupal to embed, display, or play back a particular object in a web-accessible format. Viewers are typically projects unto themselves. To use a viewer within Drupal usually involves a Library containing the viewer's code, as well as a Drupal Module that makes the viewer code appear within Drupal. Usually a viewer displays a single binary file, but some viewers (e.g. Mirador and OpenSeadragon) can display an entire manifest (ordered list of files).</p>"},{"location":"user-documentation/glossary/#views-bulk-operations","title":"Views Bulk Operations","text":"<p>Also called VBO; a Drupal Module for performing bulk/batch operations on Nodes selected by a View definition.</p>"},{"location":"user-documentation/glossary/#virtual-machine-image","title":"Virtual Machine Image","text":"<p>The Virtual Machine Image allows you to mount a fully working version of Islandora on your local machine as a separate virtual machine.</p>"},{"location":"user-documentation/glossary/#vocabulary","title":"Vocabulary","text":"<p>A Drupal configuration entity that holds taxonomy terms. The vocabulary defines what fields are available on each term and how the terms behave. Vocabularies are the \"bundles\" of taxonomy terms.</p>"},{"location":"user-documentation/glossary/#weight","title":"Weight","text":"<p>Drupal field that stores an integer value on an entity, allowing to represent the relative order of the entity in relation to other entities of the same type or subtype. Used by Islandora to store the order of components in compound objects, for instance pages in paged content items (books, serials).</p>"},{"location":"user-documentation/glossary/#yaml","title":"YAML","text":"<p>YAML is a human-readable data-serialization language. It is commonly used for configuration files and in applications where data is being stored or transmitted. Software applications like Drupal or Ansible store configuration information in YAML files for easy transportability of a configuration.</p> <p>Some definitions adapted from Wikipedia and Drupal.org</p>"},{"location":"user-documentation/iiif/","title":"IIIF (International Image Interoperability Framework)","text":"<p>IIIF is a set of specifications that provides interoperability of image-based collections across platforms. What this means for a repository platform like Islandora at a general level is that image-based objects such as (still) images and paged content can be managed by Islandora but viewed in external applications, and that Islandora can bring in image-based content from elsewhere to supplement locally managed content. If this intrigues you, see the section \"Looking under the hood (and beyond)\" below.</p> <p>At a practical level, because Islandora supports several of the IIIF specifications, we can:</p> <ul> <li>Zoom, pan, and rotate images within a IIIF-compliant viewer like OpenSeadragon or Mirador<ul> <li>Islandora uses an IIIF-compliant image server (by default, Cantaloupe) that utilizes the IIIF Image API. This capability is similar to what Islandora 7.x users experience when they view a Large Image.</li> </ul> </li> <li> <p>Display thumbnails for all pages of a book or newspaper issue within image viewers</p> <ul> <li>IIIF-compliant image viewers such as OpenSeadragon or Mirador can display a \"collection\" of images such as all the pages of a book or newspaper issue using the IIIF Presentation API. For example, here is a screenshot of OpenSeadragon rendering all the pages of a book:</li> </ul> <p></p> </li> </ul>"},{"location":"user-documentation/iiif/#using-iiif-in-islandora","title":"Using IIIF in Islandora","text":"<p>If you're not using one of our provisioning tools, you will need to:</p> <ul> <li>install and configure the Cantaloupe (or another IIIF-compliant) image server</li> <li>install a viewer module and configure it to point to the IIIF Image server location</li> <li>if using the viewer to show single images, configure it as a file formatter in one of the display modes for your media</li> <li>if using the viewer to show multi-paged content, install the Islandora IIIF module and create a IIIF view (see the one in the Starter Site as an example), then configure the viewer's block to show up where desired (see below for details on how it could be configured)</li> </ul>"},{"location":"user-documentation/iiif/#using-iiif-in-the-islandora-starter-site","title":"Using IIIF in the Islandora Starter Site","text":""},{"location":"user-documentation/iiif/#contexts-and-mirador-default","title":"Contexts and Mirador (default)","text":"<p>The Islandora Starter Site uses a Context to automatically use the IIIF Presentation API with the Mirador viewer for showing paged content.</p> <p>To use this Context, give your book or newspaper (or other paged content) a model of \"Paged Content\" or \"Publication Issue\". To double-check this, in the Mirador Block - Multipaged items Context, you should see those terms used in the \"Node has term\" condition (you can register more than one term there, and having one of these on your node will activate this Context). Now, when you view a paged content Islandora node, you will see service files of all of its child pages (assuming you have added some child pages to the object) in the Mirador viewer as illustrated above.</p> <p>If you are using the Mirador viewer, it enables a lot of features out of the box, including the strip of thumbnails at the bottom, and there is little to configure. </p>"},{"location":"user-documentation/iiif/#openseadragon-viewer-optional","title":"OpenSeadragon Viewer (optional)","text":"<p>However if you are using the OpenSeadragon viewer, a Context can be set up as above, to show the OpenSeadragon viewer. In the Starter Site, there is currently a OpenSeadragon Block - Multipaged Items Context that is not enabled. You may wish to enable this and disable the Mirador Block - Multipaged items Context.</p> <p>You can change how individual or paged content images are arranged in the OpenSeadragon viewport by doing the following:</p> <ol> <li>Visit <code>admin/config/media/openseadragon</code></li> <li>Scroll to the bottom, where you will see the \"Collection Mode\" options.</li> <li>The \"Enable Collection Mode\" checkbox will be unchecked. This is normal (unless you have already checked it). The Open Seadragon Context automatically, and temporarily, puts OpenSeadragon in Collection mode when rendering a Paged Content object and then puts it back to Sequence mode (which is what mode it's in when the \"Enable Collection Mode\" checkbox is unchecked). This means that in order for you to change options that apply to Collection Mode, you will need to check the \"Enable Collection Mode\" checkbox, change its options, save the form, then uncheck the \"Enable Collection Mode\" checkbox again. Follow these steps, and it will work!<ol> <li>Check the \"Enable Collection Mode\" checkbox. The Collection Mode options will appear.</li> <li>Adjust the options to what you want.</li> <li>Click the \"Save Configuration\" button.</li> <li>After the form is saved, navigate back down to the \"Collection Mode\" options and uncheck the \"Enable Collection Mode\" checkbox.</li> <li>Click the \"Save Configuration\" button.</li> </ol> </li> </ol>"},{"location":"user-documentation/iiif/#looking-under-the-hood-and-beyond","title":"Looking under the hood (and beyond)","text":"<p>If you want to see the raw output of the IIIF API implementations in Islandora, visit a node that is displaying the OpenSeadragon viewer (doesn't matter if it's a single image or a paged content node like a book), and tack \"manifest\" onto the end of the URL, like <code>http://myrepo.org/node/23/manifest</code> and hit enter. You will see the raw JSON that IIIF-compliant viewers use to render the content. To see the output for a paged content item that lists all its children, tack <code>/book-manifest</code> on the end of the URL.</p> <p>The really neat thing is, IIIF-compliant viewers don't need to be embedded in Islandora websites. If a viewer on another website knows the URL of a IIIF manifest like the ones that Islandora can produce, that viewer can display the content described in the manifest. Some implementations of IIIF viewers that show off the potential to combine content from multiple IIIF servers include:</p> <ul> <li>The Biblissima Project - brings together related content from different repositories.</li> <li>diva.js - select a source from the drop-down list at the top.</li> </ul> <p>These two examples have nothing to do with Islandora, but illustrate the potential for IIIF to build tools that extend beyond a given repository platform.</p>"},{"location":"user-documentation/iiif/#resources","title":"Resources","text":"<p>To find resources on how to customize the IIIF interface check out IIIF's \"Guides to finding and working with IIIF materials\".</p> <p>There is also a list of awesome IIIF resources that includes examples, tutorials, Digital Asset Management (DAMs), Image servers, Exhibits, Annotations, discovery, community involvement, Online training courses, and more.</p>"},{"location":"user-documentation/jwt-authentication/","title":"JWT authentication","text":"<p>Islandora uses JWT tokens to authenticate communication between its components. RSA private public key pair is used to sign and verify JWT tokens. The process of issuing JWT tokens using RSA private key is handled by the Drupal jwt module.</p> <p>The private public RSA pair needed by JWT authentication mechanism is generated in the web server. By default, claw playbook places the keys in <code>/opt/islandora/auth</code>.  Crayfish and Tomcat/Karaf need the public key to verify the JWT token. By default, they are put in the following locations: <code>/var/www/html/Crayfish/public.key</code>, <code>/etc/tomcat8/public.key</code>. If you are deploying Crayfish and Karaf/Tomcat components to different servers, ensure that web server public.key files are in the expected locations.</p> <p>Note that the connection need to be over SSL or an encrypted channel for this communication to be secure. Otherwise, a third party can capture your token and get access to your servers.</p> <p>The JWT tokens expiration time is configurable via Islandora core settings: <code>http://localhost:8000/admin/config/islandora/core</code>. Currently, it is recommended to set the <code>JWT Expiry</code> to the maximum expected time for a job, including batch jobs.</p>"},{"location":"user-documentation/linked-data/","title":"Linked data in Islandora","text":"<p>The purpose of this page is to provide a guided reading list to anyone who wants to get up to speed on the basics of linked data within the Islandora community. Those who make their way through the readings will be able to talk competently about linked data and better understand the design decisions made in Islandora. The list starts with the fundamentals of linked data (RDF, SPARQL, serializations and ontologies) and moves toward more advanced topics specific to the use cases of a Fedora 4 based digital repository system.</p>"},{"location":"user-documentation/linked-data/#reading-list","title":"Reading list","text":""},{"location":"user-documentation/linked-data/#basics-of-linked-data","title":"Basics of linked data","text":"<p>This section seeks to give the reader a foundational understanding of what linked data is, why it is useful, and a very superficial understanding of how it works.</p> <ul> <li>Tim Berners-Lee\u2019s description of Linked Data</li> <li>Manu Sporny's \"What is Linked Data?\" YouTube Video</li> <li>Wikipedia article on Linked Data</li> <li>Wikipedia article on Semantic Web</li> <li>Wikipedia article on URIs</li> <li>Wikipedia article on the W3C</li> <li>W3C\u2019s description of Linked Data</li> <li>W3C\u2019s Linked Data Glossary</li> <li>W3C\u2019s Architecture of the World Wide Web</li> </ul>"},{"location":"user-documentation/linked-data/#understanding-rdf","title":"Understanding RDF","text":"<p>This section is all about RDF, the Resource Description Framework, which defines the way linked data is structured.</p> <ul> <li>Wikipedia article on RDF</li> <li>D-Lib\u2019s Intro to RDF</li> <li>W3C\u2019s RDF 1.1 Primer</li> <li>W3C\u2019s RDF 1.1 Concepts</li> </ul>"},{"location":"user-documentation/linked-data/#querying-linked-data-with-sparql","title":"Querying linked data with SPARQL","text":"<p>This section takes a look at SPARQL, the query language that allows you to ask linked data very specific questions. The queryable nature of linked data is one of the things that makes it so special. Try some SPARQL queries on DBpedia's endpoint to get some hands-on experience.</p> <ul> <li>Wikipedia article on SPARQL</li> <li>W3C\u2019s SPARQL 1.1 Overview</li> <li>W3C\u2019s SPARQL 1.1 Query Language</li> <li>DBpedia's SPARQL Endpoint</li> </ul>"},{"location":"user-documentation/linked-data/#rdf-serialization-formats","title":"RDF serialization formats","text":"<p>RDF data can be translated into many different formats. RDF/XML is the original way that RDF data was shared, but there are much more human-friendly serialization formats like Turtle which is great for beginners. JSON-LD is the easiest format for applications to use, and is the serialization format that Islandora uses internally. Make sure to check out the JSON-LD Playground for an interactive learning experience.</p> <ul> <li>Wikipedia article on Serialization</li> <li>W3C\u2019s RDF/XML Syntax Specification</li> <li>W3C\u2019s RDF 1.1 Turtle</li> <li>W3C\u2019s JSON-LD 1.0</li> <li>JSON-LD Website</li> <li>JSON-LD Playground</li> </ul>"},{"location":"user-documentation/linked-data/#ontology-and-vocabulary-basics","title":"Ontology and vocabulary basics","text":"<p>Ontologies and vocabularies are created by communities of people to describe things, and once created, anyone can use an ontology or vocabulary to describe their resources. This section goes over some of the more popular ontologies &amp; vocabularies in use.</p> <ul> <li>Wikipedia article on Ontologies</li> <li>W3C\u2019s description of Ontologies/Vocabularies (sameish thing)</li> <li>Wikipedia article on Friend of a Friend (FOAF) ontology</li> <li>FOAF 0.99 Vocabulary Specification</li> <li>Socially Interconnected Online Communities Ontology (SIOC)</li> <li>Dublin Core in RDF</li> </ul>"},{"location":"user-documentation/linked-data/#building-ontologies","title":"Building ontologies","text":"<p>One isn't limited to the ontologies &amp; vocabularies that already exist in the world, anyone is free to create their own. This section goes over ontologies that exist to help those trying to create their own ontologies.</p> <ul> <li>Wikipedia article on RDF Schema (RDFS)</li> <li>W3C\u2019s RDF Schema (RDFS) 1.1</li> <li>Wikipedia article on Simple Knowledge Organization System (SKOS)</li> <li>ALA\u2019s SKOS: A Guide for Information Professionals</li> <li>Wikipedia article on Web Ontology Language (OWL)</li> <li>W3C\u2019s OWL 2 Primer</li> <li>W3C\u2019s OWL 2 Quick Reference</li> </ul>"},{"location":"user-documentation/linked-data/#repository-specific-ontologies","title":"Repository-specific ontologies","text":"<p>Most ontologies are very specific to certain use cases, and digital repository systems are no different. This section covers ontologies that are of specific interest to users of Islandora, or any Fedora 4 based digital repository system.</p> <ul> <li>MODS RDF Namespace Document</li> <li>MODS RDF Ontology Primer</li> <li>MODS RDF Ontology Primer 2: MODS XML to RDF Conversion</li> <li>PREMIS RDF Namespace Document</li> <li>Linked Data Platform (LDP) 1.0 Primer</li> <li>LDP 1.0 Specification</li> <li>Portland Common Data Model (PCDM) wiki)</li> <li>PCDM ontologies list</li> <li>PCDM Models ontology (defines Collections, Objects &amp; Files)</li> <li>Fedora ontologies</li> </ul>"},{"location":"user-documentation/linked-data/#rdf-generation","title":"RDF generation","text":""},{"location":"user-documentation/linked-data/#summary","title":"Summary","text":"<p>In Islandora, the JSON-LD Module transforms nodes (or media, or taxonomy terms) into the RDF that is synced into Fedora and the Triplestore. It uses RDF mappings, a concept defined by the RDF Module, and exposes them through the REST API at <code>?_format=jsonld</code>.</p>"},{"location":"user-documentation/linked-data/#background","title":"Background","text":"<p>A quick overview of JSON-LD, the RDF module, and the REST API.</p>"},{"location":"user-documentation/linked-data/#the-json-ld-syntax","title":"The JSON-LD syntax","text":"<p>JSON-LD is a syntax which can be used to express RDF (like Turtle, or RDF XML), that is written in JSON, because devs like JSON and it's web-friendly. The JSON-LD syntax was designed for including Linked Data within HTML of web pages (similar to microdata or RDFa). Instead of nesting the RDF predicates within existing HTML tags as RDFa does, JSON-LD lets you put a solid blob of Linked Data inside a <code>&lt;script&gt;</code> tag. JSON-LD can also function as a standalone document, which is how we're using it.</p>"},{"location":"user-documentation/linked-data/#rdf-drupal-module","title":"RDF (Drupal Module)","text":"<p>The RDF Module is part of Drupal Core, but has no official documentation. The RDF Module embeds RDFa, a form of linked data, within the Drupal-generated HTML when you load the web page for a node, media, or taxonomy term. Official line is that this will allow Google to provide \"rich snippets\" such as star-ratings, contact info, and business hours. As an example of Drupal-provided RDFa:</p> <p><pre><code>&lt;h1 class=\"page-header\"&gt;\n&lt;span property=\"schema:title\"&gt;My cat&lt;/span&gt;\n&lt;/h1&gt;\n</code></pre> The <code>property=\"schema:title\"</code> is markup generated by Drupal's RDF module that identifies the value \"My cat\" as the schema.org <code>title</code> of this page. A node's fields (such as <code>field_tags</code>) and properties (such as <code>author</code>) can be mapped to RDF according to a bundle-specific \"mapping\" that is stored within Drupal. In Drupal8-ese, RDF mappings are configuration entities. Drupal doesn't have a good UI for editing RDF mappings, but you can create, read, and update them as YAML files using Drupal's Configuration Synchronization interface (see section below on How to Edit an RDF Mapping)..</p>"},{"location":"user-documentation/linked-data/#rest-api","title":"REST API","text":"<p>The pattern of using <code>?_format=</code> to get a different representation of content is provided by the RESTful Web Services (rest) module. It allows other services to interact with Drupal entities through HTTP requests (<code>GET</code>, <code>POST</code>, <code>PATCH</code>, and <code>DELETE</code>). Which operations are allowed, and with what formats (such as <code>xml</code>, <code>json</code>, and <code>jsonld</code>) is configured at <code>admin/config/services/rest/</code>. Note that only <code>jsonld</code> uses RDF mappings; the <code>json</code> and <code>xml</code> formats expose a structured object based on how Drupal sees the entity. Access to these alternate formats through the REST API corresponds to permissions on the entity, so anyone with <code>access content</code> permission can view the JSON-LD version of that content. This is new as of Drupal 8.2.</p> <p>For more information on interacting with Drupal entities via REST requests, see An Introduction to RESTful Web Services in Drupal 8.</p>"},{"location":"user-documentation/linked-data/#json-ld-module","title":"JSON-LD module","text":"<p>Using the RDF mapping configurations provided by the RDF module, the JSON-LD Module exposes the RDF-mapped entity in JSON-LD, through the REST API, at <code>node/[nid]?_format=jsonld</code> (for nodes; for media and terms, at <code>media/[mid]?_format=jsonld</code> and <code>taxonomy/term/[tid]?_format=jsonld</code>).</p> <ul> <li>The JSON-LD module will only work with mappings that include a value under <code>types</code> (which maps to <code>rdf:type</code> - see below, under Structure of an RDF Mapping).</li> <li>The JSON-LD module provides a hook so other modules can alter the entity before it gets mapped. The <code>islandora</code> module uses this hook to trigger any \"Map URI to Predicate\" and \"Alter JSON-LD Type\" reactions that are configured in Contexts. The Islandora Starter Site provides two Contexts - \"All Media\" and \"Content\" - that configure these to occur on Media and Repository Item nodes.</li> <li>The JSON-LD module adds RDF datatypes to the RDF values, and includes a mapping of Drupal field types to RDF datatypes.</li> <li>The JSON-LD module provides a hook to alter its Drupal field type to RDF datatype mapping.</li> <li>The JSON-LD module has a configuration option that can cause the <code>?_format=jsonld</code> to be part of, or not part of, the URIs of Drupal objects. On an out-of-the-box islandora-playbook, this string is stripped, but by default on a fresh install of the jsonld module, it is not.</li> </ul>"},{"location":"user-documentation/linked-data/#sample-json-ld","title":"Sample JSON-LD","text":"<pre><code>{\n\"@graph\":[\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/8\",\n\"@type\":[\n\"http:\\/\\/pcdm.org\\/models#Object\"\n],\n\"http:\\/\\/purl.org\\/dc\\/terms\\/title\":[\n{\n\"@value\":\"lasmomias de uninpahu\",\n\"@language\":\"fa\"\n}\n],\n\"http:\\/\\/schema.org\\/author\":[\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/en\\/user\\/1\"\n}\n],\n\"http:\\/\\/schema.org\\/dateCreated\":[\n{\n\"@value\":\"2019-06-04T14:32:05+00:00\",\n\"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime\"\n}\n],\n\"http:\\/\\/schema.org\\/dateModified\":[\n{\n\"@value\":\"2019-06-04T17:02:51+00:00\",\n\"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime\"\n}\n],\n\"http:\\/\\/purl.org\\/dc\\/terms\\/description\":[\n{\n\"@value\":\"mpermmbklmh\",\n\"@language\":\"fa\"\n}\n],\n\"http:\\/\\/purl.org\\/dc\\/terms\\/created\":[\n{\n\"@value\":\"2015-10-15\",\n\"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\"\n},\n{\n\"@value\":\"2015-10-15\",\n\"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#date\"\n}\n],\n\"http:\\/\\/purl.org\\/dc\\/terms\\/extent\":[\n{\n\"@value\":\"1 item\",\n\"@type\":\"http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string\"\n}\n],\n\"http:\\/\\/pcdm.org\\/models#memberOf\":[\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/7\"\n}\n],\n\"http:\\/\\/purl.org\\/dc\\/terms\\/type\":[\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3\"\n}\n],\n\"http:\\/\\/purl.org\\/dc\\/terms\\/subject\":[\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27\"\n}\n]\n},\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/en\\/user\\/1\",\n\"@type\":[\n\"http:\\/\\/schema.org\\/Person\"\n]\n},\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/node\\/7\",\n\"@type\":[\n\"http:\\/\\/pcdm.org\\/models#Object\"\n]\n},\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3\",\n\"@type\":[\n\"http:\\/\\/schema.org\\/Thing\"\n]\n},\n{\n\"@id\":\"http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27\",\n\"@type\":[\n\"http:\\/\\/schema.org\\/Thing\"\n]\n}\n]\n}\n</code></pre>"},{"location":"user-documentation/linked-data/#rdf-mappings","title":"RDF mappings","text":"<p>If using the Islandora Starter Site, the RDF mappings are set in the config files with names like rdf.mapping.[...].yml. The starter site config files will override configs set by modules. If you are building a site from scratch (not using the Islandora Starter Site, there are relevant configs in the following folders:</p> <ul> <li><code>[drupal modules directory]/islandora/modules/islandora_core_feature/config/install/</code> (media and taxonomy terms)</li> <li><code>[drupal modules directory]/controlled_access_terms/modules/controlled_access_terms_defaults/config/install/</code> (the default <code>corporate_body</code>, <code>family</code>, <code>geo_location</code>, <code>person</code>, <code>resource_type</code> and <code>subject</code> vocabularies)</li> <li><code>[drupal web root]/core/profiles/standard/config/install/</code> (articles, pages, comments, and tags).</li> </ul> <p>Once loaded by modules, configuration .yml files are not live so editing them will not change the existing configuration. However, for modules that are Features, it is possible to re-import the changed configuration files at <code>admin/config/development/features</code> (todo: link to further reading on Features).</p>"},{"location":"user-documentation/linked-data/#how-to-edit-an-rdf-mapping","title":"How to edit an RDF mapping","text":"<p>Once loaded, RDF mappings can be customized for the needs of a particular site through Drupal's Configuration Synchronization UI at <code>admin/config/development/configuration</code>. They can be exported, modified, and re-imported one-at-a-time by choosing the \"Single Item\" option on the Export/Import tabs.  You can also create new RDF mappings (e.g. for a custom content type) and load them through this interface, by copying an existing mapping and changing the appropriate values.</p> <p>Contributed module for RDF Mappings</p> <p>A custom module <code>rdfui</code> exists, and is installed-but-not-enabled on boxes provisioned by the islandora-playbook. We don't use it because it is very rudimentary and limited to the schema.org vocabulary. We have an open ticket to develop a UI to support RDF mappings to any ontology. Contributions welcome.</p> <ul> <li>A number of namespaces such as <code>ldp</code>, <code>ebucore</code>, <code>pcdm</code>, are <code>premis</code> are registered in <code>islandora.module</code> using <code>hook_rdf_namespaces()</code>. To register your own namespaces, you will need to create a custom module that implements that hook.</li> <li>If you import a configuration that uses a namespace that is not registered, bad things will happen silently.</li> </ul>"},{"location":"user-documentation/linked-data/#structure-of-an-rdf-mapping","title":"Structure of an RDF mapping","text":"<p>Below is an example of an RDF mapping as a .yml (YAML) file. It is the RDF mapping (current at time of writing) of the Repository Item (<code>islandora_object</code>) bundle, provided by the Islandora Starter Site and exportable as <code>rdf.mapping.node.islandora_object.yml</code>).</p> <ul> <li>The top level key <code>types</code> specifies the <code>rdf:type</code> of the resource or content model. <code>field_model</code>, a required field of Islandora objects, also gets mapped to <code>rdf:type</code> through an arcane back-end process.</li> <li>The top level key <code>fieldMappings</code> specifies fields attached to that bundle and their RDF property mappings. One field can be mapped to more than one RDF property. It is a simple flat list.</li> </ul>"},{"location":"user-documentation/linked-data/#mapping-types","title":"Mapping types","text":"<p><code>mapping_type:</code>: There are several mapping types which are provided out of the box. - <code>rel</code> - standing for relationship, expresses a relationship between two resources - <code>property</code> - the default, or if a relationship is not provided, expresses the relationship between a resource and some literal text.</p>"},{"location":"user-documentation/linked-data/#datatype-callbacks","title":"Datatype callbacks","text":"<p><code>datatype_callback</code>: This is a custom function that transforms the output of the field. There are some provided to us by Drupal and some added by Islandora, such as: - <code>Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value</code> which converts dates to ISO format - <code>Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough</code> which converts a referenced entity to the URI on the entity (which is configurable with the <code>link_field</code> argument An example usage of the <code>Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough</code> is as follows: <pre><code>field_subject:\n    properties:\n      - 'dcterms:subject'\n    datatype_callback:\n      callable: 'Drupal\\jsonld\\EntityReferenceConverter::linkFieldPassthrough'\n      arguments:\n        link_field: 'field_authority_link'\n</code></pre> Which would convert a reference to the subject's taxonomy term entity to a reference to the URI provided in <code>field_authority_link</code> of that subject's taxonomy term entity.</p>"},{"location":"user-documentation/linked-data/#sample-rdf-mapping","title":"Sample RDF mapping","text":"<pre><code>langcode: en\nstatus: true\ndependencies:\n  config:\n    - node.type.islandora_object\n  module:\n    - node\nid: node.islandora_object\ntargetEntityType: node\nbundle: islandora_object\ntypes:\n  - 'pcdm:Object'\nfieldMappings:\n  field_alternative_title:\n    properties:\n      - 'dc:alternative'\n  field_edtf_date:\n    properties:\n      - 'dc:date'\n    datatype_callback:\n      callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value'\n  field_edtf_date_created:\n    properties:\n      - 'dc:created'\n    datatype_callback:\n      callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value'\n  field_edtf_date_issued:\n    properties:\n      - 'dc:issued'\n    datatype_callback:\n      callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value'\n  field_description:\n    properties:\n      - 'dc:description'\n  field_extent:\n    properties:\n      - 'dc:extent'\n  field_identifier:\n    properties:\n      - 'dc:identifier'\n  field_member_of:\n    properties:\n      - 'pcdm:memberOf'\n    mapping_type: rel\n  field_resource_type:\n    properties:\n      - 'dc:type'\n    mapping_type: rel\n  field_rights:\n    properties:\n      - 'dc:rights'\n  field_subject:\n    properties:\n      - 'dc:subject'\n    mapping_type: rel\n  field_weight:\n    properties:\n      - 'co:index'\n  title:\n    properties:\n      - 'dc:title'\n  created:\n    properties:\n      - 'schema:dateCreated'\n    datatype_callback:\n      callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value'\n  changed:\n    properties:\n      - 'schema:dateModified'\n    datatype_callback:\n      callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value'\n  uid:\n    properties:\n      - 'schema:author'\n    mapping_type: rel\n</code></pre>"},{"location":"user-documentation/media/","title":"Media","text":"<p>Drupal 8 recognizes files (such as images, audio files, video files, etc.) but wraps each file in an intermediate structure called a \"media\" to allow us to attach fields to files. Drupal uses a media's fields to store information about the media's file, such as file size, width and height (for images), alt text (for images), creation date, and so on.</p> <p>Compared to Islandora Legacy</p> <p>In Islandora Legacy, this sort of technical metadata would have been stored as datastream properties or as additional metadata-specific datastreams. In Islandora, each datastream holds its technical metadata using an associated media entity.</p> <p>Fedora will store the media's file as a binary resource and use the media's properties as the binary resource's description.</p> <p>For example, creating a media with a file named <code>test.jpg</code> (in November 2019) will create a Fedora binary resource of the file accessible at <code>/fcrepo/rest/2019-11/test.jpg</code> with the media's fields accessible at <code>/fcrepo/rest/2019-11/test.jpg/fcr:metadata</code>.</p>"},{"location":"user-documentation/media/#media-types","title":"Media types","text":"<p>Islandora Core Feature and the Islandora Starter Site make use of the media types provided by the Standard Drupal installation (Video, Audio, etc). The file extensions allowed by each media type have been configured at the Drupal level. It is possible to create your own media types, and/or to edit the allowed field types and functionality of the existing media types. However, with Islandora Starter Site, the Image media type only allows .png, .gif, .jpg or .jpeg files. Many large images such as TIFFs (.tiff files) and JP2s (.jp2) must be added in the File media type instead of Image.</p>"},{"location":"user-documentation/media/#media-revisions","title":"Media revisions","text":"<p>The metadata associated with a file can be updated by clicking the Edit tab while on the media's page and clicking Save.</p> <p>The Create new revision checkbox is selected by default which will prompt Fedora to make a new version of the media's metadata before updating its resource record. A message can be added to the revision which is stored in Drupal but is not currently saved in Fedora.</p>"},{"location":"user-documentation/media/#using-the-media-form-to-replace-an-existing-file-does-not-behave-as-expected","title":"Using the Media form to replace an existing file does not behave as expected.","text":"<p>The media edit form allows a user to remove a file and replace it with a new one. However, because of the relationship Islandora creates between a file and its media, the effects of removing a file and uploading a new one are not intuitive.</p> <p>First, the remove button removes the file's reference on the media but does not delete the file, which, if in Fedora, will remain in Fedora.</p> <p>Second, because Drupal does not want users to reuse a file path uploading a file, even with the same name in the same month, Drupal will rename the file for you. This will result in a new binary resource in Fedora, rather than replacing the existing resource, so the file's URI in Fedora will change</p> <p>Third, the metadata synced from the Media into Fedora at [old Fedora URI]/fcr:metadata will remain in Fedora, but the metadata in the Media will also be synced into Fedora at [new Fedora URI]/fcr:metadata. There will be no way for the metadata in Fedora describing the file at the old Fedora URI to be edited.</p> <p>Removing Media with Actions</p> <p>To completely delete a file and its metadata from Fedora and Drupal, run the \"Delete media and file(s) action\" after selecting the Media in the general media list (/admin/content/media). This will cause the paths to the file and its metadata in Fedora to return 404s.</p> <p>Replacing Media via REST</p> <p>It is possible to use Islandora's REST interface to replace Media and Files.  </p>"},{"location":"user-documentation/media/#media-ownership","title":"Media ownership","text":"<p>Islandora objects can have any number of media associated with them. Media store a reference to the resource node they belong to using a special field, \"Media Of\". By changing this field's value, you can change which resource node owns the media, and therefore, where it gets displayed or managed.</p> <p>Compared to Islandora Legacy</p> <p>The direction of the relationship between objects and datastreams is reversed when compared to Islandora 7.  Generally speaking, objects are unaware of their datastreams, and it's a Drupal view that lists datastreams for an object.</p>"},{"location":"user-documentation/media/#media-use","title":"Media use","text":"<p>Islandora media express their intended use with a special \"Media Use\" field, which accepts taxonomy terms from the \"Media Usage\" vocabulary. Because the Media Usage vocabulary is an ordinary Drupal vocabulary, Islandora site administrators can create additional terms, and in turn, these local terms can be used to identify media that have some custom local purpose. However, most of the default set of \"Media Use\" terms are taken from the PCDM Use Extension vocabulary:</p> <p></p> <p>Compared to Islandora Legacy</p> <p>Terms from the Media Usage vocabulary are very similar to DSIDs in Islandora Legacy.  The only difference is that a DSID is immutable, but a media's usage can be changed at any time through the media's edit form.</p>"},{"location":"user-documentation/media/#derivatives","title":"Derivatives","text":"<p>Islandora generates derivatives based on the Media Use term selected for a Media and the Model of the node that owns it.  All of this is configurable using Context.</p> <p>By default, derivatives are generated from Media with the \"Original Files\" term selected. When an Original File is uploaded, if the node that owns it has an \"Image\" model, image derivatives are created.  If it's a \"Video\", then video derivatives are generated, etc...</p> <p>By default, derivatives are created with a path determined by the current year, current month, the associated resource node' identifier assigned by Drupal, and the type of derivative. For example, a resource node found at <code>node/2</code> with a service file media generated in October 2019 will have the path \"2019-10/2-Service File.jpg\". Naming conventions can be configured by editing each derivative action's File path settings.</p> <p></p> <p>Within a node's media tab, you can see all of its media, including derivatives, listed along with their usage. For example, from the Original File, a lower quality \"Service File\" and a smaller \"Thumbnail Image\" file were generated.</p> <p></p> <p>For more information on how to configure derivatives, see the section on Context.</p>"},{"location":"user-documentation/media/#multi-file-media","title":"Multi-File Media","text":"<p>An alternate method of using Media to store files and derivatives is known as \"multi-file\" or multifile media. This method allows a single resource node to have multiple \"Original Files\" or \"Preservation Masters\". This method was implemented by UPEI's Research Data Management project, to represent datasets that may include multiple important files that require equal preservation treatment and derivatives (such as a spreadsheet and accompanying data dictionary), while being described by a single set of descriptive metadata.</p> <p>There are no multi-file media bundles that currently ship with Islandora. The following recipe describes how to set up multi-file media:</p> <ol> <li>On an existing or new Media bundle that already has a main storage field (e.g. field_media_image or field_media_audio_file), add additional fields to hold derivatives. They need to be \"File\"-type fields. The field names should indicate the \"Media use\". Set up as many as you need, for example, Thumbnail, Service File, Extracted text, etc. Note that the \"Media Use\" field is no longer relevant for multi-file media bundles, as a single media instance of this type contains all \"Media Uses\" (e.g. derivatives) in different fields.</li> <li>Create a derivative Action that uses one of the two existing multi-file media base actions: \"Generate a Derivative File For Media Attachment\" or \"Generate a Derivative Image For Media Attachment\". This is where you configure which queue it goes to (which derivative-creating program runs), which field the resulting file ends up in, and potentially which additional arguments to pass to the microservice.</li> <li>Configure Contexts to trigger the Action to create derivatives. If using a combination of standard and multi-file media in your repository, ensure the Contexts include appropriate filtering Conditions. Add a Derivative reaction and select the Action you created in the previous step.</li> <li>Configure your resource node to display its (potentially multiple) files as desired. This may involve creating a view of media attached to the current node, and displaying the Service File (or Thumbnail, etc.) field of the media, then setting the view block to appear on the node page.</li> </ol> <p>A video tutorial explaining how to configure multi-file Media is available under the following URL: https://www.youtube.com/watch?v=3U6tBvD8oJY</p>"},{"location":"user-documentation/metadata-harvesting/","title":"Metadata harvesting","text":""},{"location":"user-documentation/metadata-harvesting/#oai-pmh","title":"OAI-PMH","text":"<p>The Open Archives Initiative Protocol for Metadata Harvesting, commonly referred to as OAI-PMH, is a specification for exposing repository metadata for harvesting. OAI-PMH specifies six services which can be invoked over HTTP(s). The full specification details the services:</p> Service URL on localhost:8000 Identify http://localhost:8000/oai/request?verb=Identify ListMetadataFormats http://localhost:8000/oai/request?verb=ListMetadataFormats ListSets http://localhost:8000/oai/request?verb=ListSets GetRecord http://localhost:8000/oai/request?verb=GetRecord&amp;metadataPrefix=oai_dc&amp;identifier=oai:localhost:node-1 ListIdentifiers http://localhost:8000/oai/request?verb=ListIdentifiers&amp;metadataPrefix=oai_dc ListRecords http://localhost:8000/oai/request?verb=ListRecords&amp;metadataPrefix=oai_dc <p>These services are provided by the OAI-PMH Drupal REST OAI-PMH module Drupal module. The Islandora Starter Site provides some default configuration so that repository content can be harvested. This configuration used to be part of Islandora OAI-PMH, a submodule of Islandora Defaults.</p> <p>For OAI-PMH functionality, the Islandora Starter Site provides:</p> <ul> <li>a View (\"OAI-PMH\") that defines sets of objects for exposure at the oai_dc endpoint. By default,:<ul> <li>there is one set per \"Collection\" object containing that object's children</li> <li>there is one set of all Repository Item objects that are not members of any Collection, and are not themselves Collections.   </li> <li>disabled by default, there is a set of all Repository Item objects that are not Collections.</li> </ul> </li> <li>Default configuration (at <code>/admin/config/services/rest/oai-pmh</code>) to connect this view with the REST OAI-PMH module.</li> <li>the ability to define additional sets by building additional views. Additional sets can be created by making views with the Entity Reference view display mode and enabling them on the REST OAI-PMH configuration page: /admin/config/services/rest/oai-pmh.</li> </ul> <p>The REST OAI-PMH module indexes (caches) set membership, so new Items may not appear immediately in their respective sets. Indexing will happen automatically during cron runs but can be triggered manually at <code>/admin/config/services/rest/oai-pmh/queue</code>.</p>"},{"location":"user-documentation/metadata-harvesting/#oai-dc-metadata-formatmetadata-mappings","title":"OAI-DC Metadata Format/Metadata Mappings","text":"<p>The OAI-PMH module makes use of one of two modules to provide metadata mappings: the RDF module or the Metatag module. By configuring OAI-PMH to use the RDF module (appears as \"OAI Dublin Core (RDF Mapping)\" and is enabled by default in the Islandora Starter Site), the OAI-PMH module will use the RDF mapping as configured for your content type (the same mapping that is used for Fedora and Blazegraph, e.g. rdf.mapping.node.islandora_object.yml). </p> <p>However,</p> <ul> <li>any field mappings that are not part of the Dublin Core namespace will be filtered out.</li> <li>any field mappings using Dublin Core Terms (e.g. http://purl.org/dc/terms/extent) will be mapped to their Dublin Core Elements equivalents (e.g. http://purl.org/dc/elements/1.1/format)</li> <li>the ability to vary the mappings in Typed Relation fields by relationship, used in JSON-LD mappings to Blazegraph and Fedora, is not available. If you want to expose data in a Typed Relation field to OAI-PMH, you must provide a DC mapping for that field in the RDF mapping. By default, the Repository Item RDF mapping does not include a mapping for the Contributors field (field_linked_agent).</li> </ul> <p>Field values not showing up in OAI-DC record?</p> <p>If you want the value of a field to be emitted in the OAI-DC record, you must assign a Dublin Core predicate for that field in your content type's RDF mapping. If you are wondering why a field is not showing up in the OAI-DC record, the content type's RDF mapping is the first thing to check.</p> <p>The REST OAI-PMH module does not support metadata formats other than OAI-DC, but it supports some alternate methods of defining mappings to OAI-DC. Consult that module's documentation for more information.</p>"},{"location":"user-documentation/metadata-harvesting/#creating-additional-metadata-formats","title":"Creating additional metadata formats","text":"<p>This involves creating a new plugin.</p> <p>The Drupal rest_oai_pmh module's DefaultMap plugin provides a basic model to follow for creating a plugin.</p> <p>Exact implementation of your plugin will depend on your data model. The rest_oai_pmh module by default expects a flat list of fields and field values to output. This means that if your data model uses anything like Typed Relation field types, Paragraphs, or other complex nested entity modeling, you will need to add custom logic to build the values to emit via OAI-PMH for those fields.</p>"},{"location":"user-documentation/metadata/","title":"Metadata in Islandora","text":"<p>Metadata vs Fields in the Starter Site</p> <p>To learn about the default out-of-the-box metadata fields, see Starter Site Metadata Configuration. This page describes technical details about how metadata is handled as fields in Drupal and provides a deeper understanding of, and tools for modifying, your metadata configuration.</p> <p>1-minute synopsis: In Islandora, metadata is stored in Drupal, in fields attached to entities (nodes or media). This allows us to interact with metadata (add, edit, remove, display, index in a search engine...) almost entirely using standard Drupal processes. If exporting this metadata to Fedora and/or a triplestore, the values are serialized to RDF using mappings that can be set for each bundle.</p> <p>Drupal 8 Terminology</p> <p>In Drupal 8, Fields can be attached to bundles (sometimes called entity sub-types -- e.g. Content types, Media types, Vocabularies) or entities (e.g. Users). For more on Fields, see \"2.3 Content Entities and Fields\" and \"6.3 Adding Basic Fields to a Content Type\" in the Official Drupal Guide.</p> <p>As described in the resource nodes section, Islandora digital objects are comprised of Drupal nodes for descriptive metadata, Drupal media for technical metadata, and Drupal files for the binary objects. This section describes how Islandora uses and extends Drupal fields to manage descriptive metadata.</p>"},{"location":"user-documentation/metadata/#content-types","title":"Content Types","text":"<p>In Drupal, Nodes come in different subtypes called Content Types. These let you define a type of content (\"Article\" and \"Basic Page\" are Drupal defaults and \"Repository Item\" is an Islandora specific example), the set of metadata fields that are attached to that content, and how those fields can be edited and displayed. Each content type is essentially a metadata profile that can be used for a piece of web content, or to describe a digital resource. You can create your own content types for your Islandora project or use a pre-defined one like Repository Item from the Islandora Starter Site. We will go over the metadata specific aspects of Content Types below, but see our tutorial for a fuller walk-through of creating a content type.</p> <p>Not all content types in your Drupal site need be Islandora Resource Nodes. Making a content type a Resource Node will associate Islandora specific behaviours (such as syncing to Fedora or causing derivatives to be generated) with it. The decision to make a content an Islandora resource node is left to the discretion of the site manager. In Islandora, a \"resource node\" is usually considered a descriptive record for \"a thing\", and is conceptually similar to an \"Islandora Object\" in 7.x, i.e. a \"Fedora Object\" in Fedora 3.x and below. Read more on configuring a content type to be treated as a Resource Node.</p>"},{"location":"user-documentation/metadata/#fields","title":"Fields","text":"<p>The administrator will define the fields that are associated with a specific content type . The same fields can be applied to different content type , but the field display and editing configurations are unique to each content type. The names and definitions of these fields are specific to Drupal and do not have to correspond to an outside metadata schema. You will give each field a Label, Machine Name, and a specific Field Type, like Text, Integer, EDTF, or Entity Reference (see below). Specific to the Field Type you will then define the maximum length of the field, the number of values it can contain, and what taxonomies it might link to.</p> <p>Fields can be added under Administration &gt;&gt; Structure &gt;&gt; Content types &gt;&gt; Your Content Type's Name &gt;&gt; Manage fields (/admin/structure/types/your_type/fields). This tab will list all Fields, their Label, Machine Name, Field Type, and give you the option to make what edits to the definition of that field that you can.</p> <p>Certain decisions must be made when fields are created, and before any content is added, because they can not be changed later. Field Type can not be changed, so you wouldn't be able to change a text field to a taxonomy field after creation. The field's machine name also can't be changed. The number of values allowed in a field or its maximum length or type of item to reference (in the case of Entity reference fields) can not be changed after content has been added. You can, however, always add new fields to a content type, even after content has been added.</p> <p>7.x Migration Note: What About My MODS XML?</p> <p>Even when using the Islandora Starter Site, there is no \"official\" metadata schema in Islandora. Where Islandora 7.x used MODS, and took advantage of its hierarchical/extensible structure, Drupal Fields are a flat structure working with distinct, individual elements. You can base your fields on those in MODS, or any other schema, but that structure is up to you. The Metadata Interest Group has developed a sample MODS-Drupal-RDF mapping, which provides a structure upon which you can build your Drupal fields. It is used by the Repository Item content type in the Islandora Starter Site.</p> <p>you cannot change the Content Type of a node</p> <p>Once a node is created, its content type cannot be changed. Just as you are unable to change many aspects of a Field once it has been created, once a node has been created it is now permanently of that content type and the fields associated with it. At that point your only option would be to create a new node of the intended content type, map the field values (programmatically or by copy-paste), and update any media or children that refer to the old node to refer to the new one.</p> <p>The Islandora Starter Site provides a Repository Item content type that can be used as a structure to build your collection around, or it can be used as a sample to see how fields in content types work. It pre-defines fields, including Alternative Title and Date Issued that could be of use in many digital repositories. The full list of fields and their field types can be seen in the screenshot below.</p> <p></p> <p>Titles Aren't Conventionally-Configurable Fields</p> <p>The field title is built-in to each content type by default, and can be referenced in views, templates, and indexing like other fields, but it cannot be configured like other fields. The only aspect you can change about title is its label. It has a built-in maximum length of 255 characters which cannot be changed. If your content requires longer titles we recommend you create a separate \"long_title\" field to store the full title and reserve the default title field for a display title. There is a contributed module called Node Title Length, which allows an administrator to configure the length of the title field in the core node table. However, this only works on nodes (not media or other entities) and involves meddling in a core Drupal database schema, which makes some people uneasy.</p>"},{"location":"user-documentation/metadata/#content-entry-formmanage-form-display","title":"Content Entry Form/Manage Form Display","text":"<p>After creating the Fields for a content type you'll be able to manage the form used by content creators to create Nodes of that content type. On the Manage form display tab you'll be able to edit this form by arranging the order of the fields, choose what Widget will define the entry options for a field, and then set certain settings for that Widget. Fields are arranged by dragging the cross to the left of the Label. They can also be removed from the form, but not the content type, by dragging them to the bottom of the list under the Disabled heading. Widgets are defined by Field Type, so an Entity reference field could use auto complete, a select list, or even checkboxes, and are chosen from a drop-down list. The widget settings are accessed through the gear on the far right of a row and may allow you to set the size of an entry field, whether the field Label is displayed, or if you use placeholder text.</p>"},{"location":"user-documentation/metadata/#content-displaymanage-display","title":"Content Display/Manage Display","text":"<p>The Manage display tab is where you will make decisions about how to display the metadata. Order is arranged as above, and can again be dragged to the Disabled section to hide the field from display. You can choose whether a field's label is displayed above the value, in-line, or hidden.</p>"},{"location":"user-documentation/metadata/#vocabularies","title":"Vocabularies","text":"<p>See also: MIG Presentation on Taxonomies by Kristina Spurgin, 2021-07-19</p> <p>In Drupal, Taxonomy Vocabularies (or simply Vocabularies) are also entity subtypes that define a set of fields and their configurations. Whereas instances of content types are called nodes, items in a vocabulary are called taxonomy terms (or simply terms). Traditionally, taxonomy terms are used to classify content in Drupal. For instance, the Article content type includes a field <code>field_tags</code> that can refer to terms in the Tags vocabulary.</p> <p>There are two ways that users can interact with taxonomies: they can be \"closed,\" e.g. a fixed list to pick from in a dropdown, or \"open,\" e.g. <code>field_tags</code> where users can enter new terms, which are created on the fly. This is not set on the vocabulary itself, but in the configuration of the field (typically on a node). Terms within vocabularies have an ordering, and can have hierarchical structure, but do not need to.</p> <p>Islandora (through the Islandora Core Feature) creates the 'Islandora Models' vocabulary which includes the terms 'Audio', 'Binary', 'Collection', 'Compound Object', 'Digital Document', 'Image', 'Newspaper', 'Page', 'Paged Content', 'Publication Issue', and 'Video'. Islandora Starter Site provides contexts that cause certain actions (e.g. derivatives to happen, or blocks to appear) based on which term is used.</p> <p>The Controlled Access Terms module provides additional vocabularies:</p> <ul> <li>Corporate Body</li> <li>Country</li> <li>Family</li> <li>Form</li> <li>Genre</li> <li>Geographic Location</li> <li>Language</li> <li>Person</li> <li>Resource Types</li> <li>Subject</li> </ul> <p>Each of these vocabularies has its own set of fields allowing repositories to further describe them. The Repository Item content type has fields that can reference terms in these vocabularies. See 'Entity Reference fields' in the 'Field Types' section below.</p> <p>The vocabularies provided by default are a starting point, and a repository administrator can create whatever vocabularies are desired.</p> <p>Large Taxonomy Vocabularies</p> <p>The Drupal Taxonomy UI is known to break down when your vocabularies get large (e.g. over 20,000 terms). Jonathan Hunt created the CCA Taxonomy Manager module for SFU to solve this problem.</p>"},{"location":"user-documentation/metadata/#field-types","title":"Field Types","text":"<p>Fields are where descriptive and administrative metadata about Drupal entities is stored. There are different types of fields including boolean, datetime, entity reference, integer, string, text, and text_with_summary. These field types also have widgets (controlling how data is entered) and formatters (controlling how data is displayed). The Drupal 8 documentation on FieldTypes, FieldWidgets, and FieldFormatters includes a list of the core field types with brief definitions, along with a list of core widgets and formatters. Custom field types can be created to represent data in ways not provided by these core options.</p> <p>More field types, formatters, and widgets are available in various modules. For example, the controlled_access_terms module provides two additional field types designed specifically for use with Islandora: ETDF, and Typed Relation. These and the Entity Reference field type are described in more detail below, since they are of particular interest for Islandora users.</p>"},{"location":"user-documentation/metadata/#authority-link","title":"Authority Link","text":"<p>The Authority Link data type configures fields to hold two associated values:</p> <ul> <li>An external source authority (selected from a pre-configured list of external authority options).</li> <li>A link for a specific term from the selected external source authority.</li> </ul> <p>Within Islandora, this data type is used by a metadata field in Taxonomy Vocabularies called Authority Sources to capture equivalent representations of terms from external authority sources.</p> <p>Tip</p> <p>The term external authority source refers to both controlled vocabularies like Art &amp; Architecture Thesaurus or FAST as well as Name Authority Files like Library of Congress Name Authority File or VIAF.</p> <p>For instance, if you are creating a term called Red squirrels within the default Taxonomy Vocabulary Subject, you may want to include the URI for Tamiasciurus from the FAST (Faceted Application of Subject Terminology) vocabulary. If you configured the field Authority Sources to list FAST (Faceted Application of Subject Terminology) as an external source authority option, you can select this source and add the associated URI (http://id.worldcat.org/fast/1142424).</p> <p></p>"},{"location":"user-documentation/metadata/#configurations-for-authority-sources-field","title":"Configurations for Authority Sources field","text":"<p>Each Taxonomy Vocabulary can have different external source authority options for its Authority Sources field. To configure the Authority Sources field to change these options, navigate to Home--&gt;Administration--&gt;Structure--&gt;Taxonomy--&gt;Edit Taxonomy Vocabulary Name--&gt;Taxonomy Vocabulary Name and select \"Edit\" for the Authority Sources field. Then enter your options in the Authority Sources text box, entering one value per line in the format key|label. The key is the stored value (typically an abbreviation representing the authority source). The label will be used in displayed values and editing forms.</p> <p></p> <p>By default, this field is repeatable. To change this, edit the \"Field settings\" and change Allowed numbers of values from \"Unlimited\" to \"Limited\" and enter the number of allowable values. This will apply to every instance of the Authority Sources field across your Taxonomy Vocabularies. You cannot change the repeatability of Authority Sources after data has been entered in the field.</p>"},{"location":"user-documentation/metadata/#entity-reference","title":"Entity Reference","text":"<p>Entity Reference fields are a special type of field built into Drupal core that creates relationships between entities. The field's configuration options include (but are not limited to):</p> <ul> <li>Which kind of entity can be referenced (only one type of item to reference can be defined per field)</li> <li>The allowed number of values (limited or unlimited)</li> <li>Whether to use Views for filtering</li> <li>Whether to allow users to create new referenced entities while inputting data, if they don't already exist</li> </ul> <p>The Repository Item content type, provided by the Islandora Starter Site, includes several entity reference fields that reference vocabularies defined by the islandora and controlled_access_terms modules.</p>"},{"location":"user-documentation/metadata/#configurations-for-entity-reference-field","title":"Configurations for Entity Reference field","text":"<p>The screenshots below show how you can configure an entity reference field (in this case the Subject field on the Repository Item content type).</p> <p>Tip</p> <p>Note that once the type of entity to reference has been defined, and data has been created, it cannot be changed.</p> <p>Storage settings for entity reference field where you set whether the field will reference content nodes or taxonomy terms:</p> <p></p> <p>Reference type settings for entity reference field where you select which vocabularies the autocomplete utility should query when editors are entering data:</p> <p></p> <p>Data Consistency</p> <p>Selecting which vocabularies can be referenced from an entity reference field only affects which vocabularies will be searched when a user types into the autocomplete field in the Drupal form for adding a new item. These settings do not impose constraints on the underlying database, so it is still possible to load references to other vocabularies without being stopped or warned when ingesting data through various migration methods.</p>"},{"location":"user-documentation/metadata/#edtf","title":"EDTF","text":"<p>The EDTF field type is defined in the controlled_access_terms module, and designed for recording dates in Extended Date Time Format, which is a format based off of the hyphenated form of ISO 8601 (e.g. 1991-02-03 or 1991-02-03T10:00:00), but also allows expressions of different granularity and uncertainty. The Default EDTF widget has a validator that only allows strings that conform to the EDTF standard. The Default EDTF formatter allows these date strings to be displayed in a variety of human-readable ways, including big- or little-endian, and presenting months as numbers, abbreviations, or spelling month names out in full. Close review of the EDTF Specifications is recommended when configuring this field type.</p> <p>Endianness</p> <p>Big-endian = year, month, day. Little-endian = day, month, year. Middle-endian = month, day, year.</p> <p>Known EDTF Bug</p> <p>When configuring the EDTF widget for a field in a content type, you can choose to allow date intervals (aka date ranges), but doing this prevents the widget from accepting values that include times. (The EDTF standard states that date intervals cannot contain times, but the field should be able to accept either a valid EDTF range or a valid EDTF datetime, so this is a bug.)</p> <p>Example of valid inputs in a multivalued EDTF Date field (including the seasonal value 2019-22 as defined in the EDTF specification): </p> <p>Example of the same EDTF dates displayed using little-endian format: </p> <p>EDTF field values cannot include textual representations of dates, as shown below in this example of a valid EDTF value ('1943-05') and an invalid value ('May 1943') with the corresponding error message. Use the formatter configurations detailed further below to achieve textual display of dates. </p>"},{"location":"user-documentation/metadata/#configuration-for-the-default-edtf-widget","title":"Configuration for the Default EDTF Widget","text":"<p>This configuration can be set per field by clicking the gear icon next to any field defined with EDTF field type at Administration &gt;&gt; Structure &gt;&gt; Content types &gt;&gt; Repository Item &gt;&gt; Manage form display (admin/structure/types/manage/islandora_object/form-display)</p> <p></p> <p>Configuration options include strictness level of date validation, allowing date intervals and allowing date sets. </p>"},{"location":"user-documentation/metadata/#configuration-for-the-default-edtf-formatter","title":"Configuration for the Default EDTF Formatter","text":"<p>This configuration can be set per field by clicking the gear icon next to any field defined with EDTF field type at Administration &gt;&gt; Structure &gt;&gt; Content types &gt;&gt; Repository Item &gt;&gt; Manage display (admin/structure/types/manage/islandora_object/display)</p> <p></p> <p>Example of how the EDTF formatter settings can change the display of an EDTF value: </p>"},{"location":"user-documentation/metadata/#configuration-for-indexing-and-sorting-edtf-fields-in-search-results","title":"Configuration for indexing and sorting EDTF fields in search results","text":"<p>By default, EDTF date values are indexed in Solr as string values. The entered value (not the displayed value) is indexed.</p> <p>Solr</p> <p>The Solr string data type requires the full field value to match the query in order to count as a match. This means that searching for 2014 will not retrieve a record where the recorded date value is 2014-11-02.</p> <p>EDTF date fields may be configured as sort fields in your search results Views. By default, this results in a simple ordering by the literal EDTF date string.</p> <p>An EDTF date field with multiple or unlimited number of allowed values may be set as a sort field. In this case, the first occurrence of the field value is used as the sorting value.</p>"},{"location":"user-documentation/metadata/#typed-relation","title":"Typed Relation","text":"<p>The Typed Relation field is defined in the controlled_access_terms module, is an extension of Drupal's Entity Reference field type, and allows the user to qualify the type of relation between the resource node and other entities, such as taxonomy terms. For example, it enables the inclusion of a resource's contributor's (assuming contributor names are modelled as taxonomy terms or some other Drupal entities) as well as their roles (such as \"author\", \"illustrator\", or \"architect\") in the resource node itself. Using only Drupal's Entity Reference fields, we would need individual fields for \"author\", \"illustrator\", \"architect\", and any other roles that may need to be made available. Using a Typed Relation field, we can have one Entity Reference field for \"Contributors\" and let the user pick the affiliated role from a predefined dropdown list.</p> <p>Typed relation name</p> <p>The parts of a field are called properties, so 'entity reference' and 'relation type' are properties of the Typed Relation field type.</p>"},{"location":"user-documentation/metadata/#configurations-for-the-typed-relation-field","title":"Configurations for the Typed Relation field","text":"<p>The Islandora Starter Site includes a Typed Relation field labelled 'Contributors' as part of the Repository Item content type, and populates the available relations from the MARC relators list. This field was formerly called \"Linked Agent\". </p> <p>The list of available relations for this Contributors field is configurable at '/admin/structure/types/manage/islandora_object/fields/node.islandora_object.field_linked_agent'.</p> <p>Typed relation tradeoffs</p> <ul> <li>If you apply this field to another content type, you can define unique relations available for that instance of the field.</li> <li>However, multiple instances of this field means administrative overhead to maintain the separate lists of relations defined for each instance.</li> </ul> <p>Publishers</p> <p>Until Mar 2024, the Islandora Starter Site included publishers in the Contributors (<code>field_linked_agent</code>) field. The MIG made the decision to make publisher its own text field, in order to make it easier to separate publishers from other contributors, and to prevent clutter in the linked taxonomies. Publishers are often recorded by transcribing what is on the item, rather than formatting the name per Authority rules, so variations on a single name are expected. </p> <p>Relations are defined in the format key|value, and the key is used in the RDF mapping (see below).</p> <p></p> <p>By default, facets can be created for typed relation fields that will facet based on the linked entity alone, not separating references based on the relationship type.</p>"},{"location":"user-documentation/metadata/#adding-a-new-field","title":"Adding a new field","text":"<p>You are free to add new fields to your Islandora content type(s). After you set one up, you may want to configure the following:</p> <ul> <li>Form Display - set the field to display (or not) in your form, and set its widget, at  Administration &gt;&gt; Structure &gt;&gt; Content types &gt;&gt; [Your Content Type] &gt;&gt; Manage form display. You can also set it to display (or not) to certain users based on Field permissions at Administration &gt;&gt; Structure &gt;&gt; Content types &gt;&gt; [Your Content Type] &gt;&gt; Manage fields &gt;&gt; [Your new field].</li> <li>Display - set the field to display (or not) to the public at Administration &gt;&gt; Structure &gt;&gt; Content types &gt;&gt; [Your Content Type] &gt;&gt; Manage display. You can also set it to display or not to certain users based on Field permissions at Administration &gt;&gt; Structure &gt;&gt; Content types &gt;&gt; [Your Content Type] &gt;&gt;  Manage fields &gt;&gt; [Your new field].</li> <li>Solr - Solr configuration is set at Administration &gt;&gt; Configuration &gt;&gt; Search and metadata &gt;&gt; Search API &gt;&gt; [Default Solr content index] &gt;&gt; Fields. By default, Solr indexes the \"Rendered Item\" using the display mode \"Search index\". By default, the \"Search index\" display mode is not configured separately, so it renders using the \"Default\" display mode which is the default (or only) tab when configuring Display, above. This means that if you configured your new field to display, then it will be automatically available to fulltext search. But if you want to make a facet, or a fielded search (using Advanced Search), then you need to index the field separately, as either String (for a facet) or fulltext (for a fielded search). To do this, use the \"+ Add field\" button in the Solr configuration and select your field, under the \"Content\" section. If it is a reference field (such as a taxonomy term field or a related item field) then you may want to \"dive down\" using the \"(+)\" buttons to index the name or title of the referenced entity.</li> <li>Facet - to make a facet, index the field as a string field (above). Then, create the facet at  Administration &gt;&gt; Configuration &gt;&gt; Search and metadata &gt;&gt; Facets. Finally, configure the facet to display by placing the corresponding block in the desired region.</li> <li>Fielded Search - to make your new field one of the drop-downs in the Advanced Search block, first index it in Solr as fulltext (as above). Find the Advanced Search block and click \"Configure\" and then drag and drop your new field into the non-hidden section. Save the block config.</li> <li>RDF - In the following section (\"Getting Metadata into Fedora and a Triple-Store\") we discuss how to index a field using Drupal's RDF mappings. You will want to do this if you are using Fedora or a Triple-store, or if you are using RDF to generate OAI-PMH DC data.</li> <li>OAI-PMH MODS - if you are using OAI-PMH to generate MODS for each object, you can configure how this field displays by setting it in the appropriate View, by default \"OAI PMH Item Data\". After adding the field, give it a label that matches the <code>rest_oai_pmh</code> module's <code>templates/mods.html.twig</code>. For example, that template file includes <code>{{ elements.publisher }}</code> so the label in views needs to be exactly <code>publisher</code>. Save the View.</li> <li>Citation CSL Mapping - To let a new field be used in the creation of citations with Citation Select, navigate to the Citation CSL Settings (as of Citation Select version 2.0, this is at  Administration &gt;&gt; Configuration &gt;&gt; Citation Select Settings &gt;&gt; CSL Mappings. Select your new field where applicable.</li> </ul> <p>An example of this, in terms of config changes, is visible in the changeset of the Starter Site's 1.6.0 version for the Publisher field. However, pulling such a changeset is unlikely to work smoothly and it is recommended to set these configurations manually.</p>"},{"location":"user-documentation/metadata/#getting-metadata-into-fedora-and-a-triple-store","title":"Getting Metadata into Fedora and a Triple-store","text":"<p>Depending on the needs at your institution, you may or may not be using Fedora with your Islandora installation. You also may or may not be hoping to publish your metadata as RDF triples that can be queried in a triplestore. Both of these functionalities are driven by the JSON-LD module (written for Islandora), which provides a JSON-LD serialization of your content nodes, media nodes, as well as your taxonomy terms. This JSON-LD is what gets ingested by Fedora, and is also what is used to add RDF triples to the blazegraph triplestore if you choose to use that service.</p> <p>The JSON-LD serialization for an entity is available by appending <code>_format=jsonld</code> to the entity's URL. Below is an example JSON-LD document representing the RDF serialization of a Repository item node created in a standard islandora-playbook based vagrant VM:</p> <pre><code>{\n  \"@graph\":[\n    {\n      \"@id\":\"http://localhost:8000/node/1\",\n      \"@type\":[\n        \"http://pcdm.org/models#Object\"\n      ],\n      \"http://purl.org/dc/terms/title\":[\n        {\n          \"@value\":\"New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market]\",\n          \"@language\":\"en\"\n        }\n      ],\n      \"http://schema.org/author\":[\n        {\n          \"@id\":\"http://localhost:8000/user/1\"\n        }\n      ],\n      \"http://schema.org/dateCreated\":[\n        {\n          \"@value\":\"2019-03-14T19:05:24+00:00\",\n          \"@type\":\"http://www.w3.org/2001/XMLSchema#dateTime\"\n        }\n      ],\n      \"http://schema.org/dateModified\":[\n        {\n          \"@value\":\"2019-03-14T19:20:51+00:00\",\n          \"@type\":\"http://www.w3.org/2001/XMLSchema#dateTime\"\n        }\n      ],\n      \"http://purl.org/dc/terms/date\":[\n        {\n          \"@value\":\"1943-05\",\n          \"@type\":\"http://www.w3.org/2001/XMLSchema#string\"\n        },\n        {\n          \"@value\":\"1943-05\",\n          \"@type\":\"http://www.w3.org/2001/XMLSchema#gYearMonth\"\n        }\n      ],\n      \"http://purl.org/dc/terms/extent\":[\n        {\n          \"@value\":\"1 negative\",\n          \"@type\":\"http://www.w3.org/2001/XMLSchema#string\"\n        }\n      ],\n      \"http://purl.org/dc/terms/identifier\":[\n        {\n          \"@value\":\"D 630714\",\n          \"@type\":\"http://www.w3.org/2001/XMLSchema#string\"\n        }\n      ],\n      \"http://purl.org/dc/terms/type\":[\n        {\n          \"@id\":\"http://localhost:8000/taxonomy/term/11\"\n        }\n      ],\n      \"http://purl.org/dc/terms/rights\":[\n        {\n          \"@value\":\"No known restrictions. For information, see U.S. Farm Security Administration/Office of War Information Black &amp; White Photographs(http://www.loc.gov/rr/print/res/071_fsab.html)\",\n          \"@type\":\"http://www.w3.org/2001/XMLSchema#string\"\n        }\n      ],\n      \"http://purl.org/dc/terms/subject\":[\n        {\n          \"@id\":\"http://localhost:8000/taxonomy/term/26\"\n        }\n      ],\n      \"http://schema.org/sameAs\":[\n        {\n          \"@value\":\"http://localhost:8000/node/1\"\n        }\n      ]\n    },\n    {\n      \"@id\":\"http://localhost:8000/user/1\",\n      \"@type\":[\n        \"http://schema.org/Person\"\n      ]\n    },\n    {\n      \"@id\":\"http://localhost:8000/taxonomy/term/11\",\n      \"@type\":[\n        \"http://schema.org/Thing\"\n      ]\n    },\n    {\n      \"@id\":\"http://localhost:8000/taxonomy/term/26\",\n      \"@type\":[\n        \"http://schema.org/Thing\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>The RDF mapping for a content type, media type, or vocabulary defines how fields in Drupal are mapped to properties in the JSON-LD serialization. The mapping defines the RDF predicates that should be used for each field. You reference Drupal fields via their Machine Name, and the RDF predicate by using the conventional syntax <code>namespace:predicate</code>. In this example, the <code>dc</code> prefix stands for <code>http://purl.org/dc/terms/</code>, so when concatenated the final RDF predicate is <code>http://purl.org/dc/terms/title</code>.</p> <p>To show a small example, the RDF mapping:</p> <pre><code>title:\n  properties:\n    - dc:title\n</code></pre> <p>will map the Repository item's title field to <code>http://purl.org/dc/terms/title</code>. As a result, the node's title value appears like this in the JSON-LD output:</p> <pre><code>\"http://purl.org/dc/terms/title\":[\n  {\n    \"@value\":\"New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market]\",\n    \"@language\":\"en\"\n  }\n],\n</code></pre> <p>Tip</p> <p>To set up prefixes for namespaces and see a list of available predefined namespaces, see the \"RDF Generation\" page.</p>"},{"location":"user-documentation/metadata/#typed-relation-fields-in-rdf","title":"Typed Relation fields in RDF","text":"<p>Unlike other fields, which can be assigned RDF predicates in RDF Mapping YAML files, a typed relation field uses a different predicate depending on the chosen type. These predicates are assigned using the 'keys' in the key|value configuration. The key must be formatted <code>namespace:predicate</code>, e.g. <code>relators:act</code>.</p> <p>Bug</p> <p>The Drupal RDF module is currently limited in the complexity of graph you can generate. All fields must be mapped directly to either a literal value, or a reference to another content type instance, media type instance, or taxonomy term instance. It is not currently possible to create blank nodes or skolemized nodes for nesting fields under more complex structures.</p>"},{"location":"user-documentation/metadata/#batch-editing-metadata-in-fields","title":"Batch editing metadata in fields","text":"<p>If you are editing multiple resources in order for them to have the same metadata value, the Views Bulk Edit module can help. Here is a video of creating a view using Views Bulk Operations to apply a subject term to multiple resources simultaneously.</p> <p>For more complex changes, or when the values need to differ for each value, an export-modify-reimport method may be needed. Use a view to export CSV or other structured data (including an identifier such as a node id), modify the values as necessary, then use migrate csv or Workbench to re-import and update the values.</p>"},{"location":"user-documentation/metadata/#exporting-data","title":"Exporting Data","text":"<p>One common approach for exporting your content and/or taxonomy data out of Islandora is to use Drupal's Views Data Export module. The module has extensions that can allow you to configure exports as CSV, XML, text files, and other formats based on your local needs.</p>"},{"location":"user-documentation/metadata/#drupal-bundle-configurations","title":"Drupal Bundle Configurations","text":"<p>In Islandora, content models are primarily created using content types (also known as node bundles) and media bundles. Bundles are defined by YAML configuration files. To create new content models, one would create the needed content types and media bundles via UI, then export the yml files related for those bundles using Configuration Synchronization (<code>http://localhost:8000/admin/config/development/configuration</code>) or Features. An understanding about the structure of a bundle and various configuration files used to define it helps in creating and updating it.</p> <p>Content types and media bundles can be thought of as web forms consisting of fields. Drupal provides widgets to define the behavior of a field and field storage to define how the data is stored in the database. Drupal provides various display modes to show the forms to user when they are editing (Manage form display) or viewing (Manage display).</p> <p>A content model is packaged as a module for installation. All yml files are put in <code>config/install</code> folder of the module. Note that not all content models would contain media bundles.</p> <p>The following files define the bundles themselves. It contains some metadata about the bundle and lists its dependencies. <pre><code>node.type.your_content_type.yml\nmedia_entity.bundle.your_media_bundle.yml\n</code></pre></p> <p>The following files define the fields attached to the bundle forms. There must be one config file for each field in your bundle, except for the default drupal fields. <pre><code>field.field.node.your_content_type.field_name1.yml\nfield.field.node.your_content_type.field_name2.yml\n...\nfield.field.media.your_media_bundle.field_name1.yml\nfield.field.media.your_media_bundle.field_name2.yml\n</code></pre></p> <p>If the new bundle contains new fields, then field storage configurations for the newly created fields would be needed as well. Note that if you reused existing fields, storage definitions should not be defined again. Storage config contains information about the number of values allowed for that field (cardinality). <pre><code>field.storage.node.field_new_name3.yml\nfield.storage.media.field__new_name3.yml\n</code></pre></p> <p>There is a configuration file for each combination of bundle / display mode when managing form displays. Usually, form displays will have <code>default</code> and <code>inline</code> modes. <pre><code>core.entity_form_display.media.your_media_bundle.default.yml\ncore.entity_form_display.media.your_media_bundle.inline.yml\n---\ncore.entity_form_display.node.your_content_type.default.yml\ncore.entity_form_display.node.your_content_type.inline.yml\n</code></pre></p> <p>There is a configuration file for each combination of bundle / display mode when managing displays. Usually, displays will have <code>default</code> and <code>teaser</code> modes for content types and <code>default</code> and <code>content</code> modes for media bundles. <pre><code>core.entity_view_display.media.your_media_bundle.default.yml\ncore.entity_view_display.media.your_media_bundle.content.yml\n---\ncore.entity_view_display.node.your_content_type.default.yml\ncore.entity_view_display.node.your_content_type.teaser.yml\n</code></pre></p> <p>In addition, Islandora needs an RDF mapping to express the content in RDF and to sync to fedora. There will be one RDF mapping per bundle. <pre><code>rdf.mapping.media.your_media_bundle.yml\nrdf.mapping.node.your_content_type.yml\n</code></pre></p>"},{"location":"user-documentation/multilingual/","title":"Multilingual","text":"<p>Islandora enables you to build full-fledged multilingual repositories leveraging the multilingual support provided by Drupal core modules. The multilingual content gets indexed into Fedora repository as well as the Triplestore (Blazegraph), and can be queried using the SPARQL endpoint. In this guide, we will describe the steps needed to set up a basic multilingual Islandora site.</p>"},{"location":"user-documentation/multilingual/#drupal-concepts","title":"Drupal Concepts","text":"<p>Drupal allows you to translate user interface text, configuration text, and content. See section 2.7 of the Drupal documentation for details.</p>"},{"location":"user-documentation/multilingual/#islandora-configuration","title":"Islandora Configuration","text":"<p>Islandora enables Drupal's Language and Content Translation modules by default. Drupal provides additional modules for multilingual support, for instance for translating the built-in user interface or editable interface text.</p>"},{"location":"user-documentation/multilingual/#adding-languages","title":"Adding Languages","text":"<p>From the top menu, go to Configuration &gt;&gt; Regional and language &gt;&gt; Languages. Add a language.</p> <p></p>"},{"location":"user-documentation/multilingual/#adding-language-switcher","title":"Adding Language switcher","text":"<p>You can place the default language selector block to switch between languages. To create the language switcher block go to Structure &gt;&gt; Block layout. Click Place block in a region of your choice. Search for <code>Language switcher</code> block and click <code>Place block</code>.</p> <p></p> <p>You can place the language switcher block in different regions of the user interface. You might have to customize the theme to style the language switcher block.</p> <p></p>"},{"location":"user-documentation/multilingual/#adding-multilingual-menus","title":"Adding Multilingual Menus","text":"<p>From the top menu, go to Configuration &gt;&gt; Regional and language &gt;&gt; Content language and translation. Check <code>Custom menu link</code> under <code>Custom language settings</code>. Scroll down to <code>Custom menu link</code> section and check all the relevant fields and Save the configurations. Clear the cache (Configuration &gt;&gt; Development &gt;&gt; Performance).</p> <p>From the top menu, go to Structure &gt;&gt; Menu. Edit \"Main navigation\" menu. Default home menu item cannot be translated due to this issue. Disable that menu item. Click <code>Add link</code> to create a new menu item. Provide a menu title (i.e. Home) and input <code>&lt;front&gt;</code> for the link field. Save. Right-click on the Operations beside the new menu link and click the Translate button. Translate the menu link title for the language added above and save.</p> <p>Go back to home. The language switcher will enable you to switch the language/content of the menu and content.</p>"},{"location":"user-documentation/multilingual/#adding-a-multilingual-repository-item","title":"Adding a Multilingual Repository Item","text":"<p>From the top menu, go to Content &gt;&gt; Add content &gt;&gt; Repository item. Provide the required fields and save the object. Click the Translate tab of the object, provide a title in the second language and fill any translatable fields (i.e description). Add the media for the object. Media objects can be translated similar to the repository item node.</p> <p>Go back to home, you should be able to view content in the language selected in the language switcher.</p>"},{"location":"user-documentation/multilingual/#field-label-translations","title":"Field Label Translations","text":"<p>If you need the field labels of the repository Item displayed in a different language, additional configuration is needed. The Drupal module <code>Configuration translation</code> module in the core needs to be enabled. Note that this will enable the module <code>User Interface translation</code> as well.</p> <p>Each field label needs to be translated through the Drupal GUI (Configuration &gt;&gt; Regional and Language: User interface translation). Alternatively, you can import existing translations, or translations generated with an external translation editor (for example Gtranslator). Go to <code>Interface translation import</code> (Configuration &gt;&gt; Regional and Language: User interface translation &gt;&gt; Import tab). Set the <code>Treat imported strings as custom translations</code> option, select the import file, the target language, and click import. Clear the cache to see the changes. An example second language display is shown below.</p> <p></p>"},{"location":"user-documentation/multilingual/#fedora-representation","title":"Fedora Representation","text":"<p>Islandora indexes the multilingual metadata values in Fedora as RDF literals using language tags. An example representation is shown below.</p> <p></p>"},{"location":"user-documentation/multilingual/#triplestore-representation","title":"Triplestore Representation","text":"<p>Islandora indexes the multilingual metadata values in Blazegraph as RDF literals using language tags. An example representation is shown below.</p> <p></p> <p>You can query the result and filter the results by a specific language. For example, to get all titles and filter by language, the following query can be used:</p> <pre><code>PREFIX dcterm: &lt;http://purl.org/dc/terms/&gt;\nselect ?s ?o {\n  ?s dcterm:title ?o\nFILTER (lang(?o) = 'ta')\n}\n</code></pre>"},{"location":"user-documentation/multilingual/#further-reading","title":"Further Reading","text":"<ul> <li>Multilingual guide</li> </ul>"},{"location":"user-documentation/paged-content/","title":"Paged Content","text":"<p>Paged content, such as books, periodicals, photographs with the front and back, etcetera,  can use the membership structure provided by Islandora, namely, <code>field_member_of</code>. This involves creating a resource node for the root record (i.e. the entire book or the photograph) and child resource nodes for each sub-component (e.g. \"Page 1\", \"Page 2\", etc., or \"recto\" and \"verso\") with their corresponding media. Each \"child\" resource node contains a reference to their \"parent\" resource node using the <code>field_member_of</code> property.</p> <p>Child v. Member</p> <p>Islandora uses the \"child\" and \"member\" descriptor for resource nodes that store a reference to another resource node in the \"Member Of\" field interchangeably. Administrators will more often see the \"member\" terminology more often while front-end users will usually see \"child\" terminology.</p> <p>Similar to the collection view showing members of a collection, Islandora provides  taxonomy terms Paged Content and Page in the Islandora Model vocabulary, that can be used to trigger paged content behaviors. Islandora Starter Site provides a Context for Paged Content resource nodes to trigger displaying a Mirador viewer showing the child resource nodes' service files.</p> <p>To enable this, use Paged Content for the Islandora Model of the parent resource node and Page for the Islandora Model of the child resource node. After the child resource nodes have \"service file\" media (either generated via the built-in derivative creation or added manually), they will be included in the Mirador paginated viewer displayed on the parent resource node's page. (See the IIIF Documentation for more details on controlling the viewer's behavior.)</p> <p></p> <p>However, repository managers can use any method they like, such as a Views-based list of teasers, a gallery, or a slide-show to display child resource nodes.</p>"},{"location":"user-documentation/paged-content/#ordering-weight","title":"Ordering (weight)","text":"<p>By default, child resource nodes are un-ordered. To order the subcomponents of a paged content resource node, Islandora provides a Weight field to store an integer value on  child resource nodes. Children resource nodes with smaller weight values will float to the top and come before child resource nodes with heavier weight values.</p> <p>Weight values do not need to be sequential, just ordered from smallest to largest. For example, the first child resource node can have a value of <code>10</code> and the next could have a value of <code>20</code> and they will be ordered accordingly. Should a new child be added with the weight value of <code>15</code> it will automatically be sorted after the child with the weight value <code>10</code> and before the child with the weight value <code>20</code>.</p> <p>Child resource nodes can be reordered using a drag-and-drop interface by clicking on the Re-order Children button on the Children tab of the parent resource node.</p> <p></p> <p>Re-ordering children resource nodes on this page and clicking Save will cause each child resource node's weight value to be updated using sequential values.</p> <p></p> <p>Why not Drupal's book or weight modules?</p> <p>Drupal provides the book module in core for creating multi-level ordered content, such as books and manuals. However, this module stores structure and pagination separately from the nodes making serializing these relationships as RDF we can provide to Fedora more difficult than simply using <code>field_member_of</code> with an RDF mapping. Support for the book module may be added in the future.</p> <p>Drupal also has a weight module that provides a weight field and a drag-and-drop reordering user-interface. However, this module requires users to set a specified range of values which includes their negative corresponding value. E.g. a range setting of '20' will require all children to have a value between '-20' to '20'. This presumes a repository manager can predict how many pages the largest paged content item in their repository will be beforehand. Also, these weight values are serialized into RDF using the Collections Ontology 'index' predicate which assumes positive integer values which cannot be guaranteed using the weight module.</p>"},{"location":"user-documentation/paged-content/#adding-children","title":"Adding children","text":"<p>Islandora provides an interface on the Children tab to either Batch upload children or Add Child. Both methods will result in new resource nodes that are member of the current node. It is also possible to create child nodes separately, then edit their Member Of field to point to the desired parent.</p>"},{"location":"user-documentation/paged-content/#batch-upload-children","title":"Batch upload children","text":"<p>If you want to add a number of pages to this node, for example, the Batch Upload Children button may suit your needs. It allows you to upload multiple files, after selecting a content type for the child nodes and the media type and media use for the media that will hold the uploaded files. If selecting a node with the Model (<code>field_model</code>) field, it will also let you select a model from the Islandora Models vocabulary. These settings will apply to all nodes and media created for this batch.</p> <p> </p> <p>This method does not create full metadata for the child nodes. It uses the filename as the node title.  It also does not accept zip files; individual files must be uploaded. For more methods of bulk uploading content, see Islandora Workbench  and Migrate Islandora CSV</p>"},{"location":"user-documentation/searching/","title":"Setup and Configure Search","text":"<p>Islandora comes with the Drupal 8 Search API and SOLR modules enabled with a corresponding SOLR instance. This guide gives an overview to the setup provided by the islandora-playbook. Much more detail is available in the Search API documentation. Another helpful resource is Adam Fuch's \"Drupal 8 Custom Site Search with Search API\" (https://www.electriccitizen.com, 2018-01-10; last accessed 2019-03-08).</p>"},{"location":"user-documentation/searching/#indexing-islandora-with-solr","title":"Indexing Islandora with SOLR","text":"<p>To access the search indexing settings, log in as an administrator and navigate to  '/admin/config/search/search-api' or click Configuration and then Search API.</p> <p></p>"},{"location":"user-documentation/searching/#solr-server-configuration","title":"SOLR Server Configuration","text":"<p>On the Search API page, Use the Solr Server link to view the SOLR server's configuration and the Default Solr content index link to view or update the index settings. In most cases, where the site was built using Ansible, the Solr Server settings that were configured during installation should be left alone.</p>"},{"location":"user-documentation/searching/#solr-index-configuration","title":"SOLR Index Configuration","text":"<p>The Default Solr content index user interface is divided into four tabs: View, Edit, Fields, and Processors.</p>"},{"location":"user-documentation/searching/#view-tab","title":"View Tab","text":"<p>The 'View' tab gives an overview of the index and its status:</p> <ul> <li>Index status is a progress bar that indicates how many items have been indexed.</li> <li>Status allows you to enable/disable the index from being used.</li> <li>Datasource indicates what types of entities are being indexed and how many have.</li> <li>Tracker states which item tracker is being used.</li> <li>Server provides a link to the SOLR server's configuration page.</li> <li>Server index status is a count of the total number of items returned from an unfiltered empty search. Generally speaking, this should match the total number of items indexed. See the Drupal 8 Search API FAQ for more details.</li> <li>Cron batch size displays how many items will be indexed when Drupal's cron runs.</li> </ul> <p>The View tab also provides links to some common actions. Start Indexing Now allows you to start an indexing job for a specified number of items (default is 'all'). You can also specify how many items should be indexed in each batch (default is '50'). The other links allow a repository manager to queue all objects for reindexing, clear the index, or rebuild tracking information.</p>"},{"location":"user-documentation/searching/#edit-tab","title":"Edit Tab","text":"<p>The Edit tab allows repository managers to configure how the index works as a whole, including the Index name, the data sources \u2014 entity types \u2014 it can index (including which specific content types or taxonomies will be indexed), which server it is connected to, and other SOLR-specific options.</p> <p>Content (types) is the only data source enabled by default. Selecting Taxonomy term will enable searching taxonomies which is recommended if the repository uses taxonomies for subjects or other discovery points. Once the data sources are enabled a configuration box for each of them will appear in a section just below the list of data sources. This allows repository managers to select which content types (or taxonomy vocabularies) will be included in the index. By default, all the content types, and vocabularies if the taxonomy data source is enabled, are indexed.</p> <p>Defaults</p> <p>The defaults assume a repository is adding content using the web interface. If a repository manager plans on bulk-loading content they should disable the Index items immediately option in the expandable Index Options box and increase the 'Cron batch size' option.</p>"},{"location":"user-documentation/searching/#fields-tab","title":"Fields Tab","text":"<p>The Fields tab allows repository managers to select which fields will be indexed. The default set of fields enabled come from a standard Drupal installation and do not reflect the fields Islandora adds for 'Repository Item'. Repository managers need to add the fields necessary for their Islandora instance.</p> <p>To add a field, click the + Add fields button. A shadow-box will appear with a list of the fields available for the index.</p> <p>Some fields, such as the Body ('body') field provided by Drupal, have multiple properties which can be completely different values or variations on the same value. Click on the plus-sign next to the field to show the properties available to index. In most cases repository managers can ignore the properties list and click the Add button by the field to index the default property ('value'). Only select a different field property if you understand how it will impact user searching. Entity reference fields, such as Tags ('field_tags'), allow you to select fields or their properties from the referenced entity for indexing, such as a referenced taxonomy term's name field.</p> <p>Once the fields are added they can be configured further on the Fields tab, although the label, machine name, and type usually don't need to be changed. The 'Type' dropdown has several Full-text processing options available, which may be of interest. Each is described in the expandable Data Types box at the bottom of the page. The Boost setting allows repository managers to increase the weight of particular fields when calculating search relevancy.</p>"},{"location":"user-documentation/searching/#processors-tab","title":"Processors Tab","text":"<p>The Processors tab allows repository managers to adjust how data and search queries are processed to adjust results. The defaults are acceptable in most cases.</p>"},{"location":"user-documentation/searching/#indexing-edtf-dates","title":"Indexing EDTF Dates","text":"<p>EDTF date fields can be indexed in Solr in two primary ways, depending on your  requirements for sorting and faceting:</p> <p>1) EDTF Year Processor: There is a way to include a custom \"edtf year\" field containing the facets-friendly year (or year ranges) from one or more EDTF fields. This must first be enabled by checking \"EDTF Year\" under the Processors tab, then can be added on the Field tab (it'll be called \"EDTF Creation Date Year (edtf_year)\"), and finally can be configured as a facet. See \"How should this be tested\" on this pull request for instructions on setting it up.</p> <p>2) Using the EDTF Date Processor for Full Date Indexing: This allows full date indexing, supporting partial and multiple dates in Solr\u2019s native <code>DatePoint</code> format, enabling accurate sorting and filtering. To use this: enable \"EDTF Date Processor\" under the Processors tab, configure the processor settings and in the Fields tab, add the \"EDTF Dates (edtf_dates)\" field. See \"How should this be tested?\" on this pull request for instructions on setting it up.</p>"},{"location":"user-documentation/searching/#searching-islandora","title":"Searching Islandora","text":"<p>Searching using Search API in Drupal is done using Drupal Views. The Islandora Starter Site comes with a search page pre-configured (accessible at '/solr-search/content'). To edit the search page, navigate to '/admin/structure/views/view/solr_search_content'.</p> <p>Repository managers may want to change the URL used to access the page, add it to the site navigation, or add a search box. In the 'Page Settings' box in the middle of the page, click on the existing path to open a shadow-box with an edit field. Change the URL as desired, for example, to 'search' and click Apply. Then, click the No menu link just below it to open the menu settings shadow-box. Selecting 'Normal menu entry' will allow a repository manager to add a menu link text, description, and place it within the site menu tree (the default, <code>&lt;Main navigation&gt;</code> works for most sites). A search box can be added by expanding the Advanced options and changing the Exposed form in block setting and then use the Block Layout interface (found at '/admin/structure/block') to place the block where desired. After making changes to the View's settings, click the Save button to ensure the changes are not lost.</p> <p>Islandora's Repository Items are displayed in the search results as a fully rendered entity by default. Repository managers can choose which view mode should be used for each search datasource by clicking the Settings link next to the Show: setting under the Format section of the search view configuration page (shown in a red box in the screenshot below). The Teaser and Search result highlighting input are the two most likely options. Alternatively, repository managers can select specific fields to display instead by clicking the Rendered Entity link and changing it to Fields and then choosing which fields will be displayed in the Fields section underneath.</p> <p>Thumbnails</p> <p>thumbnails will not immediately be available using the Fields display option without more advanced configurations.</p> <p></p>"},{"location":"user-documentation/starter-site-metadata-configuration/","title":"Islandora Starter Site Metadata Configuration","text":""},{"location":"user-documentation/starter-site-metadata-configuration/#introduction","title":"Introduction","text":"<p>As described in Metadata In Islandora, in Islandora metadata is stored in Drupal, in fields attached to entities. Provided by the Islandora Starter Site, the \u201cRepository Item\u201d content type contains a set of default fields to describe the digital objects an Islandora repository might contain. This set of fields is based on MODS fields commonly used in Islandora 7, and is not intended to be \"the standard\" metadata profile, rather, a starting point for institutions designing their own repository.</p> <p>This page presents the primary descriptive and administrative metadata fields found in the Islandora Starter site. We will define each field and give its basic configuration. Most of these configurations can be customized after installation, and new fields can be added as per the needs of an individual institution. Fields are grouped in standard MODS order. </p> <p>Further information on the metadata configuration can be found in a Google Spreadsheet Islandora Starter Site Metadata Configuration (Google Sheets) which parallels the information on this page. It goes into further detail about the configurations connected to each field, provides information on taxonomies and mappings, and can be filtered or sorted in a variety of ways. The document, or the spreadsheet above, can be copied and used as a basis for planning your own configuration customizations as you work on your Islandora site.</p>"},{"location":"user-documentation/starter-site-metadata-configuration/#administrativesystem-fields","title":"Administrative/System Fields","text":"Title The name given to the resource. Title is a system field and as such its configurations can not be adjusted. It is the only field that is required by the system.             Machine Name      title             Drupal Field Type      Text (plain)             Required      yes        Maximum Length      255 (character length is set by system but can be changed with a contrib module, see below)        Repeatable      no             CSL Citation Mapping      title             RDF Mapping      dcterms:title             XPath MODS      mods/titleInfo/title             Transformation             To create a single string out of the subelements of &lt;titleInfo&gt;, we suggest to use the &lt;titleInfo&gt; section of the LOC MODS-DC transform https://www.loc.gov/standards/mods/v3/MODS3-5_DC_XSLT1-0.xsl. In words, it says to:       <ul> <li>Take the value of &lt;nonSort&gt;         <li>If there was a &lt;nonSort&gt;, add a space         <li>Add the value of &lt;title&gt;         <li>If there is a &lt;subtitle&gt;, add a space-colon-space and the value of (the first) &lt;subtitle&gt;         <li>If there is a &lt;partNumber&gt;, add a period-space and the value of (the first) &lt;partNumber&gt;         <li>           If there is a &lt;partName&gt;, add a period-space and the value of (the first) &lt;partName&gt;.           <p>             It is worth noting that the subtitle, partNumber, and partName elements are technically repeatable, but this transform only uses the first value encountered. If you have repeating subelements, information will be lost.                 Drupal Module Integration      The Title Length module allows you to extend the length of the title to 500 characters (possibly more).      The Views Natural Sort module allows you to sort a view by titles while skipping a configurable list of non-sorting characters (\"A\", \"The\", \"L'\", etc.). It's not as precise as nonSort, but does most of the job.              Alternatives      Paragraphs are a way to model a multi-part title (nonSort, title, subtitle, partName, partNumber, etc). Combine paragraphs with (automatic entity label? automatic nodetitles?) to not have to enter your title information twice. (Who to contact with experience about this?)      Member of This item's parent item in Islandora. Usually this will be a collection, book (\"Paged Content\"),or compound object.             Machine Name      field_member_of             Drupal Field Type      Entity reference             Required      no (will default to empty if no value is entered)        Repeatable      yes             Create Referenced Entities      no (can only be connected to existing entities)        Facet      Member Of             Alternatives      You could arrange your content with Entity Reference Hierarchy, which is a very scalable way of representing large hierarchy trees. However, you'd have to re-work a number of hard-coded elements in the islandora module.      Model        The internal-to-Islandora category of the resource. Affects how the item is displayed/viewed.       <p>         This field is actionable by Islandora and was designed to trigger derivatives and view modes through the use of Contexts. It is a controlled list and new values should only be added when required (i.e. new behaviors are made available and these values are created to trigger them).             Machine Name      field_model             Drupal Field Type      Entity reference             Required      yes        Repeatable      no             Taxonomies             Islandora Models (pre-populated/controlled) <ul> <li>Audio         <li>Binary         <li>Collection         <li>Compound Object         <li>Digital Document         <li>Image         <li>Newspaper         <li>Page         <li>Paged Content         <li>Publication Issue         <li>Video</li>        Create Referenced Entities      no             CSL Citation Mapping      type             Alternatives      You could model your different types as separate content types. This way, they could have different sets of metadata fields.      Representative Image Optionally, use this field to link to a Media that will be used as the node's thumbnail. This will be displayed when the DGI Image Discovery module is used. This field takes precedence over the node's \"Islandora thumbnail\" (i.e. a related media with the \"Thumbnail\" media use term). See the module's README for the full scope of how images are \"discovered\". This is a good way to assign a \"default\" icon for many nodes that don't have actual thumbnail images, as this field allows you to re-use Media, which you can't do with normal Islandora media.              Machine Name      field_representative_image             Drupal Field Type      Entity reference (Media)             Required?      no (will default to using the Islandora thumbnail if no value is entered)        Repeatable      no             Create Referenced Entities      yes (you can upload files to create and link to a new Media)        Facet      none             Alternatives      This field is itself an alternative to the \"normal\" Islandora thumbnail, and does not need to be used if the Islandora thumbnail suffices."},{"location":"user-documentation/starter-site-metadata-configuration/#other-titles","title":"Other Title(s)","text":"Full Title If the full resource title is longer than 255 characters and you truncated it in the required Title field above, record the full title here.             Machine Name      field_full_title             Drupal Field Type      Text (plain, long)             Required      no             Repeatable      no             RDF Mapping      rdau:P60515             XPath MODS      mods/titleInfo/title[1] + subfields[1] where [1] means first of their name (see possible concatenation under Title)             Alternatives      as mentioned under Title, the Title Length module extends the length of the title and could make this field irrelevant.      Alternative Title        Varying form of the title if it contributes to the further identification of the item.             Machine Name      field_alt_title             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dcterms:alternative      XPath For MODS      mods/titleInfo[@type=\"alternative\" or @type=\"abbreviated\" or @type=\"uniform\"]      Alternatives      If you need to keep the information about what type of alternative title is being recorded, you could create multiple specific alternative title fields, or create a compound element using Paragraphs."},{"location":"user-documentation/starter-site-metadata-configuration/#contributors","title":"Contributors","text":"Contributors (formerly Linked Agent)        Names of entities having some relationship to the resource, and, optionally, the relationship to the resource. If a relationship is not specified, it will be recorded as Associated Name in the system's linked data representation.       <p>         This field does not allow creating names of entities on the fly. First create a term in either the person, family, or corporate body taxonomies, then link it here.       <p>         Field name changed from \"Linked Agent\" 09/23.             Machine Name      field_linked_agent             Drupal Field Type      Typed Relation [link to https://islandora.github.io/documentation/user-documentation/metadata/#typed-relation]              Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Corporate Body; Family; Person             Create Referenced Entities      no             Relators      Starter Site includes 269 terms from the MARC Relators list. Further terms from the list, or custom terms, can be added in the configuration for this field. Publisher has been removed from this list to encourage use of the Publisher field.             CSL Citation Mapping      author ; contributor ; editor             Facet      Creators and Contributors             RDF Mapping      dcterms:contributor      XPath For MODS             mods/name/namePart + role/roleTerm &gt; relator       <p>         mods/name[@type=\"personal\"]/namePart &gt; \"Person\" taxonomy       <p>         mods/name[@type=\"corporate\"]/namePart &gt; \"Corporate Body\" taxonomy       <p>         mods/name[@type=\"family\"]/namePart &gt; \"Family\" taxonomy      Alternatives      Create custom facets using the \"Typed Relation filtered by type\" Search API processor. This would allow you to separate out, for instance, creator|author|photographer from the other types of relators as a Search API field/facet."},{"location":"user-documentation/starter-site-metadata-configuration/#type-and-genre","title":"Type and Genre","text":"Type The general nature or genre of the content of the resource. To describe the digital or physical format of the resource, use Form instead. In contrast with Model, which is system-actionable, this field is designed to record the Type purely as a metadata element.             Machine Name      field_resource_type             Drupal Field Type      Entity reference [link to https://islandora.github.io/documentation/user-documentation/metadata/#entity-reference        Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      no             Taxonomies      Resource Types (pre-populated with hierarchical LOC Resource Type Scheme terms)        Create Referenced Entities      no             Facet      Resource Type             RDF Mapping      dcterms:type      XPath For MODS      mods/typeOfResource, mods/typeOfResource[@collection=yes]      Alternatives      You may be required to use the Dublin Core types (for compatibility/harvesting); in that case you can replace the current Type vocabulary contents with the desired values.      Genre A term or terms that designate a category characterizing a particular style, form, or content, such as artistic, musical, literary composition, etc.             Machine Name      field_genre             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Genre             Create Referenced Entities      yes             CSL Citation Mapping      genre             RDF Mapping      dcterms:type      XPath For MODS      mods/genre; mods/subject/genre"},{"location":"user-documentation/starter-site-metadata-configuration/#origin-information","title":"Origin Information","text":"Place Published Plain text field to describe the place of publication in full or transcribed from an item \\       \\       See also the entity reference field Place Published Country.             Machine Name      field_place_published             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             CSL Citation Mapping      publisher-place             RDF Mapping      relators:pup      XPath For MODS      mods/originInfo/place/placeTerm [@type = 'text'] OR [not(@type)]      Country of Publication Entity reference field to singularly describe the country (or jurisdiction) of publication. Connected to the unpopulated Country taxonomy by default, which can be used for terms or codes from MARC Code List for Countries or elsewhere. Disabled, by default, on Metadata Display and Metadata Form.             Machine Name      field_place_published_country             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      no             Taxonomies      Country             Create Referenced Entities      no             RDF Mapping      relators:pup      XPath For MODS      mods/originInfo/place/placeTerm[@type=\"code\"]      Publisher New field added 04/2024. Previously the Contributors/Linked agent field (with a relator value of Publisher) was used for this content.             Machine Name      field_publisher             Drupal Field Type      Text (plain)             Required      no             Maximum Length      500             Repeatable      yes             CSL Citation Mapping      publisher             RDF Mapping      XPath For MODS      mods/originInfo/publisher"},{"location":"user-documentation/starter-site-metadata-configuration/#date-fields","title":"Date FieldsDate IssuedDate CreatedDate (Unspecified)Copyright DateDate ValidDate CapturedDate ModifiedEdition StatementMode of IssuanceFrequency","text":"<p>All date fields use the Drupal EDTF field type and must follow EDTF formatting. For more information on this format and how it works with Islandora see https://islandora.github.io/documentation/user-documentation/metadata/#edtf </p> Date of formal issuance of the resource. This includes publication dates.             Machine Name      field_edtf_date_issued             Drupal Field Type      EDTF             Required      no             Maximum Length      128             Repeatable      yes             CSL Citation Mapping      issued             Facet      Year (string converted to a simple year value for field_edtf_year and then used for Year facet. A range is converted to multiple years.)        RDF Mapping      dcterms:issued      XPath For MODS      mods/originInfo/dateIssued      Date of creation of the resource             Machine Name      field_edtf_date_created             Drupal Field Type      EDTF             Required      no             Maximum Length      128             Repeatable      yes             Facet      Year (string converted to a simple year value for field_edtf_year and then used for Year facet. A range is converted to multiple years.)        RDF Mapping      dcterms:created      XPath For MODS      mods/originInfo/dateCreated      A date without a type or relationship to the resource specified             Machine Name      field_edtf_date             Drupal Field Type      EDTF             Required      no             Maximum Length      128             Repeatable      yes             Facet      Year (string converted to a simple year value for field_edtf_year and then used for Year facet. A range is converted to multiple years.)        RDF Mapping      dcterms:date      XPath For MODS      mods/originInfo/dateOther      Date of copyright of the resource.             Machine Name      field_copyright_date             Drupal Field Type      EDTF             Required      no             Maximum Length      128             Repeatable      yes             Facet      Year (string converted to a simple year value for field_edtf_year and then used for Year facet. A range is converted to multiple years.)        RDF Mapping      dcterms:dateCopyrighted      XPath For MODS      mods/originInfo/copyrightDate      Date (often a range) of validity of a resource.             Machine Name      field_date_valid             Drupal Field Type      EDTF             Required      no             Maximum Length      128             Repeatable      yes             RDF Mapping      dcterms:valid      XPath For MODS      mods/originInfo/dateValid      The date on which the resource was digitized or a subsequent snapshot was taken.             Machine Name      field_date_captured             Drupal Field Type      EDTF             Required      no             Maximum Length      128             Repeatable      yes             RDF Mapping      premis:creation      XPath For MODS      mods/originInfo/dateCaptured      Date on which the original resource being represented in Islandora was changed. Typically modification dates of digital representations of the resource stored in Islandora will be recorded on the relevant Media instead of here. This field is not populated automatically by any Drupal functionality.        Machine Name      field_date_modified             Drupal Field Type      EDTF             Required      no             Maximum Length      128             Repeatable      yes             RDF Mapping      dcterms:modified      XPath For MODS      mods/originInfo/dateModified      Information identifying the version of the resource.             Machine Name      field_edition             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      rdau:P60329      XPath For MODS      mods/originInfo/edition      A term that designates how the resource is issued. MODS standards limit the values of this field to monographic, single unit, multipart monograph, continuing, serial, and integrating resource, but there are no such limitations in Islandora and the \u201cIssuance Mode\u201d vocabulary is empty on initial installation.             Machine Name      field_mode_of_issuance             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Issuance Mode             Create Referenced Entities      yes             RDF Mapping      rdau:P60051      XPath For MODS      mods/originInfo/issuance      The publication frequency, in textual form. Can be based on MARC Frequency terms.             Machine Name      field_frequency             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Frequency             Create Referenced Entities      yes             RDF Mapping      rdau:P60538      XPath For MODS      mods/originInfo/frequency"},{"location":"user-documentation/starter-site-metadata-configuration/#language","title":"Language","text":"Language        Language of the resource content. Can be based on a languages vocabulary such as ISO 639-2.MARC Code List for Languages.       <p> This field is not connected to Drupal system language fields or related to Drupal translation functionality.        Machine Name      field_language             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Language             Create Referenced Entities      yes             CSL Citation Mapping      language             RDF Mapping      dcterms:language      XPath For MODS      mods/language/languageTerm[@type = 'text'] or [@type = 'code'] mapped to text per iso639-2b"},{"location":"user-documentation/starter-site-metadata-configuration/#physical-description","title":"Physical Description","text":"Form The physical format of the original resource being described. If the resource is a physical object, the physical form is recorded here. If the resource is born-digital, the original digital form is recorded here. Details of the formats of resource representations stored in Islandora should be recorded on the relevant Media files.              Machine Name      field_physical_form             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Physical Form             Create Referenced Entities      yes             Facet      Physical Form             RDF Mapping      dcterms:format      XPath For MODS      mods/physicalDescription/form      Extent The size or duration of the resource in its original form. Extent of representations of the resource stored in Islandora should be recorded on the relevant Media files.             Machine Name      field_extent             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dcterms:extent      XPath For MODS      mods/physicalDescription/extent"},{"location":"user-documentation/starter-site-metadata-configuration/#descriptions","title":"Description(s)","text":"Description Description of the resource. Description may include but is not limited to: an abstract, a table of contents (alternately its own field), a graphical representation, or a free-text account of the resource.             Machine Name      field_description             Drupal Field Type      Text (plain, long)             Required      no             Repeatable      no             CSL Citation Mapping      abstract             RDF Mapping      dcterms:description      XPath For MODS      mods/abstract (xpath could also map to Abstract; do not map same values to both) Abstract Supplementary to the Description field, for including descriptions that more fit the definition of Abstract as it refers to ETDs, journal articles, or other scholarly publications.             Machine Name      field_abstract             Drupal Field Type      Text (formatted, long)             Required      no             Repeatable      no             RDF Mapping      dcterms:abstract      XPath For MODS      mods/abstract (xpath could also map to Description; do not map same values to both) Table of Contents Supplemental to Description, for breaking out specific Table of Contents information separate from a summary description of the object. Allows formatting.             Machine Name      field_table_of_contents             Drupal Field Type      Text (formatted, long)             Required      no             Repeatable      no             RDF Mapping      dcterms:tableOfContents      XPath For MODS      mods/tableOfContents      Note General textual information relating to a resource, not described in other fields.             Machine Name      field_note             Drupal Field Type      Text (formatted, long)             Required      no             Repeatable      yes             RDF Mapping      skos:note      XPath For MODS      mods/note (with [@displayLabel] or [@type] prepended with ': ' to the note)"},{"location":"user-documentation/starter-site-metadata-configuration/#subjects","title":"Subject(s)","text":"Subject        General subjects which may be constructed from topical, geographic, temporal, and genre subdivisions. If you wish to manage these types of subjects separately, use the more specific Subject fields below.       <p> <p>         This field can be used if you are storing composed subject strings rather than component headings/subdivisions in their own fields.             Machine Name      field_subject_general             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Corporate Body; Family; Geographic Location; Person; Subject             Create Referenced Entities      yes             Store New Items In      Subject             Facet      Subject             RDF Mapping      dcterms:subject      XPath For MODS      mods/subject      Subject (Topical) For use when using separate fields to record topical, geographic, name, and temporal terms. Topical subject terms would be recorded here.             Machine Name      field_subject             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Subject             Create Referenced Entities      yes             RDF Mapping      dcterms:subject      XPath For MODS      mods/subject/topic      Subject (Geographic) For use when using separate fields to record topical, geographic, name, and temporal terms. Geographic subject terms would be recorded here.             Machine Name      field_geographic_subject             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Geographic Location             Create Referenced Entities      yes             RDF Mapping      dcterms:spatial      XPath For MODS      mods/subject/geographic      Subject (Name) For use when using separate fields to record topical, geographic, name, and temporal terms. Names of individuals, organizations, or families would be recorded here.             Machine Name      field_subjects_name             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Corporate Body; Family; Person             Create Referenced Entities      yes             Store New Items In      Person             Facet      Subject (name)             RDF Mapping      dcterms:subject      XPath For MODS      mods/subject/name/namePart      Subject (Temporal) For use when using separate fields to record topical, geographic, name, and temporal terms. Temporal subject terms would be recorded here.             Machine Name      field_temporal_subject             Drupal Field Type      Entity reference             Required      no             Maximum Length      255 (system limit for Taxonomy terms)             Repeatable      yes             Taxonomies      Temporal Subjects             Create Referenced Entities      yes             CSL Citation Mapping             Facet      Temporal Subject             RDF Mapping      dcterms:temporal      XPath For MODS      mods/subject/temporal"},{"location":"user-documentation/starter-site-metadata-configuration/#coordinates","title":"Coordinates","text":"Coordinates Must be formatted either in decimal (51.47879) or sexagesimal format (51\u00b0 28' 43.644\")             Machine Name      field_coordinates             Drupal Field Type      Geolocation             Required      no             Repeatable      yes             RDF Mapping      dcterms:spatial      XPath For MODS      mods/subject/cartographics/coordinates      Coordinates (Text) A plain text field meant as an alternative to the Coordinates field, for values that do not meet the requirements of the Drupal geolocation field type.             Machine Name      field_coordinates_text             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dcterms:spatial      XPath For MODS      mods/subject/cartographics/coordinates"},{"location":"user-documentation/starter-site-metadata-configuration/#classification","title":"Classification","text":"Dewey Classification Classification based on the Dewey Decimal system.             Machine Name      field_dewey_classification             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dc11:subject      XPath For MODS      mods/classification[@authority=\"ddc\"]      Library of Congress Classification Classification based on the Library of Congress Classification system.             Machine Name      field_lcc_classification             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dc11:subject      XPath For MODS      mods/classification[@authority=\"lcc\"]      Classification (Other) Classification based on any system that does not have a dedicated field.             Machine Name      field_classification             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dc11:subject      XPath For MODS      mods/classification"},{"location":"user-documentation/starter-site-metadata-configuration/#identifiers","title":"Identifier(s)","text":"Identifier A unique standard number or code that distinctively identifies a resource.             Machine Name      field_identifier             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dcterms:identifier      XPath For MODS      mods/identifier[not(@type)]      ISBN An International Standard Book Number (ISBN) identifier.             Machine Name      field_isbn             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dbpedia:isbn      XPath For MODS      mods/identifier[@type=\"isbn\"]      OCLC Number An identifier assigned by an OCLC system, such as WorldCat.             Machine Name      field_oclc_number             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dbpedia:oclc      XPath For MODS      mods/identifier[@type=\"oclc\"]      Local Identifier Identifier from any locally managed system.             Machine Name      field_local_identifier             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      yes             RDF Mapping      dcterms:identifier      XPath For MODS      mods/identifier[@type=\"local\"]      PID        PID of this object in Islandora 7.x (applies to migrated objects only)       <p>         Disabled, by default, in Metadata Display.             Machine Name      field_pid             Drupal Field Type      Text (plain)             Required      no             Maximum Length      255             Repeatable      no"},{"location":"user-documentation/starter-site-metadata-configuration/#access-conditions","title":"Access Conditions","text":"Rights Free text field for information about restrictions imposed on, and/or rights to, access to a resource, particularly a digital resource. It is not connected to any access control functionality within Drupal.             Machine Name      field_rights             Drupal Field Type      Text (formatted, long)             Required      no             Repeatable      yes             RDF Mapping      dc11:rights      XPath For MODS      mods/accessCondition"},{"location":"user-documentation/transcripts/","title":"Transcripts","text":"<p>WEBVTT transcripts, captions, or subtitles may be displayed along with audio and video media. Transcripts must be added to the media entity that will be playing, using a special field type (\"Media track\"). When the media is configured to use the \"Audio with Captions\" and \"Video with Captions\" field formatters, tracks in \"Media track\" fields will be available.</p>"},{"location":"user-documentation/transcripts/#media-track-field-type","title":"Media track field type","text":"<p>The Islandora module provides a field type, Media Track, that accepts .vtt files. Once a file has been uploaded, additional options relevant to media tracks become available to configure.</p> <p></p>"},{"location":"user-documentation/transcripts/#using-transcripts-with-the-islandora-starter-site","title":"Using Transcripts with the Islandora Starter Site","text":"<p>In the Islandora Starter Site, Audio and Video media are pre-configured to work with tracks.</p> <p>Sandbox</p> <p>On the public sandbox, or other sites using the Islandora Install Profile Demo, you will first need to make the \"Track\" field visible in the media form, at Structure &gt; Media &gt; Audio|Video &gt; Manage Display.</p>"},{"location":"user-documentation/transcripts/#video","title":"Video","text":"<ul> <li>Navigate to the Service File media (or whichever media is configured to play) for a Video item.</li> <li>Click \"Edit\" to get to the Media's edit form.</li> <li>In the \"Track\" field, add one or more WebVTT files.</li> <li>Enter the details about each audio track.<ul> <li>Under \"Kind\", select \"Captions\" or \"Subtitles\". (Per the HTML standard, the others are valid track types but won't be played in the viewer)</li> <li>The \"Label\" will be visible by the user when they select a track to play.</li> </ul> </li> <li>Save the media and refresh it.</li> </ul>"},{"location":"user-documentation/transcripts/#audio","title":"Audio","text":"<ul> <li>Follow the same instructions as for Video.</li> <li>For audio, only upload one Track file (others will not be displayed).</li> <li>For audio, ensure that the Track file is marked \"Default track\" (otherwise it will not be displayed).</li> <li>For audio, the selected \"Kind\" of media track does not have any effect.</li> </ul>"},{"location":"user-documentation/transcripts/#caveats","title":"Caveats","text":"<p>Selecting the correct media</p> <p>Note that if you add the transcript file to the Original File, but you have configured the site to play the Service File, then you will not see the transcript.</p> <p>Languages</p> <p>While you can add subtitles in different languages, you may only choose from the site's installed languages.</p> <p>Types</p> <p>The five options: captions; subtitles; descriptions; chapters; and metadata come from the HTML standard's <code>&lt;track&gt;</code> element. As per their definitions, captions and subtitles will be displayed as optional text over the video, available through the usual [cc] icon in the viewer controls. Descriptions, chapters, and metadata will not be displayed as they are intended for programmatic use.</p>"},{"location":"user-documentation/transcripts/#tracing-the-components-of-this-feature","title":"Tracing the components of this feature","text":"Feature Component Source Define Field type \"Media track\" Islandora module Add \"Media track\" fields to audio and video media types Islandora Starter Site Define IslandoraFileMediaFormatterBase, which finds Media Track fields on media, and adds them as playable tracks Islandora module Define \"Audio with Captions\" field formatter, extending IslandoraFileMediaFormatterBase Islandora Audio Define \"Video with Captions\" field formatter, extending IslandoraFileMediaFormatterBase Islandora Video Select these field formatters for the Default and Source display modes for audio and video media Islandora Starter Site"},{"location":"user-documentation/uploading-large-files/","title":"Large Files","text":""},{"location":"user-documentation/uploading-large-files/#large-files-and-drupal","title":"Large Files and Drupal","text":"<p>If you want to upload large (&gt; 1GB) files, you'll need to tune the following settings in your  PHP config (the following assumes Apache and a config file <code>php.ini</code>):</p> <ul> <li><code>upload_max_filesize</code> \u2013 The maximum allowed upload file size.</li> <li><code>post_max_size</code> \u2013 The maximum allowed POST data size.</li> <li><code>max_input_time</code> \u2013 Maximum allowed input time.</li> <li><code>max_execution_time</code> \u2013 The maximum allowed time the scripts are allowed to run.</li> <li><code>default_socket_timeout</code> - Default timeout (in seconds) for socket based streams.</li> </ul> <p>However, large file transfer over HTTP still has a host of issues once you properly configure your server. Uploads are not resumable and subject to connectivity issues. If you really want to upload large files, you should consider some alternatives such as</p> <ul> <li>Using the TUS file upload protocol module, which will let you upload large files in forms.</li> <li>Using flysystem's ftp and sftp plugins to make files available if you can run an FTP server.</li> </ul>"},{"location":"user-documentation/uploading-large-files/#large-files-and-fedora","title":"Large Files and Fedora","text":"<p>If loading large (e.g. range 30-45 GB) files into Fedora, you may need to change the  <code>fcrepo.session.timeout</code> property, which defaults to 3 minutes (180,000 ms). Documentation is on the Properties page on the Fedora wiki.</p>"},{"location":"user-documentation/uploading-large-files/#large-files-and-fits","title":"Large Files and FITS","text":"<p>If using FITS, you may need to change the following in <code>/var/lib/tomcat9/webapps/fits/WEB-INF/classes/fits-service.properties</code>:</p> <pre><code># Maximum allowable size of uploaded file\nmax.upload.file.size.MB=2000\n# Maximum size of HTTP Request object. Must be equal to or larger than the value for max.upload.file.size.MB\nmax.request.size.MB=2000\n# Maximum size of an uploaded file kept in memory. Otherwise temporarily persisted to disk.\nmax.in.memory.file.size.MB=4\n</code></pre>"},{"location":"user-documentation/url-aliases/","title":"URL Aliases","text":"<p>A URL alias is an alternate URL pattern that resolves to a Drupal entity, such as a node, media, taxonomy term, or user. For example, you could set \"/welcome\" as an alias for \"/node/1\". Aliases are part of Drupal Core and can be extended by contrib modules. One such module is Pathauto, which  enables automatic alias generation based on patterns, and the patterns may involve \"Tokens\" (such as [node:title]). </p> <p>This page will attempt to cover the Islandora Starter Site's use of aliases and what we consider to be best practices. A full description of creating  and managing aliases is out of scope.</p>"},{"location":"user-documentation/url-aliases/#best-practices-with-url-aliases","title":"Best practices with URL aliases","text":"<p>While every site may choose to set up their aliases differently, we cannot prescibe a universal setup.</p> <p>A common \"nice-to-have\" is the presence of the slug <code>/islandora/</code> in the URL which identifies the content as \"Islandora\". </p> <p>A potential \"best practice\" is that if your site uses persistent identifiers such as DOIs or Handles, that those identifiers make up part of the URL alias.</p>"},{"location":"user-documentation/url-aliases/#use-of-url-aliases-in-islandora-starter-site","title":"Use of URL aliases in Islandora Starter Site","text":"<p>The Islandora Starter Site includes the Pathauto module, which we consider that most sites will want to use in some way. However its default configuration should not be interpreted as prescriptive. You are encouraged to use persistent identifiers if you have them!</p> <p>The default Pathauto pattern for Repository Items is <code>/islandora/[node:title]</code> with the pathauto configuration trimming the alias at 100 characters.</p>"},{"location":"user-documentation/url-aliases/#preserving-legacy-urls","title":"Preserving Legacy URLs","text":"<p>Sites migrating from Islandora Legacy may wish for their objects to still  be available through their old URLs, with the pattern <code>/islandora/object/[PID]</code>. </p> <p>Options for doing this include:</p> <ul> <li>Populating <code>field_pid</code> with the legacy PID, and using Pathauto to create URL aliases of the pattern <code>/islandora/object/[node:field_pid]</code>. However, you will need to set up something for new objects that don't have Legacy PIDs.</li> <li>Use discoverygarden's \"PID Redirect\" module, which creates \"301 Moved Permanently\" redirects from legacy URLs to the appropriate node, based on <code>field_pid</code>. </li> <li>Manually managing redirects in your webserver. </li> </ul>"},{"location":"user-documentation/usage-stats/","title":"Usage statistics","text":"<p>Drupal 8 supports various web analytics integrations such as Google Analytics and Matomo. For privacy reasons, Islandora integrates Matomo web analytics platforms by default.</p> <p>The Matomo server is installed here: http://localhost:8000/matomo. The default configurations can be found in <code>http://localhost:8000/admin/config/system/matomo</code>. You can log in to the Matomo server using username <code>admin</code> and password <code>islandora</code>. The dashboard will look like this:</p> <p></p> <p>To see page views, login to Matomo and go to Behaviour &gt;&gt; Pages.</p>"},{"location":"user-documentation/usage-stats/#further-reading","title":"Further Reading","text":"<ul> <li>Matomo User Guides</li> </ul>"},{"location":"user-documentation/user-intro/","title":"Introduction","text":"<p>This Using Islandora section is aimed at site administrators and repository managers who need to understand and configure their Islandora repositories. It will go in-depth on how Islandora allows you to use the various features of Drupal to construct and display repository items. For easy readability, we have divided this documentation into five major sections, organized by functionality.</p> <ul> <li>Describing content: This section covers Islandora's functionality for describing your content. In other words, visit here to learn everything about descriptive metadata in Islandora.</li> <li>Searching content: This section covers Islandora's functionality for searching your content. In other words, visit here to learn everything about finding and browsing content in Islandora.</li> <li>Viewing content: This section covers Islandora's functionality for viewing your content. In other words, visit here to learn about how your content files can be viewed or displayed to your end-users.</li> <li>Handling content files: This section covers Islandora's functionality for managing content files. In other words, visit here to learn the organization and storage of your digital files.</li> <li>Administering Islandora: This section covers Islandora's functionality for administering your site. In other words, this is where you find information about setting permissions, site statistics, and other nitty-gritty (but non-developer) administrative configurations.</li> </ul> <p>Islandora, like Drupal, provides tools to create a site, but does not force you to conform to any specific site structure, organization, or navigation. There is a hope that we can provide something useful out of the box, while also allowing the full suite of Drupal configuration options. This out-of-the-box configuration is the Islandora Demo module.</p> <p>As you read this documentation, it is recommended to be familiar with the basics of Drupal, including content types, fields, users, and views. The Official Drupal User Guide and the Community Guide to Drupal are a good place to start.</p>"},{"location":"user-documentation/user-intro/#modeling-content","title":"Modeling content","text":"<p>In Islandora, we often want to store (and manage, and preserve) sets of metadata with binaries (digital files). Previously in Islandora Legacy, these components were referenced together as a single \"object.\" In Islandora, metadata and their binaries are now represented as multiple interconnected entities.</p> <ul> <li> <p>Metadata is stored in nodes (a.k.a. content).</p> <ul> <li>Specifically, metadata values are stored in fields which are configurable properties attached to nodes.</li> <li>Different types of nodes can have different configurations of fields; these are called content types.</li> </ul> </li> <li> <p>Binary files are stored in are media, which are wrapper entities to help manage files.</p> <ul> <li>Media can have fields too, and come in different media types.</li> </ul> </li> <li> <p>Metadata values can be stored as taxonomy terms, which let you reuse the same value in multiple places.</p> <ul> <li>Taxonomy terms can also have fields, and their version of \"types\" are called vocabularies. They can represent everything from simple labels to more complex concepts such as people, places, and subjects.</li> </ul> </li> </ul>"},{"location":"user-documentation/user-intro/#fedora","title":"Fedora","text":"<p>For users familiar with Islandora Legacy, the relationship between Fedora and Islandora has greatly changed in the current version of Islandora.</p> <p>Islandora Legacy inherited its object model from Fedora 3.x. In Legacy, Fedora stored all properties and content associated with an object - not only its owner, dc.title, status, PID, and status - but also any content files such as OBJ, DC, MODS, and RELS-EXT. In Islandora Legacy, Fedora acted as the authoritative, primary source for all aspects of an object. Fedora 3.x was not an optional component of an Islandora Legacy repository, instead it served as the primary datastore.</p> <p>In Islandora, using Fedora is optional. That's right, optional. Drupal, and not Fedora, is the primary source of all aspects of an Islandora object, and, with some variations, Drupal, not Fedora, is the primary datastore in an Islandora repository. If Fedora is present in an Islandora repository, content in it is a tightly synchronized copy of object properties and files managed by Drupal.</p> <p>Even though Fedora is optional in Islandora, most repositories will use it since it provides its own set of services that are worth taking advantage of, such as:</p> <ul> <li>Flexible and configurable disk storage architecture</li> <li>Fixity digest generation</li> <li>Memento versioning</li> <li>Integration with RDF/Linked Data triple-stores</li> <li>Integration with Microservices via API-X</li> <li>WebAC Policies for access control (not currently leveraged by default)</li> </ul> <p>In Islandora repositories that use Fedora, all properties about Drupal nodes are mirrored in Fedora as RDF properties. But, even if an Islandora instance does not use Fedora, Drupal can provide an object's properties as RDF (again, Drupal is the primary source of data in Islandora). In addition, the Drupal media associated with Islandora objects are persisted to Fedora, although exactly which media is configurable within the Islandora admin interface. Just as Drupal out of the box has a public and private filesystem, Islandora adds a third filesystem to Drupal called, not surprisingly, \"fedora\", and it is to this filesystem that media are persisted. We will provide more information about Fedora's role in an Islandora repository in the metadata and media sections.</p>"},{"location":"user-documentation/user-intro/#architecture","title":"Architecture","text":""},{"location":"user-documentation/user-intro/#conceptual-diagram","title":"Conceptual diagram","text":"<p>Many users of Islandora may be familiar with the metaphorical diagram of Islandora Legacy as a cheeseburger, which provides a memorable approximation of how the different parts of the software stack interact in a vertically-integrated, relatively customizable fashion (ie, Drupal, Solr, Islandora, and Fedora are stable layers, and the \"toppings\" stand in for Solution Packs and other utilities that can be added or removed to customize Islandora):</p> <p></p> <p>For a similar conceptual approach to Islandora, we present it as a bento box: a very modular platform, in which each piece may be removed and replaced with something different, without disrupting other parts of the stack:</p> <p></p> <p>For a true diagram of how the various parts of Islandora interact, please see the full Architecture Diagram.</p>"},{"location":"user-documentation/users/","title":"Managing Users","text":""},{"location":"user-documentation/users/#overview","title":"Overview","text":"<p>Anyone who visits your Drupal site is a user. There are three different default users in Drupal:</p> <ul> <li>Anonymous user. This is anyone who is not logged in.</li> <li>Authenticated user. These are all users who have an account on your site and can log in.</li> <li>Administrator. This is a special class of user that can access the administrative menus in your Drupal site and make changes.</li> </ul> <p>Islandora adds an additional default role:</p> <ul> <li>fedoraAdmin. This is a specialized role needed for a user to write to Fedora from Islandora.</li> </ul> <p>Additional user roles can be created and assigned customized permissions, as described below.</p>"},{"location":"user-documentation/users/#before-you-start","title":"Before you start","text":"<ul> <li>This How-To assumes a very basic familiarity with Drupal.</li> <li>This How-To is generally applicable for any Islandora site, but the examples given are taken from an Islandora demo using the (optional) Islandora Starter Site configuration. This configuration is deployed automatically if you build your Islandora site with the appropriate options, using the Ansible Playbook, ISLE with Docker-Compose.</li> </ul> <p>Warning</p> <p>If you are writing to Fedora, your username must not contain spaces.</p>"},{"location":"user-documentation/users/#how-to-add-a-user","title":"How to Add a User","text":"<ol> <li>Log in to Drupal. You will need the Administrator role to manage users.</li> <li>Click the Manage tab from the top toolbar.</li> <li>Select the People tab from the resulting menu to bring up the People page. </li> <li>Click the blue Add user button to bring up the Add user page.</li> <li>Enter all required fields, as indicated by red asterisks, in the Add user page.</li> <li>In the Roles section, click on the roles that the new user will need.</li> <li>Click on \"Administrator\" if the new user will need to be able to run administrative tasks in Drupal or Islandora.</li> <li>Click on \"fedoraAdmin\" if the new user will need to be able to write to Fedora. This is required by the WebAC authentication so Islandora and Fedora can communicate.</li> <li>Review other settings available for a new user such as:</li> <li>Site language<ul> <li>English selected by default.</li> </ul> </li> <li>Contact Settings section<ul> <li>Personal contact form selected by default.</li> </ul> </li> <li>Click on the Create New Account button at the bottom of the Add user page to finish adding a new user.</li> </ol> <p>To review/edit the permission for each role, in the People page click the Permissions tab in the set of tabs above the Add user button.</p>"},{"location":"user-documentation/users/#how-to-create-a-new-user-role","title":"How to Create a New User Role","text":"<ol> <li>Log in to Drupal. You will need the Administrator role to edit or add roles.</li> <li>Click the Manage tab from the top toolbar.</li> <li>Select the People tab from the resulting menu.</li> <li>Click the Roles tab in the set of tabs above the Add user button.</li> <li>Click the blue Add role button to bring up the Add role page. </li> <li>Name the role in a way that it can be disambiguated from related activities or similar groups.<ul> <li>For example: use the course code for a particular class of students working on a particular collection.</li> </ul> </li> <li>Click the blue Save button.</li> </ol>"},{"location":"user-documentation/users/#how-to-edit-role-permissions","title":"How to Edit Role Permissions","text":"<ol> <li>Log in to Drupal. You will need the Administrator role to edit permissions.</li> <li>Click the Manage tab from the top toolbar.</li> <li>Select the People tab from the resulting menu.</li> <li>Click the Roles tab in the set of tabs above the Add user button. </li> <li>To edit the permissions for a role click the Edit dropdown menu to the right of a role and select Edit Permissions to bring up the Edit role page.</li> <li>Scroll down or search for options that have an Islandora prefix or contain the word Islandora. For example, Islandora Access: Create terms. </li> </ol> <p>Islandora Quick Lessons</p> <p>Learn more with this video on how to Add a User.</p>"},{"location":"user-documentation/users/#video-walk-through-users-roles-and-permissions","title":"Video Walk-through: Users, Roles, and Permissions","text":"<p>Click the image below to open the Users, Roles, and Permissions video tutorial on the Islandora YouTube channel.</p> <p></p> <p>See more videos from the Drupal 101 series here.</p>"},{"location":"user-documentation/users/#further-reading","title":"Further Reading","text":"<p>For more information on managing users in Drupal visit the section Managing User Accounts of Drupal.org.</p>"},{"location":"user-documentation/versioning/","title":"Versioning","text":"<p>As a user of an Islandora repository, you may be wondering - Is this content being versioned? Could I restore from a previous version if I needed to? Can I see a list of versions for an object? The answer to these questions is two-fold, and largely yes. The architecture of Islandora provides users with a Drupal implementation and a Fedora implementation which are connected in Islandora.</p> <p>Islandora Software Versioning</p> <p>Looking for information about versions of Islandora itself? The latest Islandora follows semantic versioning. Previously, Islandora's versions were tied to the version of Drupal and numbered in order of release, such as Islandora 6.x-13.1 or Islandora 7.x-1.13. More information.</p>"},{"location":"user-documentation/versioning/#drupal-revisioning","title":"Drupal Revisioning","text":"<p>Drupal provides a concept of revisions which allows you to track the differences between multiple versions of your content and revert to older ones. The list of revisions for a node, media, or taxonomy term are available at the entity's page, with <code>/revisions</code> appended to the URL. There are Drupal docs on revisioning.</p>"},{"location":"user-documentation/versioning/#fedora-and-memento","title":"Fedora and Memento","text":"<p>Fedora implements the Memento specification for versioning resources, which is a time-based HTTP framework. Fedora provides documentation as well as an API implementation.</p>"},{"location":"user-documentation/versioning/#basic-data-flow","title":"Basic Data Flow","text":"<ol> <li>A node or media object is created or updated in Drupal.</li> <li>When an entity is revisionable, and it isn't the initial creation, it adds a flag to the event object that gets passed to Alpaca.</li> <li>The islandora-indexing-fcrepo module of Alpaca looks for that flag and fires a call to the versioning endpoint of Milliner.</li> <li>Milliner uses the Chullo library to create a version in Fedora.</li> </ol>"},{"location":"user-documentation/video-docs/","title":"Video Documentation","text":""},{"location":"user-documentation/video-docs/#overview","title":"Overview","text":"<p>Islandora Quick Lessons are a series of short videos demonstrating how to do common tasks in Islandora.</p> <p>New videos are added to the playlist regularly.</p>"},{"location":"user-documentation/video-docs/#general-information","title":"General Information","text":"<ul> <li>What is Islandora?: A quick overview of what Islandora is and why people use it.</li> <li>Create a GitHub Issue: How to submit an issue to the Islandora issue queue on GitHub, where you can report a bug, share your use case, request an improvement, or request a new feature.</li> </ul>"},{"location":"user-documentation/video-docs/#installation-virtual-machines","title":"Installation &amp; Virtual Machines","text":"<ul> <li>Building a Virtual Machine: How to build a new VM using the Islandora ansible playbook.</li> <li>Importing a Virtual Machine: How to import a VM from a downloaded .ova.</li> <li>Using an FTP Client on a VM: How to configure an Islandora VM to work with an FTP client like Cyberduck or WinSCP.</li> <li>Composer Module Install: How to use Composer to install new Drupal modules in your VM.</li> </ul>"},{"location":"user-documentation/video-docs/#site-building-basics","title":"Site Building Basics","text":"<ul> <li>Add a User: How to make a new user who can add Islandora content.</li> <li>Creating a Basic Page: How to create a regular Drupal page.</li> <li>Creating a Custom Block: How to create a custom content Block and place it on your site.</li> <li>Adding a Menu Item: How to add a new entry in your site's navigation.</li> <li>Setting a Home Page: How to assign a particular Drupal node as the Home Page for your site.</li> </ul>"},{"location":"user-documentation/video-docs/#working-with-islandora-content","title":"Working with Islandora Content","text":"<ul> <li>Add Content: How to add items to your Islandora repository.</li> <li>Making a Collection: How to create a new Islandora collection.</li> <li>Adding a Taxonomy Term: How to add a new term to an existing Taxonomy in Islandora.</li> <li>Regenerating a Derivative: How to force Islandora to re-create a derivative for a node.</li> <li>Customizing a Form: How to modify fields, modify the ingest form, and modify the metadata display for Islandora content.</li> <li>Adding a New Context: How to add a new Context, causing a site Action to be performed based on conditions.</li> <li>Changing an Action: How to change how an existing Action behaves, to be performed based on a Context.</li> <li>Batch Ingest with Migrate: How to use Drupal Migrate to bulk-load Islandora content with metadata, without using the command line.</li> </ul>"},{"location":"user-documentation/video-docs/#working-with-views","title":"Working with Views","text":"<ul> <li>Basic Views: How to make a very basic View filtered by a taxonomy term.</li> <li>Advanced Views: How to bring together several settings and tools to make a more advanced image view.</li> <li>Batch Editing: How to use Views Bulk Edit to create a batch editing view for Islandora.</li> <li>Export and Import a View: How to copy a custom View from one Islandora site to another.</li> <li>Islandora Webinar: Islandora and Drupal Views: a 1-hour session on working with Views.</li> <li>Summer of Islandora: Drupal Views for Islandora Users: a 30-minute session on manipulating Views.</li> </ul>"},{"location":"user-documentation/video-docs/#additional-topics","title":"Additional Topics","text":"<ul> <li>How to Build Documentation: How to make a local copy of documentation to test and make changes.</li> <li>Changing Themes: How to change the theme for your Islandora site, including replacing Blocks and updating Contexts.</li> </ul>"},{"location":"user-documentation/recipes/alexa-search/","title":"Accessing Islandora with Amazon Alexa","text":"<p>The following recipe details how to connect Islandora with Alexa, using custom Alexa skills and the Drupal Alexa module. The potential applications are broad:</p> <ul> <li>Send Citations, metadata, whatever we want to the user if they have set up their email</li> <li>Creating a collaborative exhibit</li> <li>Play audio and video objects and read transcripts</li> <li>Respond to user search queries (like how many objects match the subject in the repositories)</li> <li>Answer specific questions about the object (\u201cInvocation Name, when was this recorded?\u201d)</li> <li>Interact with other applications or modules (got a print ordering system? Want to add event calendar items to your exhibit?)</li> <li>Be accessed via web page, Alexa device, or phone app</li> </ul> <p>Note</p> <p>This recipe has not been extensively tested.</p>"},{"location":"user-documentation/recipes/alexa-search/#ingredients","title":"Ingredients","text":"<ul> <li>Drupal 8</li> <li>Islandora</li> <li>Drupal Alexa Module</li> <li>Islandora Oral Histories Module</li> <li>Custom Alexa Skill</li> <li>Custom Search</li> </ul>"},{"location":"user-documentation/recipes/alexa-search/#instructions","title":"Instructions","text":"<ol> <li>Create an Amazon Skill<ol> <li>Log in https://developer.amazon.com go to Alexa &gt; Skills Kit &gt; add new skill</li> <li>Pick an Invocation Name</li> <li>Configure SSL etc (Tutorial: https://www.drupal.org/docs/8/modules/alexa/tutorial)</li> <li>Save config, write down the Application ID on the Skill Information Tab!</li> </ol> </li> <li>Integrate with Drupal<ol> <li>Install the Alexa module using Composer:  <code>composer require \"drupal/alexa\"</code></li> <li>Enable modules (Alexa, Alexa_Demo)</li> <li>Go to Config &gt; Alexa Configuration and put in the Application ID.</li> </ol> </li> <li>Test with one question and answer (\u201cClawbster, say Hello world?\u201d \u201cHello World!\u201d) Now you can add as many questions and answers as you can configure: </li> </ol>"}]}